{"version":3,"file":"static/js/2997.9ee5df26.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/esm/src/components/input-time-zone/resources.ts","../node_modules/@esri/calcite-components/dist/esm/src/components/input-time-zone/utils.ts","../node_modules/@esri/calcite-components/dist/esm/src/components/input-time-zone/input-time-zone.scss?tag=calcite-input-time-zone&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/esm/src/components/input-time-zone/input-time-zone.tsx","../node_modules/@esri/calcite-components/dist/esm/src/utils/component.ts","../node_modules/@esri/calcite-components/dist/esm/src/utils/form.tsx","../node_modules/@esri/calcite-components/dist/esm/src/utils/interactive.tsx","../node_modules/@esri/calcite-components/dist/esm/src/utils/label.ts","../node_modules/@esri/calcite-components/dist/esm/src/utils/loadable.ts","../node_modules/@esri/calcite-components/dist/esm/src/utils/t9n.ts"],"sourcesContent":["export const CSS = {\n  offset: \"offset\",\n};\n","import { getDateTimeFormat, SupportedLocale } from \"../../utils/locale\";\nimport { OffsetStyle, TimeZone, TimeZoneItem, TimeZoneItemGroup, TimeZoneMode } from \"./interfaces\";\nimport { InputTimeZoneMessages } from \"./assets/input-time-zone/t9n\";\n\nconst hourToMinutes = 60;\n\nfunction timeZoneOffsetToDecimal(shortOffsetTimeZoneName: string): string {\n  const minusSign = \"−\";\n  const hyphen = \"-\";\n\n  return (\n    shortOffsetTimeZoneName\n      .replace(\":15\", \".25\")\n      .replace(\":30\", \".5\")\n      .replace(\":45\", \".75\")\n\n      // ensures decimal string representation is parseable\n      .replace(minusSign, hyphen)\n  );\n}\n\nfunction toOffsetValue(timeZoneName: TimeZone, referenceDateInMs: number): number {\n  // we use \"en-US\" to allow us to reliably remove the standard time token\n  const offset = getTimeZoneShortOffset(timeZoneName, \"en-US\", referenceDateInMs).replace(\"GMT\", \"\");\n\n  if (offset === \"\") {\n    return 0;\n  }\n\n  return Number(timeZoneOffsetToDecimal(offset)) * hourToMinutes;\n}\n\nexport function getUserTimeZoneOffset(): number {\n  const localDate = new Date();\n  return localDate.getTimezoneOffset() * -1;\n}\n\nexport function getUserTimeZoneName(): string {\n  const dateFormatter = new Intl.DateTimeFormat();\n  return dateFormatter.resolvedOptions().timeZone;\n}\n\nexport async function getNormalizer(mode: TimeZoneMode): Promise<(timeZone: TimeZone) => TimeZone> {\n  if (mode === \"offset\") {\n    return (timeZone: TimeZone) => timeZone;\n  }\n\n  const { normalize } = await import(\"timezone-groups/dist/utils/time-zones.mjs\");\n  return normalize;\n}\n\nexport async function createTimeZoneItems(\n  locale: SupportedLocale,\n  messages: InputTimeZoneMessages,\n  mode: TimeZoneMode,\n  referenceDate: Date,\n  standardTime: OffsetStyle,\n): Promise<TimeZoneItem[] | TimeZoneItemGroup[]> {\n  if (mode === \"name\") {\n    const { groupByName } = await import(\"timezone-groups/dist/groupByName/index.mjs\");\n    const groups = await groupByName();\n\n    return groups\n      .map<TimeZoneItem<string>>(({ label: timeZone }) => {\n        const label = toUserFriendlyName(timeZone);\n        const value = timeZone;\n\n        return {\n          label,\n          value,\n          metadata: {\n            filterValue: timeZone,\n          },\n        };\n      })\n      .filter((group) => !!group)\n      .sort();\n  }\n\n  const effectiveLocale =\n    standardTime === \"user\"\n      ? locale\n      : // we use locales that will always yield a short offset that matches `standardTime`\n        standardTime === \"utc\"\n        ? \"fr\"\n        : \"en-GB\";\n  const referenceDateInMs: number = referenceDate.getTime();\n\n  if (mode === \"region\") {\n    const [{ groupByRegion }, { getCountry, global: globalLabel }] = await Promise.all([\n      import(\"timezone-groups/dist/groupByRegion/index.mjs\"),\n      import(\"timezone-groups/dist/utils/region.mjs\"),\n    ]);\n    const groups = await groupByRegion();\n\n    return groups\n      .map<TimeZoneItemGroup>(({ label: region, tzs }) => {\n        tzs.sort((timeZoneA, timeZoneB) => {\n          const labeledTimeZoneA = getTimeZoneLabel(timeZoneA, messages);\n          const labeledTimeZoneB = getTimeZoneLabel(timeZoneB, messages);\n          const gmtTimeZoneString = \"Etc/GMT\";\n\n          if (timeZoneA.startsWith(gmtTimeZoneString) && timeZoneB.startsWith(gmtTimeZoneString)) {\n            // we use the IANA timezone for simpler and consistent sorting across locales\n            const offsetStringA = timeZoneA.substring(gmtTimeZoneString.length);\n            const offsetStringB = timeZoneB.substring(gmtTimeZoneString.length);\n\n            const offsetA = offsetStringA === \"\" ? 0 : parseInt(offsetStringA);\n            const offsetB = offsetStringB === \"\" ? 0 : parseInt(offsetStringB);\n\n            return offsetB - offsetA;\n          }\n\n          return labeledTimeZoneA.localeCompare(labeledTimeZoneB);\n        });\n\n        return {\n          label: getMessageOrKeyFallback(messages, region),\n          items: tzs.map((timeZone) => {\n            const decimalOffset = timeZoneOffsetToDecimal(\n              getTimeZoneShortOffset(timeZone, effectiveLocale, referenceDateInMs),\n            );\n            const label = getTimeZoneLabel(timeZone, messages);\n            const filterValue =\n              region === globalLabel\n                ? // we rely on the label for search since GMT items have their signs inverted (see https://en.wikipedia.org/wiki/Tz_database#Area)\n                  // in addition to the label we also add \"Global\" and \"Etc\" to allow searching for these items\n                  `${getTimeZoneLabel(globalLabel, messages)} Etc`\n                : toUserFriendlyName(timeZone);\n\n            const countryCode = getCountry(timeZone);\n            const country = getMessageOrKeyFallback(messages, countryCode);\n\n            return {\n              label,\n              value: timeZone,\n              metadata: {\n                country: country === label ? undefined : country,\n                filterValue,\n                offset: decimalOffset,\n              },\n            };\n          }),\n        };\n      })\n      .sort((groupA, groupB) =>\n        groupA.label === globalLabel ? -1 : groupB.label === globalLabel ? 1 : groupA.label.localeCompare(groupB.label),\n      );\n  }\n\n  const [{ groupByOffset }, { DateEngine }] = await Promise.all([\n    import(\"timezone-groups/dist/groupByOffset/index.mjs\"),\n    import(\"timezone-groups/dist/groupByOffset/strategy/native/index.mjs\"),\n  ]);\n\n  const groups = await groupByOffset({\n    dateEngine: new DateEngine(),\n    groupDateRange: 1,\n    startDate: new Date(referenceDateInMs).toISOString(),\n  });\n\n  const listFormatter = new Intl.ListFormat(locale, { style: \"long\", type: \"conjunction\" });\n  const offsetTimeZoneNameBlockList = [\"Factory\", \"Etc/UTC\"];\n\n  // we remove blocked entries from tzs and adjust label indices accordingly\n  groups.forEach((group) => {\n    const indexOffsets: number[] = [];\n    let removedSoFar = 0;\n\n    group.tzs.forEach((tz, index) => {\n      if (offsetTimeZoneNameBlockList.includes(tz)) {\n        removedSoFar++;\n      }\n      indexOffsets[index] = removedSoFar;\n    });\n\n    group.tzs = group.tzs.filter((tz) => !offsetTimeZoneNameBlockList.includes(tz));\n\n    group.labelTzIdx = group.labelTzIdx\n      .map((index) => index - indexOffsets[index])\n      .filter((index) => index >= 0 && index < group.tzs.length);\n  });\n\n  return groups\n    .map<TimeZoneItem<number>>(({ labelTzIdx, tzs }) => {\n      const groupRepTz = tzs[0];\n      const decimalOffset = timeZoneOffsetToDecimal(\n        getTimeZoneShortOffset(groupRepTz, effectiveLocale, referenceDateInMs),\n      );\n      const value = toOffsetValue(groupRepTz, referenceDateInMs);\n      const tzLabels = labelTzIdx.map((index: number) => getTimeZoneLabel(tzs[index], messages));\n      const label = createTimeZoneOffsetLabel(messages, decimalOffset, listFormatter.format(tzLabels));\n\n      return {\n        label,\n        value,\n        metadata: {\n          filterValue: tzs.map((tz) => toUserFriendlyName(tz)),\n        },\n      };\n    })\n    .filter((group) => !!group)\n    .sort((groupA, groupB) => groupA.value - groupB.value);\n}\n\nfunction getTimeZoneLabel(timeZone: string, messages: InputTimeZoneMessages): string {\n  return messages[timeZone] || getCity(timeZone);\n}\n\nexport function getSelectedRegionTimeZoneLabel(city: string, country: string, messages: InputTimeZoneMessages): string {\n  const template = messages.timeZoneRegionLabel;\n  return template.replace(\"{city}\", city).replace(\"{country}\", getMessageOrKeyFallback(messages, country));\n}\n\nexport function getMessageOrKeyFallback(messages: InputTimeZoneMessages, key: string): string {\n  return messages[key] || key;\n}\n\n/**\n * Exported for testing purposes only\n *\n * @internal\n */\nexport function getCity(timeZone: string): string {\n  return timeZone.split(\"/\").pop();\n}\n\n/**\n * Exported for testing purposes only\n *\n * @internal\n */\nexport function toUserFriendlyName(timeZoneName: string): string {\n  return timeZoneName.replace(/_/g, \" \");\n}\n\nfunction createTimeZoneOffsetLabel(messages: InputTimeZoneMessages, offsetLabel: string, groupLabel: string): string {\n  return messages.timeZoneLabel.replace(\"{offset}\", offsetLabel).replace(\"{cities}\", groupLabel);\n}\n\nfunction getTimeZoneShortOffset(\n  timeZone: TimeZone,\n  locale: SupportedLocale,\n  referenceDateInMs: number = Date.now(),\n): string {\n  const dateTimeFormat = getDateTimeFormat(locale, { timeZone, timeZoneName: \"shortOffset\" });\n  const parts = dateTimeFormat.formatToParts(referenceDateInMs);\n  return parts.find(({ type }) => type === \"timeZoneName\").value;\n}\n\nfunction isGroup(item: TimeZoneItem | TimeZoneItemGroup): item is TimeZoneItemGroup {\n  return (item as TimeZoneItemGroup).items !== undefined;\n}\n\nfunction flattenTimeZoneItems(timeZoneItems: TimeZoneItem[] | TimeZoneItemGroup[]): TimeZoneItem[] {\n  return isGroup(timeZoneItems[0]) ? timeZoneItems.flatMap((item) => item.items) : timeZoneItems;\n}\n\nexport function findTimeZoneItemByProp(\n  timeZoneItems: TimeZoneItem[] | TimeZoneItemGroup[],\n  prop: string,\n  valueToMatch: string | number | null,\n): TimeZoneItem | null {\n  return valueToMatch == null\n    ? null\n    : flattenTimeZoneItems(timeZoneItems).find(\n        (item) =>\n          // intentional == to match string to number\n          item[prop] == valueToMatch,\n      );\n}\n",":host {\n  display: block;\n}\n\n.offset {\n  white-space: nowrap;\n}\n\n@include base-component();\n@include disabled();\n@include hidden-form-input();\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport { connectLabel, disconnectLabel, LabelableComponent } from \"../../utils/label\";\nimport {\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport {\n  connectLocalized,\n  disconnectLocalized,\n  LocalizedComponent,\n  SupportedLocale,\n} from \"../../utils/locale\";\nimport { Scale, Status } from \"../interfaces\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { OverlayPositioning } from \"../../utils/floating-ui\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport {\n  afterConnectDefaultValueSet,\n  connectForm,\n  disconnectForm,\n  FormComponent,\n  HiddenFormInputSlot,\n  MutableValidityState,\n} from \"../../utils/form\";\nimport { IconNameOrString } from \"../icon/interfaces\";\nimport { CSS } from \"./resources\";\nimport {\n  createTimeZoneItems,\n  findTimeZoneItemByProp,\n  getNormalizer,\n  getSelectedRegionTimeZoneLabel,\n  getUserTimeZoneName,\n  getUserTimeZoneOffset,\n} from \"./utils\";\nimport { InputTimeZoneMessages } from \"./assets/input-time-zone/t9n\";\nimport { OffsetStyle, TimeZone, TimeZoneItem, TimeZoneItemGroup, TimeZoneMode } from \"./interfaces\";\n\n@Component({\n  tag: \"calcite-input-time-zone\",\n  styleUrl: \"input-time-zone.scss\",\n  assetsDirs: [\"assets\"],\n  shadow: {\n    delegatesFocus: true,\n  },\n})\nexport class InputTimeZone\n  implements\n    FormComponent,\n    InteractiveComponent,\n    LabelableComponent,\n    LoadableComponent,\n    LocalizedComponent,\n    T9nComponent\n{\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * When `true`, an empty value (`null`) will be allowed as a `value`.\n   *\n   * When `false`, an offset or name value is enforced, and clearing the input or blurring will restore the last valid `value`.\n   */\n  @Prop({ reflect: true }) clearable = false;\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  /**\n   * The `id` of the form that will be associated with the component.\n   *\n   * When not set, the component will be associated with its ancestor form element, if any.\n   */\n  @Prop({ reflect: true }) form: string;\n\n  /** Specifies the component's maximum number of options to display before displaying a scrollbar. */\n  @Prop({ reflect: true }) maxItems = 0;\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: InputTimeZoneMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<InputTimeZoneMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  /**\n   * This specifies the type of `value` and the associated options presented to the user:\n   *\n   * Using `\"offset\"` will provide options that show timezone offsets.\n   *\n   * Using `\"name\"` will provide options that show the IANA time zone names.\n   *\n   * @default \"offset\"\n   */\n  @Prop({ reflect: true }) mode: TimeZoneMode = \"offset\";\n\n  @Watch(\"messages\")\n  @Watch(\"mode\")\n  @Watch(\"referenceDate\")\n  handleTimeZoneItemPropsChange(): void {\n    if (!this.timeZoneItems) {\n      return;\n    }\n\n    this.updateTimeZoneItems();\n    this.updateTimeZoneSelection();\n  }\n\n  /**\n   * Specifies how the offset will be displayed, where\n   *\n   * `\"user\"` uses `UTC` or `GMT` depending on the user's locale,\n   * `\"gmt\"` always uses `GMT`, and\n   * `\"utc\"` always uses `UTC`.\n   *\n   * This only applies to the `offset` mode.\n   *\n   * @default \"user\"\n   */\n  @Prop({ reflect: true }) offsetStyle: OffsetStyle = \"user\";\n\n  /** Specifies the validation message to display under the component. */\n  @Prop() validationMessage: string;\n\n  /** Specifies the validation icon to display under the component. */\n  @Prop({ reflect: true }) validationIcon: IconNameOrString | boolean;\n\n  /**\n   * The current validation state of the component.\n   *\n   * @readonly\n   * @mdn [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated in form util when syncing hidden input\n  @Prop({ mutable: true }) validity: MutableValidityState = {\n    valid: false,\n    badInput: false,\n    customError: false,\n    patternMismatch: false,\n    rangeOverflow: false,\n    rangeUnderflow: false,\n    stepMismatch: false,\n    tooLong: false,\n    tooShort: false,\n    typeMismatch: false,\n    valueMissing: false,\n  };\n\n  /**\n   * Specifies the name of the component.\n   *\n   * Required to pass the component's `value` on form submission.\n   */\n  @Prop({ reflect: true }) name: string;\n\n  /** When `true`, displays and positions the component. */\n  @Prop({ mutable: true, reflect: true }) open = false;\n\n  @Watch(\"open\")\n  openChanged(): void {\n    // we set the property instead of the attribute to ensure open/close events are emitted properly\n    this.comboboxEl.open = this.open;\n  }\n\n  /**\n   * Determines the type of positioning to use for the overlaid content.\n   *\n   * Using `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n   *\n   * `\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.\n   *\n   */\n  @Prop({ reflect: true }) overlayPositioning: OverlayPositioning = \"absolute\";\n\n  /**\n   * This `date` will be used as a reference to Daylight Savings Time when creating time zone item groups.\n   *\n   * It can be either a Date instance or a string in ISO format (`\"YYYY-MM-DD\"`, `\"YYYY-MM-DDTHH:MM:SS.SSSZ\"`).\n   *\n   * @see [Date.prototype.toISOString](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)\n   */\n  @Prop() referenceDate: Date | string;\n\n  /**\n   * When `true`, the component must have a value in order for the form to submit.\n   *\n   * @internal\n   */\n  @Prop({ reflect: true }) required = false;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /** Specifies the status of the input field, which determines message and icons. */\n  @Prop({ reflect: true }) status: Status = \"idle\";\n\n  /**\n   * The component's value, where the value is the time zone offset or the difference, in minutes, between the selected time zone and UTC.\n   *\n   * If no value is provided, the user's time zone offset will be selected by default.\n   *\n   * @see https://www.w3.org/International/core/2005/09/timezone.html#:~:text=What%20is%20a%20%22zone%20offset,or%20%22%2D%22%20from%20UTC.\n   */\n  @Prop({ mutable: true }) value: string;\n\n  @Watch(\"value\")\n  handleValueChange(value: string, oldValue: string): void {\n    value = this.normalizeValue(value);\n\n    if (!value) {\n      if (this.clearable) {\n        this.value = value;\n        this.selectedTimeZoneItem = null;\n        return;\n      }\n\n      this.value = oldValue;\n      this.selectedTimeZoneItem = this.findTimeZoneItem(oldValue);\n      return;\n    }\n\n    const timeZoneItem = this.findTimeZoneItem(value);\n\n    if (!timeZoneItem) {\n      this.value = oldValue;\n      return;\n    }\n\n    this.selectedTimeZoneItem = timeZoneItem;\n  }\n\n  /**\n   * When `true`, the component's value can be read, but controls are not accessible and the value cannot be modified.\n   */\n  @Prop({ reflect: true }) readOnly = false;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    await this.comboboxEl.setFocus();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Fires when the component is requested to be closed and before the closing transition begins.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneBeforeClose: EventEmitter<void>;\n\n  /**\n   * Fires when the component is added to the DOM but not rendered, and before the opening transition begins.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneBeforeOpen: EventEmitter<void>;\n\n  /**\n   * Fires when the component's `value` changes.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneChange: EventEmitter<void>;\n\n  /**\n   * Fires after the component is closed and animation is complete.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneClose: EventEmitter<void>;\n\n  /**\n   * Fires after the component is opened and animation is complete.\n   */\n  @Event({ cancelable: false }) calciteInputTimeZoneOpen: EventEmitter<void>;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteInputTimeZoneElement;\n\n  private comboboxEl: HTMLCalciteComboboxElement;\n\n  @State() defaultMessages: InputTimeZoneMessages;\n\n  defaultValue: InputTimeZone[\"value\"];\n\n  @State() effectiveLocale: SupportedLocale = \"\";\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleWatcher(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  formEl: HTMLFormElement;\n\n  labelEl: HTMLCalciteLabelElement;\n\n  private selectedTimeZoneItem: TimeZoneItem;\n\n  private timeZoneItems: TimeZoneItem[] | TimeZoneItemGroup[];\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  onLabelClick(): void {\n    this.setFocus();\n  }\n\n  private setComboboxRef = (el: HTMLCalciteComboboxElement): void => {\n    this.comboboxEl = el;\n  };\n\n  /**\n   * Helps override the selected item's label for region mode outside of item rendering logic to avoid flickering text change\n   *\n   * @param open\n   * @private\n   */\n  private overrideSelectedLabelForRegion(open: boolean): void {\n    if (this.mode !== \"region\" || !this.selectedTimeZoneItem) {\n      return;\n    }\n\n    const { label, metadata } = this.selectedTimeZoneItem;\n\n    this.comboboxEl.selectedItems[0].textLabel =\n      !metadata.country || open\n        ? label\n        : getSelectedRegionTimeZoneLabel(label, metadata.country, this.messages);\n  }\n\n  private onComboboxBeforeClose = (event: CustomEvent): void => {\n    event.stopPropagation();\n    this.overrideSelectedLabelForRegion(false);\n    this.calciteInputTimeZoneBeforeClose.emit();\n  };\n\n  private onComboboxBeforeOpen = (event: CustomEvent): void => {\n    event.stopPropagation();\n    this.overrideSelectedLabelForRegion(true);\n    this.calciteInputTimeZoneBeforeOpen.emit();\n  };\n\n  private onComboboxChange = (event: CustomEvent): void => {\n    event.stopPropagation();\n    const combobox = event.target as HTMLCalciteComboboxElement;\n    const selectedItem = combobox.selectedItems[0];\n\n    if (!selectedItem) {\n      this.value = null;\n      this.selectedTimeZoneItem = null;\n      this.calciteInputTimeZoneChange.emit();\n      return;\n    }\n\n    const selected = this.findTimeZoneItemByLabel(selectedItem.getAttribute(\"data-label\"));\n    const selectedValue = `${selected.value}`;\n\n    if (this.value === selectedValue && selected.label === this.selectedTimeZoneItem.label) {\n      return;\n    }\n\n    this.value = selectedValue;\n    this.selectedTimeZoneItem = selected;\n    this.calciteInputTimeZoneChange.emit();\n  };\n\n  private onComboboxClose = (event: CustomEvent): void => {\n    event.stopPropagation();\n    this.open = false;\n    this.calciteInputTimeZoneClose.emit();\n  };\n\n  private onComboboxOpen = (event: CustomEvent): void => {\n    this.open = true;\n    event.stopPropagation();\n    this.calciteInputTimeZoneOpen.emit();\n  };\n\n  private findTimeZoneItem(value: number | string | null): TimeZoneItem | null {\n    return findTimeZoneItemByProp(this.timeZoneItems, \"value\", value);\n  }\n\n  private findTimeZoneItemByLabel(label: string | null): TimeZoneItem | null {\n    return findTimeZoneItemByProp(this.timeZoneItems, \"label\", label);\n  }\n\n  private async updateTimeZoneItems(): Promise<void> {\n    this.timeZoneItems = await this.createTimeZoneItems();\n  }\n\n  private async updateTimeZoneSelection(): Promise<void> {\n    if (this.value === \"\" && this.clearable) {\n      this.selectedTimeZoneItem = null;\n      return;\n    }\n\n    const fallbackValue = this.mode === \"offset\" ? getUserTimeZoneOffset() : getUserTimeZoneName();\n    const valueToMatch = this.value ?? fallbackValue;\n\n    this.selectedTimeZoneItem =\n      this.findTimeZoneItem(valueToMatch) || this.findTimeZoneItem(fallbackValue);\n  }\n\n  private async createTimeZoneItems(): Promise<TimeZoneItem[] | TimeZoneItemGroup[]> {\n    if (!this.effectiveLocale || !this.messages) {\n      return [];\n    }\n\n    return createTimeZoneItems(\n      this.effectiveLocale,\n      this.messages,\n      this.mode,\n      this.referenceDate instanceof Date\n        ? this.referenceDate\n        : new Date(this.referenceDate ?? Date.now()),\n      this.offsetStyle,\n    );\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectForm(this);\n    connectLabel(this);\n    connectLocalized(this);\n    connectMessages(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectForm(this);\n    disconnectLabel(this);\n    disconnectLocalized(this);\n    disconnectMessages(this);\n  }\n\n  private normalizeValue(value: string | null): string {\n    value = value === null ? \"\" : value;\n\n    return value ? this.normalizer(value) : value;\n  }\n\n  private normalizer: (timeZone: TimeZone) => TimeZone;\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    const [, normalizer] = await Promise.all([setUpMessages(this), getNormalizer(this.mode)]);\n\n    this.normalizer = normalizer;\n    await this.updateTimeZoneItems();\n    this.value = this.normalizeValue(this.value);\n\n    await this.updateTimeZoneSelection();\n\n    const selectedValue = this.selectedTimeZoneItem ? `${this.selectedTimeZoneItem.value}` : null;\n    afterConnectDefaultValueSet(this, selectedValue);\n    this.value = selectedValue;\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n    this.openChanged();\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n    this.overrideSelectedLabelForRegion(this.open);\n  }\n\n  render(): VNode {\n    return (\n      <Host>\n        <InteractiveContainer disabled={this.disabled}>\n          <calcite-combobox\n            clearDisabled={!this.clearable}\n            disabled={this.disabled}\n            label={this.messages.chooseTimeZone}\n            lang={this.effectiveLocale}\n            maxItems={this.maxItems}\n            onCalciteComboboxBeforeClose={this.onComboboxBeforeClose}\n            onCalciteComboboxBeforeOpen={this.onComboboxBeforeOpen}\n            onCalciteComboboxChange={this.onComboboxChange}\n            onCalciteComboboxClose={this.onComboboxClose}\n            onCalciteComboboxOpen={this.onComboboxOpen}\n            overlayPositioning={this.overlayPositioning}\n            placeholder={\n              this.mode === \"name\"\n                ? this.messages.namePlaceholder\n                : this.mode === \"offset\"\n                  ? this.messages.offsetPlaceholder\n                  : this.messages.regionPlaceholder\n            }\n            placeholderIcon=\"search\"\n            readOnly={this.readOnly}\n            ref={this.setComboboxRef}\n            scale={this.scale}\n            selectionMode={this.clearable ? \"single\" : \"single-persist\"}\n            status={this.status}\n            validation-icon={this.validationIcon}\n            validation-message={this.validationMessage}\n          >\n            {this.renderItems()}\n          </calcite-combobox>\n          <HiddenFormInputSlot component={this} />\n        </InteractiveContainer>\n      </Host>\n    );\n  }\n\n  private renderItems(): VNode[] {\n    if (this.mode === \"region\") {\n      return this.renderRegionItems();\n    }\n\n    return this.timeZoneItems.map((group) => {\n      const selected = this.selectedTimeZoneItem === group;\n      const { label, metadata, value } = group;\n\n      return (\n        <calcite-combobox-item\n          data-label={label}\n          key={label}\n          metadata={metadata}\n          selected={selected}\n          textLabel={label}\n          value={value}\n        />\n      );\n    });\n  }\n\n  private renderRegionItems(): VNode[] {\n    return (this.timeZoneItems as TimeZoneItemGroup[]).flatMap(({ label, items }) => (\n      <calcite-combobox-item-group key={label} label={label}>\n        {items.map((item) => {\n          const selected = this.selectedTimeZoneItem === item;\n          const { label, metadata, value } = item;\n\n          return (\n            <calcite-combobox-item\n              data-label={label}\n              description={metadata.country}\n              key={label}\n              metadata={metadata}\n              selected={selected}\n              textLabel={label}\n              value={value}\n            >\n              <span class={CSS.offset} slot=\"content-end\">\n                {metadata.offset}\n              </span>\n            </calcite-combobox-item>\n          );\n        })}\n      </calcite-combobox-item-group>\n    ));\n  }\n}\n","import { HTMLStencilElement } from \"@stencil/core/internal\";\nimport { Scale } from \"../components/interfaces\";\n\nexport function getIconScale(componentScale: Scale): Extract<Scale, \"s\" | \"m\"> {\n  return componentScale === \"l\" ? \"m\" : \"s\";\n}\n\n/**\n * This util helps us wait for a component to be ready for both lazy-loading (`dist` output) and non-lazy-loading (`components` output) components.\n *\n * Based on https://github.com/ionic-team/ionic-framework/blob/1a8bd6d/core/src/utils/helpers.ts#L60C1-L79C3\n *\n * @param el - the host element to wait for\n */\nexport async function componentOnReady(el: HTMLElement): Promise<void> {\n  await (isStencilEl(el)\n    ? el.componentOnReady()\n    : new Promise<void>((resolve) => requestAnimationFrame(() => resolve())));\n}\n\nfunction isStencilEl(el: HTMLElement): el is HTMLStencilElement {\n  return typeof (el as HTMLStencilElement).componentOnReady === \"function\";\n}\n","import { FunctionalComponent, h, VNode } from \"@stencil/core\";\nimport { Writable } from \"type-fest\";\nimport { Status } from \"../components/interfaces\";\nimport type { IconNameOrString } from \"../components/icon/interfaces\";\nimport { closestElementCrossShadowBoundary, queryElementRoots } from \"./dom\";\n\n/**\n * Any form <Component> with a `calcite<Component>Input` event needs to be included in this array.\n */\nexport const componentsWithInputEvent = [\n  \"calcite-input\",\n  \"calcite-input-number\",\n  \"calcite-input-text\",\n  \"calcite-text-area\",\n];\n\n/**\n * Get the event name to listen for that, when emitted, will clear the\n * validation message that displays after form submission. Only validation\n * messages that are set by the browser will be cleared. If a user sets\n * validationMessage to a custom value, they are responsible for clearing it.\n *\n * Exported for testing purposes.\n *\n * @param componentTag the tag of the component, e.g. \"calcite-input\"\n * @returns the event name\n */\nexport function getClearValidationEventName(componentTag: string): string {\n  const componentTagCamelCase = componentTag\n    .split(\"-\")\n    .map((part: string, index: number) =>\n      index === 0 ? part : `${part[0].toUpperCase()}${part.slice(1)}`,\n    )\n    .join(\"\");\n\n  const clearValidationEvent = `${componentTagCamelCase}${\n    componentsWithInputEvent.includes(componentTag) ? \"Input\" : \"Change\"\n  }`;\n\n  return clearValidationEvent;\n}\n\nexport type MutableValidityState = Writable<ValidityState>;\n\n/**\n * Exported for testing purposes.\n */\nexport const hiddenFormInputSlotName = \"hidden-form-input\";\n\n/**\n * Defines interface for form owning components.\n *\n * Allows calling submit/reset methods on the form.\n */\nexport interface FormOwner {\n  /**\n   * The host element.\n   */\n  readonly el: HTMLElement;\n\n  /**\n   * The ID of the form to associate with the component.\n   *\n   * When not set, the component will be associated with its ancestor form element, if any.\n   *\n   * Note that this prop should use the @Prop decorator.\n   */\n  form: string;\n\n  /**\n   * The form this component is associated with.\n   *\n   * @internal\n   */\n  formEl: HTMLFormElement;\n}\n\n/**\n * Defines interface for form-associated components.\n *\n * Along with the interface, use the matching form utils to help set up the component behavior.\n */\nexport interface FormComponent<T = any> extends FormOwner {\n  /**\n   * When true, this component's value will not be submitted in the form.\n   */\n  disabled: boolean;\n\n  /**\n   * When true, form submit requests will enforce field requirement.\n   *\n   * @todo remove optional in follow-up PR\n   */\n  required?: boolean;\n\n  /**\n   * The name used to submit the value to the associated form.\n   *\n   * Note that this prop should use the @Prop decorator.\n   */\n  name: string;\n\n  /**\n   * This form component's value.\n   *\n   * Note that this prop should use the @Prop decorator.\n   */\n  value: T;\n\n  /**\n   * The initial value for this form component.\n   *\n   * When the form is reset, the value will be set to this property.\n   */\n  defaultValue: T;\n\n  /** The validation icon to display. */\n  validationIcon?: string | boolean;\n\n  /** The validation message to display. */\n  validationMessage?: string;\n\n  /** The validity state of the form component. */\n  validity?: MutableValidityState;\n\n  /**\n   * Hook for components to provide custom form reset behavior.\n   */\n  onFormReset?: () => void;\n\n  /**\n   * Hook for components to sync _extra_ props on the hidden input form element used for form-submitting.\n   *\n   * Note: The following props are set by default: disabled, hidden, name, required, value.\n   */\n  syncHiddenFormInput?: (input: HTMLInputElement) => void;\n}\n\n/**\n * Defines interface for checkable form-associated components.\n *\n * Along with the interface, use the matching form utils to help set up the component behavior.\n */\nexport interface CheckableFormComponent<T = any> extends FormComponent<T> {\n  /**\n   * For boolean-valued components, this property defines whether the associated value is submitted to the form or not.\n   */\n  checked: boolean;\n\n  /**\n   * The initial checked value for this form component.\n   *\n   * When the form is reset, the checked property will be set to this value.\n   */\n  defaultChecked: boolean;\n}\n\nfunction isCheckable(component: FormComponent): component is CheckableFormComponent {\n  return \"checked\" in component;\n}\n\nconst onFormResetMap = new WeakMap<HTMLElement, FormComponent[\"onFormReset\"]>();\nconst formComponentSet = new WeakSet<HTMLElement>();\n\n/**\n * This helps determine if our form component is part of a composite form-associated component.\n *\n * @param form\n * @param formComponentEl\n */\nfunction hasRegisteredFormComponentParent(\n  form: HTMLFormElement,\n  formComponentEl: HTMLElement,\n): boolean {\n  // if we have a parent component using the form ID attribute, we assume it is form-associated\n  const hasParentComponentWithFormIdSet = closestElementCrossShadowBoundary(\n    formComponentEl.parentElement,\n    \"[form]\",\n  );\n\n  if (hasParentComponentWithFormIdSet) {\n    return true;\n  }\n\n  // we use events as a way to test for nested form-associated components across shadow bounds\n  const formComponentRegisterEventName = \"calciteInternalFormComponentRegister\";\n\n  let hasRegisteredFormComponentParent = false;\n\n  form.addEventListener(\n    formComponentRegisterEventName,\n    (event) => {\n      hasRegisteredFormComponentParent = event\n        .composedPath()\n        .some((element) => formComponentSet.has(element as HTMLElement));\n      event.stopPropagation();\n    },\n    { once: true },\n  );\n\n  formComponentEl.dispatchEvent(\n    new CustomEvent(formComponentRegisterEventName, {\n      bubbles: true,\n      composed: true,\n    }),\n  );\n\n  return hasRegisteredFormComponentParent;\n}\n\n// exported for test purposes only\nexport interface ValidationProps {\n  status: Status;\n  message: string;\n  icon: IconNameOrString | boolean | \"\";\n}\n\nfunction displayValidationMessage(\n  component: HTMLCalciteInputElement | FormComponent,\n  { status, message, icon }: ValidationProps,\n): void {\n  if (\"status\" in component) {\n    component.status = status;\n  }\n\n  if (\"validationIcon\" in component && typeof component.validationIcon !== \"string\") {\n    component.validationIcon = icon;\n  }\n\n  if (\"validationMessage\" in component && !component.validationMessage) {\n    component.validationMessage = message;\n  }\n}\n\nfunction getValidationComponent(\n  el: HTMLCalciteInputElement,\n  // TODO: create an HTMLCalciteFormAssociatedElement base type\n): HTMLCalciteInputElement | HTMLCalciteRadioButtonGroupElement {\n  // radio-button is formAssociated, but the validation props are on the parent group\n  if (el.nodeName === \"CALCITE-RADIO-BUTTON\") {\n    return closestElementCrossShadowBoundary(el, \"calcite-radio-button-group\");\n  }\n  return el;\n}\n\nconst invalidEvent = new CustomEvent(\"calciteInvalid\", { bubbles: true, composed: true });\n\nfunction invalidHandler(event: Event) {\n  // target is the hidden input, which is slotted in the actual form component\n  const hiddenInput = event?.target as HTMLInputElement;\n  const hiddenInputMessage = hiddenInput?.validationMessage;\n\n  // not necessarily a calcite-input, but we don't have an HTMLCalciteFormAssociatedElement type\n  const formComponent = getValidationComponent(\n    hiddenInput?.parentElement as HTMLCalciteInputElement,\n  ) as HTMLCalciteInputElement;\n\n  if (!formComponent) {\n    return;\n  }\n\n  const componentTag = formComponent?.nodeName?.toLowerCase();\n  const componentTagParts = componentTag?.split(\"-\");\n\n  if (componentTagParts.length < 2 || componentTagParts[0] !== \"calcite\") {\n    return;\n  }\n\n  // prevent the browser from showing the native validation popover\n  event?.preventDefault();\n\n  if (\"validity\" in formComponent) {\n    formComponent.validity = hiddenInput?.validity;\n  }\n\n  // dispatch a \"calciteInvalid\" so users can set custom validation messages\n  formComponent.dispatchEvent(invalidEvent);\n\n  displayValidationMessage(formComponent, {\n    message: hiddenInputMessage,\n    icon: true,\n    status: \"invalid\",\n  });\n\n  const clearValidationEvent = getClearValidationEventName(componentTag);\n  formComponent.addEventListener(\n    clearValidationEvent,\n    () => {\n      if (\"status\" in formComponent) {\n        formComponent.status = \"idle\";\n      }\n\n      if (\"validationIcon\" in formComponent && !formComponent.validationIcon) {\n        formComponent.validationIcon = false;\n      }\n\n      if (\n        \"validationMessage\" in formComponent &&\n        formComponent.validationMessage === hiddenInputMessage\n      ) {\n        formComponent.validationMessage = \"\";\n      }\n\n      if (\"validity\" in formComponent) {\n        formComponent.validity = hiddenInput?.validity;\n      }\n    },\n    { once: true },\n  );\n}\n\n/**\n * Helper to submit a form.\n *\n * @param component\n * @returns true if its associated form was submitted, false otherwise.\n */\nexport function submitForm(component: FormOwner): boolean {\n  const { formEl } = component;\n\n  if (!formEl) {\n    return false;\n  }\n\n  formEl.addEventListener(\"invalid\", invalidHandler, true);\n  formEl.requestSubmit();\n  formEl.removeEventListener(\"invalid\", invalidHandler, true);\n\n  requestAnimationFrame(() => {\n    const invalidEls = formEl.querySelectorAll<HTMLCalciteInputElement>(\"[status=invalid]\");\n\n    // focus the first invalid element that has a validation message\n    for (const el of invalidEls) {\n      if (el?.validationMessage) {\n        el?.setFocus();\n        break;\n      }\n    }\n  });\n\n  return true;\n}\n\n/**\n * Helper to reset a form.\n *\n * @param component\n */\nexport function resetForm(component: FormOwner): void {\n  component.formEl?.reset();\n}\n\n/**\n * Helper to set up form interactions on connectedCallback.\n *\n * @param component\n */\nexport function connectForm<T>(component: FormComponent<T>): void {\n  const { el, value } = component;\n  const associatedForm = findAssociatedForm(component);\n\n  if (!associatedForm || hasRegisteredFormComponentParent(associatedForm, el)) {\n    return;\n  }\n\n  component.formEl = associatedForm;\n  component.defaultValue = value;\n\n  if (isCheckable(component)) {\n    component.defaultChecked = component.checked;\n  }\n\n  const boundOnFormReset = (component.onFormReset || onFormReset).bind(component);\n  associatedForm.addEventListener(\"reset\", boundOnFormReset);\n  onFormResetMap.set(component.el, boundOnFormReset);\n  formComponentSet.add(el);\n}\n\n/**\n * Utility method to find a form-component's associated form element.\n *\n * @param component\n */\nexport function findAssociatedForm(component: FormOwner): HTMLFormElement | null {\n  const { el, form } = component;\n\n  return form\n    ? queryElementRoots<HTMLFormElement>(el, { id: form })\n    : closestElementCrossShadowBoundary(el, \"form\");\n}\n\nfunction onFormReset<T>(this: FormComponent<T>): void {\n  if (\"status\" in this) {\n    this.status = \"idle\";\n  }\n\n  if (\"validationIcon\" in this) {\n    this.validationIcon = false;\n  }\n\n  if (\"validationMessage\" in this) {\n    this.validationMessage = \"\";\n  }\n\n  if (isCheckable(this)) {\n    this.checked = this.defaultChecked;\n    return;\n  }\n\n  this.value = this.defaultValue;\n}\n\n/**\n * Helper to tear down form interactions on disconnectedCallback.\n *\n * @param component\n */\nexport function disconnectForm<T>(component: FormComponent<T>): void {\n  const { el, formEl } = component;\n\n  if (!formEl) {\n    return;\n  }\n\n  const boundOnFormReset = onFormResetMap.get(el);\n  formEl.removeEventListener(\"reset\", boundOnFormReset);\n  onFormResetMap.delete(el);\n  component.formEl = null;\n  formComponentSet.delete(el);\n}\n\n/**\n * Helper for setting the default value on initialization after connectedCallback.\n *\n * Note that this is only needed if the default value cannot be determined on connectedCallback.\n *\n * @param component\n * @param value\n */\nexport function afterConnectDefaultValueSet<T>(component: FormComponent<T>, value: any): void {\n  component.defaultValue = value;\n}\n\nexport const internalHiddenInputInputEvent = \"calciteInternalHiddenInputInput\";\n\nconst hiddenInputInputHandler = (event: Event) => {\n  event.target.dispatchEvent(new CustomEvent(internalHiddenInputInputEvent, { bubbles: true }));\n};\n\nconst removeHiddenInputChangeEventListener = (input: HTMLInputElement) =>\n  input.removeEventListener(\"input\", hiddenInputInputHandler);\n\n/**\n * Helper for maintaining a form-associated's hidden input in sync with the component.\n *\n * Based on Ionic's approach: https://github.com/ionic-team/ionic-framework/blob/e4bf052794af9aac07f887013b9250d2a045eba3/core/src/utils/helpers.ts#L198\n *\n * @param component\n */\nfunction syncHiddenFormInput(component: FormComponent): void {\n  const { el, formEl, name, value } = component;\n  const { ownerDocument } = el;\n\n  const inputs = el.querySelectorAll<HTMLInputElement>(`input[slot=\"${hiddenFormInputSlotName}\"]`);\n\n  if (!formEl || !name) {\n    inputs.forEach((input) => {\n      removeHiddenInputChangeEventListener(input);\n      input.remove();\n    });\n    return;\n  }\n\n  const values = Array.isArray(value) ? value : [value];\n  const extra: any[] = [];\n  const seen = new Set<any>();\n\n  inputs.forEach((input) => {\n    const valueMatch = values.find(\n      (val) =>\n        /* intentional non-strict equality check */\n        val == input.value,\n    );\n\n    if (valueMatch != null) {\n      seen.add(valueMatch);\n      defaultSyncHiddenFormInput(component, input, valueMatch);\n    } else {\n      extra.push(input);\n    }\n  });\n\n  let docFrag: DocumentFragment;\n\n  values.forEach((value) => {\n    if (seen.has(value)) {\n      return;\n    }\n\n    let input = extra.pop();\n\n    if (!input) {\n      input = ownerDocument.createElement(\"input\");\n      input.slot = hiddenFormInputSlotName;\n    }\n\n    if (!docFrag) {\n      docFrag = ownerDocument.createDocumentFragment();\n    }\n\n    docFrag.append(input);\n\n    // emits when hidden input is autofilled\n    input.addEventListener(\"input\", hiddenInputInputHandler);\n\n    defaultSyncHiddenFormInput(component, input, value);\n  });\n\n  if (docFrag) {\n    el.append(docFrag);\n  }\n  extra.forEach((input) => {\n    removeHiddenInputChangeEventListener(input);\n    input.remove();\n  });\n}\n\nfunction defaultSyncHiddenFormInput(\n  component: FormComponent,\n  input: HTMLInputElement,\n  value: string,\n): void {\n  const { defaultValue, disabled, form, name, required } = component;\n\n  // keep in sync to prevent losing reset value\n  input.defaultValue = defaultValue;\n  input.disabled = disabled;\n  input.name = name;\n  input.required = required;\n  input.tabIndex = -1;\n\n  // we set the attr as the prop is read-only\n  if (form) {\n    input.setAttribute(\"form\", form);\n  } else {\n    input.removeAttribute(\"form\");\n  }\n\n  if (isCheckable(component)) {\n    input.checked = component.checked;\n\n    // keep in sync to prevent losing reset value\n    input.defaultChecked = component.defaultChecked;\n    // heuristic to support default/on mode from https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default-on\n    input.value = component.checked ? value || \"on\" : \"\";\n  } else {\n    input.value = value || \"\";\n  }\n\n  component.syncHiddenFormInput?.(input);\n\n  const validationComponent = getValidationComponent(component.el as HTMLCalciteInputElement);\n\n  if (validationComponent && \"validity\" in validationComponent) {\n    // mutate the component's validity object to prevent a rerender\n    // https://stenciljs.com/docs/properties#mutable-arrays-and-objects\n    for (const key in { ...input?.validity }) {\n      validationComponent.validity[key] = input.validity[key];\n    }\n  }\n}\n\ninterface HiddenFormInputSlotProps {\n  component: FormComponent;\n}\n\n/**\n * Helper to render the slot for form-associated component's hidden input.\n *\n * If the component has a default slot, this must be placed at the bottom of the component's root container to ensure it is the last child.\n *\n * render(): VNode {\n *   <Host>\n *     <div class={CSS.container}>\n *     // ...\n *     <HiddenFormInputSlot component={this} />\n *     </div>\n *   </Host>\n * }\n *\n * Note that the hidden-form-input Sass mixin must be added to the component's style to apply specific styles.\n *\n * @param root0\n * @param root0.component\n */\nexport const HiddenFormInputSlot: FunctionalComponent<HiddenFormInputSlotProps> = ({\n  component,\n}): VNode => {\n  syncHiddenFormInput(component);\n\n  return <slot name={hiddenFormInputSlotName} />;\n};\n","import { JSXAttributes } from \"@stencil/core/internal\";\nimport { FunctionalComponent, h, VNode } from \"@stencil/core\";\n\nexport interface InteractiveComponent {\n  /**\n   * The host element.\n   */\n  readonly el: InteractiveHTMLElement;\n\n  /**\n   * When true, prevents user interaction.\n   *\n   * Notes:\n   *\n   * This prop should use the @Prop decorator and reflect.\n   * The `disabled` Sass mixin must be added to the component's stylesheet.\n   */\n  disabled: boolean;\n}\n\n/**\n * Exported for testing purposes only.\n *\n * @internal\n */\nexport type InteractiveHTMLElement = HTMLElement & Pick<InteractiveComponent, \"disabled\">;\n\nfunction interceptedClick(): void {\n  const { disabled } = this as InteractiveHTMLElement;\n\n  if (!disabled) {\n    HTMLElement.prototype.click.call(this);\n  }\n}\n\nfunction onPointerDown(event: PointerEvent): void {\n  const interactiveElement = event.target as InteractiveHTMLElement;\n\n  if (interactiveElement.disabled) {\n    // prevent click from moving focus on host\n    event.preventDefault();\n  }\n}\n\nconst nonBubblingWhenDisabledMouseEvents = [\"mousedown\", \"mouseup\", \"click\"];\n\nfunction onNonBubblingWhenDisabledMouseEvent(event: MouseEvent): void {\n  const interactiveElement = event.target as InteractiveHTMLElement;\n\n  // prevent disallowed mouse events from being emitted on the disabled host (per https://github.com/whatwg/html/issues/5886)\n  // ⚠ we generally avoid stopping propagation of events, but this is needed to adhere to the intended spec changes above ⚠\n  if (interactiveElement.disabled) {\n    event.stopImmediatePropagation();\n    event.preventDefault();\n  }\n}\n\nconst captureOnlyOptions = { capture: true } as const;\n\n/**\n * This helper updates the host element to prevent keyboard interaction on its subtree and sets the appropriate aria attribute for accessibility.\n *\n * This should be used in the `componentDidRender` lifecycle hook.\n *\n * **Notes**\n *\n * this util is not needed for simple components whose root element or elements are an interactive component (custom element or native control). For those cases, set the `disabled` props on the root components instead.\n * technically, users can override `tabindex` and restore keyboard navigation, but this will be considered user error\n *\n * @param component\n */\nexport function updateHostInteraction(component: InteractiveComponent): void {\n  if (component.disabled) {\n    component.el.setAttribute(\"aria-disabled\", \"true\");\n\n    if (component.el.contains(document.activeElement)) {\n      (document.activeElement as HTMLElement).blur();\n    }\n\n    blockInteraction(component);\n\n    return;\n  }\n\n  restoreInteraction(component);\n\n  component.el.removeAttribute(\"aria-disabled\");\n}\n\nfunction blockInteraction(component: InteractiveComponent): void {\n  component.el.click = interceptedClick;\n  addInteractionListeners(component.el);\n}\n\nfunction addInteractionListeners(element: HTMLElement): void {\n  element.addEventListener(\"pointerdown\", onPointerDown, captureOnlyOptions);\n  nonBubblingWhenDisabledMouseEvents.forEach((event) =>\n    element.addEventListener(event, onNonBubblingWhenDisabledMouseEvent, captureOnlyOptions),\n  );\n}\n\nfunction restoreInteraction(component: InteractiveComponent): void {\n  delete component.el.click; // fallback on HTMLElement.prototype.click\n  removeInteractionListeners(component.el);\n}\n\nfunction removeInteractionListeners(element: HTMLElement): void {\n  element.removeEventListener(\"pointerdown\", onPointerDown, captureOnlyOptions);\n  nonBubblingWhenDisabledMouseEvents.forEach((event) =>\n    element.removeEventListener(event, onNonBubblingWhenDisabledMouseEvent, captureOnlyOptions),\n  );\n}\n\nexport interface InteractiveContainerProps extends JSXAttributes {\n  disabled: boolean;\n}\n\nexport const CSS = {\n  container: \"interaction-container\",\n};\n\nexport const InteractiveContainer: FunctionalComponent<InteractiveContainerProps> = (\n  { disabled },\n  children: VNode[],\n): VNode => (\n  <div class={CSS.container} inert={disabled}>\n    {...children}\n  </div>\n);\n","import { closestElementCrossShadowBoundary, isBefore, queryElementRoots } from \"./dom\";\nimport { componentOnReady } from \"./component\";\n\nexport interface LabelableComponent {\n  /**\n   * When true, disabled prevents interaction.\n   */\n  disabled: boolean;\n\n  /**\n   * The host element.\n   */\n  readonly el: HTMLElement;\n\n  /**\n   * Text label.\n   */\n  label?: string;\n\n  /**\n   * The label this component is associated with.\n   */\n  labelEl: HTMLCalciteLabelElement;\n\n  /**\n   * Hook for components to provide custom label click behavior.\n   */\n  onLabelClick: (event: CustomEvent<any>) => void;\n}\n\n/**\n * Exported for testing purposes only\n *\n * @internal\n */\nexport const labelClickEvent = \"calciteInternalLabelClick\";\nexport const labelConnectedEvent = \"calciteInternalLabelConnected\";\nexport const labelDisconnectedEvent = \"calciteInternalLabelDisconnected\";\n\nconst labelTagName = \"calcite-label\";\nconst labelToLabelables = new WeakMap<HTMLCalciteLabelElement, LabelableComponent[]>();\nconst onLabelClickMap = new WeakMap<HTMLCalciteLabelElement, typeof onLabelClick>();\nconst onLabelConnectedMap = new WeakMap<LabelableComponent, typeof onLabelConnected>();\nconst onLabelDisconnectedMap = new WeakMap<LabelableComponent, typeof onLabelDisconnected>();\nconst unlabeledComponents = new Set<LabelableComponent>();\n\nconst findLabelForComponent = (componentEl: HTMLElement): HTMLCalciteLabelElement | null => {\n  const { id } = componentEl;\n\n  const forLabel =\n    id && queryElementRoots<HTMLCalciteLabelElement>(componentEl, { selector: `${labelTagName}[for=\"${id}\"]` });\n\n  if (forLabel) {\n    return forLabel;\n  }\n\n  const parentLabel = closestElementCrossShadowBoundary<HTMLCalciteLabelElement>(componentEl, labelTagName);\n\n  if (\n    !parentLabel ||\n    // labelable components within other custom elements are not considered labelable\n    hasAncestorCustomElements(parentLabel, componentEl)\n  ) {\n    return null;\n  }\n\n  return parentLabel;\n};\n\nfunction hasAncestorCustomElements(label: HTMLCalciteLabelElement, componentEl: HTMLElement): boolean {\n  let traversedElements: HTMLElement[];\n  const customElementAncestorCheckEventType = \"custom-element-ancestor-check\";\n\n  const listener = (event: CustomEvent) => {\n    event.stopImmediatePropagation();\n    const composedPath = event.composedPath() as HTMLElement[];\n    traversedElements = composedPath.slice(composedPath.indexOf(componentEl), composedPath.indexOf(label));\n  };\n\n  label.addEventListener(customElementAncestorCheckEventType, listener, { once: true });\n\n  componentEl.dispatchEvent(new CustomEvent(customElementAncestorCheckEventType, { composed: true, bubbles: true }));\n  label.removeEventListener(customElementAncestorCheckEventType, listener);\n\n  const ancestorCustomElements = traversedElements\n    .filter((el) => el !== componentEl && el !== label)\n    .filter((el) => el.tagName?.includes(\"-\"));\n\n  return ancestorCustomElements.length > 0;\n}\n\n/**\n * Helper to set up label interactions on connectedCallback.\n *\n * @param component\n */\nexport function connectLabel(component: LabelableComponent): void {\n  if (!component) {\n    return;\n  }\n\n  const labelEl = findLabelForComponent(component.el);\n\n  if (\n    (onLabelClickMap.has(labelEl) && labelEl === component.labelEl) ||\n    (!labelEl && unlabeledComponents.has(component))\n  ) {\n    return;\n  }\n\n  const boundOnLabelDisconnected = onLabelDisconnected.bind(component);\n\n  if (labelEl) {\n    component.labelEl = labelEl;\n\n    const labelables = labelToLabelables.get(labelEl) || [];\n    labelables.push(component);\n    labelToLabelables.set(labelEl, labelables.sort(sortByDOMOrder));\n\n    if (!onLabelClickMap.has(component.labelEl)) {\n      onLabelClickMap.set(component.labelEl, onLabelClick);\n      component.labelEl.addEventListener(labelClickEvent, onLabelClick);\n    }\n\n    unlabeledComponents.delete(component);\n    document.removeEventListener(labelConnectedEvent, onLabelConnectedMap.get(component));\n    onLabelDisconnectedMap.set(component, boundOnLabelDisconnected);\n    document.addEventListener(labelDisconnectedEvent, boundOnLabelDisconnected);\n  } else if (!unlabeledComponents.has(component)) {\n    boundOnLabelDisconnected();\n    document.removeEventListener(labelDisconnectedEvent, onLabelDisconnectedMap.get(component));\n  }\n}\n/**\n * Helper to tear down label interactions on disconnectedCallback on labelable components.\n *\n * @param component\n */\nexport function disconnectLabel(component: LabelableComponent): void {\n  if (!component) {\n    return;\n  }\n\n  unlabeledComponents.delete(component);\n  document.removeEventListener(labelConnectedEvent, onLabelConnectedMap.get(component));\n  document.removeEventListener(labelDisconnectedEvent, onLabelDisconnectedMap.get(component));\n  onLabelConnectedMap.delete(component);\n  onLabelDisconnectedMap.delete(component);\n\n  if (!component.labelEl) {\n    return;\n  }\n\n  const labelables = labelToLabelables.get(component.labelEl);\n\n  if (labelables.length === 1) {\n    component.labelEl.removeEventListener(labelClickEvent, onLabelClickMap.get(component.labelEl));\n    onLabelClickMap.delete(component.labelEl);\n  }\n\n  labelToLabelables.set(\n    component.labelEl,\n    labelables.filter((labelable) => labelable !== component).sort(sortByDOMOrder),\n  );\n\n  component.labelEl = null;\n}\n\nfunction sortByDOMOrder(a: LabelableComponent, b: LabelableComponent): number {\n  return isBefore(a.el, b.el) ? -1 : 1;\n}\n\n/**\n * Helper to get the label text from a component.\n *\n * @param component\n */\nexport function getLabelText(component: LabelableComponent): string {\n  return component.label || component.labelEl?.textContent?.trim() || \"\";\n}\n\nfunction onLabelClick(this: HTMLCalciteLabelElement, event: CustomEvent<{ sourceEvent: MouseEvent }>): void {\n  const labelClickTarget = event.detail.sourceEvent.target as HTMLElement;\n  const labelables = labelToLabelables.get(this);\n  const clickedLabelable = labelables.find((labelable) => labelable.el === labelClickTarget);\n  const labelableChildClicked = labelables.includes(clickedLabelable);\n\n  if (labelableChildClicked) {\n    // no need to forward click as labelable will receive focus\n    return;\n  }\n\n  const firstLabelable = labelables[0];\n\n  if (firstLabelable.disabled) {\n    return;\n  }\n\n  firstLabelable.onLabelClick(event);\n}\n\nfunction onLabelConnected(this: LabelableComponent): void {\n  if (unlabeledComponents.has(this)) {\n    connectLabel(this);\n  }\n}\n\nfunction onLabelDisconnected(this: LabelableComponent): void {\n  unlabeledComponents.add(this);\n  const boundOnLabelConnected = onLabelConnectedMap.get(this) || onLabelConnected.bind(this);\n  onLabelConnectedMap.set(this, boundOnLabelConnected);\n  document.addEventListener(labelConnectedEvent, boundOnLabelConnected);\n}\n\n/**\n * Helper to associate an explicit label (i.e., using `for`) with a labelable component that does not have an associated label.\n *\n * @param label - the label element\n */\nexport async function associateExplicitLabelToUnlabeledComponent(label: HTMLCalciteLabelElement): Promise<void> {\n  await componentOnReady(label);\n\n  const alreadyLabeled = labelToLabelables.has(label);\n\n  if (alreadyLabeled) {\n    return;\n  }\n\n  const forComponentEl = label.ownerDocument?.getElementById(label.for);\n\n  if (!forComponentEl) {\n    return;\n  }\n\n  requestAnimationFrame(() => {\n    for (const labelable of unlabeledComponents) {\n      if (labelable.el === forComponentEl) {\n        connectLabel(labelable);\n        break;\n      }\n    }\n  });\n}\n","import { forceUpdate } from \"@stencil/core\";\nimport { isBrowser } from \"./browser\";\n\n/**\n * This helper adds support for knowing when a component has been loaded.\n *\n * Related issue: https://github.com/Esri/calcite-design-system/issues/5369\n * Could be related to Stencil.js issue: https://github.com/ionic-team/stencil/issues/3580\n *\n * Implementing\n *\n * ```\n * export class MyComponent implements LoadableComponent { }\n * ```\n *\n * ```\n *  //--------------------------------------------------------------------------\n *  //\n *  //  Lifecycle\n *  //\n *  //--------------------------------------------------------------------------\n *\n *  componentWillLoad(): void {\n *    setUpLoadableComponent(this);\n *  }\n *\n *  componentDidLoad(): void {\n *    setComponentLoaded(this);\n *  }\n *\n *  // --------------------------------------------------------------------------\n *  //\n *  //  Methods\n *  //\n *  // --------------------------------------------------------------------------\n *\n *  async myMethod(): Promise<void> {\n *    await componentLoaded(this);\n *  }\n * ```\n */\nexport interface LoadableComponent {\n  /**\n   * Stencil lifecycle method.\n   * https://stenciljs.com/docs/component-lifecycle#componentwillload\n   *\n   * Called once just after the component is first connected to the DOM. Since this method is only called once, it's a good place to load data asynchronously and to setup the state without triggering extra re-renders.\n   */\n  componentWillLoad: () => Promise<void> | void;\n\n  /**\n   * Stencil lifecycle method.\n   * https://stenciljs.com/docs/component-lifecycle#componentdidload\n   *\n   * Called once just after the component is fully loaded and the first render() occurs.\n   */\n  componentDidLoad: () => Promise<void> | void;\n}\n\nconst resolveMap = new WeakMap<LoadableComponent, (value: void | PromiseLike<void>) => void>();\n\nconst promiseMap = new WeakMap<LoadableComponent, Promise<void>>();\n\n/**\n * This helper util sets up the component for the ability to know when the component has been loaded.\n *\n * This should be used in the `componentWillLoad` lifecycle hook.\n *\n * ```\n * componentWillLoad(): void {\n *   setUpLoadableComponent(this);\n * }\n * ```\n *\n * @param component\n */\nexport function setUpLoadableComponent(component: LoadableComponent): void {\n  promiseMap.set(component, new Promise((resolve) => resolveMap.set(component, resolve)));\n}\n\n/**\n * This helper util lets the loadable component know that it is now loaded.\n *\n * This should be used in the `componentDidLoad` lifecycle hook.\n *\n * ```\n * componentDidLoad(): void {\n *   setComponentLoaded(this);\n * }\n * ```\n *\n * @param component\n */\nexport function setComponentLoaded(component: LoadableComponent): void {\n  resolveMap.get(component)();\n}\n\n/**\n * This helper util can be used to ensure a component has been loaded (The \"componentDidLoad\" Stencil lifecycle method has been called).\n *\n * Requires requires `LoadableComponent` to be implemented.\n *\n * A component developer can await this method before proceeding with any logic that requires a component to be loaded first.\n *\n * ```\n * async myMethod(): Promise<void> {\n *   await componentLoaded(this);\n * }\n * ```\n *\n * @param component\n * @returns Promise<void>\n */\nexport function componentLoaded(component: LoadableComponent): Promise<void> {\n  return promiseMap.get(component);\n}\n\n/**\n * This helper util can be used to ensuring the component is loaded and rendered by the browser (The \"componentDidLoad\" Stencil lifecycle method has been called and any internal elements are focusable).\n *\n * Requires `LoadableComponent` to be implemented.\n *\n * A component developer can await this method before proceeding with any logic that requires a component to be loaded first and then an internal element be focused.\n *\n * ```\n * async setFocus(): Promise<void> {\n *   await componentFocusable(this);\n *   this.internalElement?.focus();\n * }\n * ```\n *\n * @param component\n * @returns Promise<void>\n */\nexport async function componentFocusable(component: LoadableComponent): Promise<void> {\n  await componentLoaded(component);\n\n  if (!isBrowser()) {\n    return;\n  }\n\n  forceUpdate(component);\n  return new Promise((resolve) => requestAnimationFrame(() => resolve()));\n}\n","import { getAssetPath } from \"@stencil/core\";\nimport { getSupportedLocale, LocalizedComponent } from \"./locale\";\nimport { isBrowser } from \"./browser\";\n\nexport type MessageBundle = Record<string, string>;\n\nexport const componentLangToMessageBundleCache: Record<string, Promise<MessageBundle>> = {};\n\nasync function getMessageBundle(lang: string, component: string): Promise<MessageBundle> {\n  const key = `${component}_${lang}`;\n\n  if (componentLangToMessageBundleCache[key]) {\n    return componentLangToMessageBundleCache[key];\n  }\n\n  componentLangToMessageBundleCache[key] = fetch(getAssetPath(`./assets/${component}/t9n/messages_${lang}.json`))\n    .then((resp) => {\n      if (!resp.ok) {\n        throwMessageFetchError();\n      }\n      return resp.json();\n    })\n    .catch(() => throwMessageFetchError());\n\n  return componentLangToMessageBundleCache[key];\n}\n\nfunction throwMessageFetchError(): never {\n  throw new Error(\"could not fetch component message bundle\");\n}\n\nfunction mergeMessages(component: T9nComponent): void {\n  component.messages = {\n    ...component.defaultMessages,\n    ...component.messageOverrides,\n  };\n}\n\nfunction noop(): void {\n  // intentionally empty\n}\n\n/**\n * This utility sets up the messages used by the component. It should be awaited in the `componentWillLoad` lifecycle hook.\n *\n * @param component\n */\nexport async function setUpMessages(component: T9nComponent): Promise<void> {\n  component.defaultMessages = await fetchMessages(component, component.effectiveLocale);\n  mergeMessages(component);\n}\n\nasync function fetchMessages(component: T9nComponent, lang: string): Promise<MessageBundle> {\n  if (!isBrowser()) {\n    return {};\n  }\n\n  const { el } = component;\n  const tag = el.tagName.toLowerCase();\n  const componentName = tag.replace(\"calcite-\", \"\");\n\n  return getMessageBundle(getSupportedLocale(lang, \"t9n\"), componentName);\n}\n\n/**\n * This utility must be set up for the component to update its default message bundle if the locale changes.\n *\n * It can be set up in **either** of the following ways:\n *\n * 1. called from `LocalizedComponent`'s `onLocaleChange` method or\n * 2. called from a watcher configured to watch `LocalizedComponent`'s `effectiveLocale` prop\n *\n * @param component\n * @param lang\n */\nexport async function updateMessages(component: T9nComponent, lang: string): Promise<void> {\n  component.defaultMessages = await fetchMessages(component, lang);\n  mergeMessages(component);\n}\n\n/**\n * This utility sets up internals for messages support.\n *\n * It needs to be called in `connectedCallback`\n *\n * **Note**: this must be called after `LocalizedComponent`'s `connectLocalized` method.\n *\n * @param component\n */\nexport function connectMessages(component: T9nComponent): void {\n  component.onMessagesChange = defaultOnMessagesChange;\n}\n\n/**\n * This utility tears down internals for messages support.\n *\n * It needs to be called in `disconnectedCallback`\n *\n * @param component\n */\nexport function disconnectMessages(component: T9nComponent): void {\n  // we set this to noop to for watchers triggered when components are disconnected\n  component.onMessagesChange = noop;\n}\n\n/**\n * This interface enables components to support built-in translation strings.\n *\n * **Notes**:\n *\n * This requires `LocalizedComponent` to be implemented.\n * To avoid unnecessary lookups, composite components should set `lang` on internal t9n components.\n */\nexport interface T9nComponent extends LocalizedComponent {\n  el: HTMLElement;\n\n  /**\n   * This property holds all messages used by the component's rendering.\n   *\n   * This prop should use the `@Prop` decorator. It uses `@Prop` decorator for testing purpose only.\n   */\n  messages: MessageBundle;\n\n  /**\n   * This property holds the component's default messages.\n   */\n  defaultMessages: MessageBundle;\n\n  /**\n   * This property holds all user message overrides.\n   *\n   * This prop should use the `@Prop` decorator.\n   */\n  messageOverrides: Partial<MessageBundle>;\n\n  /**\n   * This private method ensures messages are kept in sync.\n   *\n   * This method should be empty and configured to watch for changes on  `messageOverrides` property.\n   *\n   * @Watch(\"messageOverrides\")\n   * onMessagesChange(): void {\n   *  \\/* wired up by t9n util *\\/\n   * }\n   */\n  onMessagesChange: () => void;\n}\n\nfunction defaultOnMessagesChange(this: T9nComponent): void {\n  mergeMessages(this);\n}\n"],"names":["CSS","timeZoneOffsetToDecimal","shortOffsetTimeZoneName","replace","async","getNormalizer","mode","timeZone","normalize","createTimeZoneItems","locale","messages","referenceDate","standardTime","groupByName","map","_ref","label","toUserFriendlyName","value","metadata","filterValue","filter","group","sort","effectiveLocale","referenceDateInMs","getTime","groupByRegion","getCountry","global","globalLabel","Promise","all","_ref2","region","tzs","timeZoneA","timeZoneB","labeledTimeZoneA","getTimeZoneLabel","labeledTimeZoneB","gmtTimeZoneString","startsWith","offsetStringA","substring","offsetStringB","offsetA","parseInt","localeCompare","getMessageOrKeyFallback","items","decimalOffset","getTimeZoneShortOffset","countryCode","country","undefined","offset","groupA","groupB","groupByOffset","DateEngine","groups","dateEngine","groupDateRange","startDate","Date","toISOString","listFormatter","Intl","ListFormat","style","type","offsetTimeZoneNameBlockList","forEach","indexOffsets","removedSoFar","tz","index","includes","labelTzIdx","length","_ref3","groupRepTz","timeZoneName","Number","toOffsetValue","tzLabels","offsetLabel","groupLabel","timeZoneLabel","createTimeZoneOffsetLabel","format","split","pop","getCity","key","arguments","now","getDateTimeFormat","formatToParts","find","_ref4","findTimeZoneItemByProp","timeZoneItems","prop","valueToMatch","flatMap","item","flattenTimeZoneItems","InputTimeZone","setComboboxRef","el","this","comboboxEl","onComboboxBeforeClose","event","stopPropagation","overrideSelectedLabelForRegion","calciteInputTimeZoneBeforeClose","emit","onComboboxBeforeOpen","calciteInputTimeZoneBeforeOpen","onComboboxChange","selectedItem","target","selectedItems","selectedTimeZoneItem","calciteInputTimeZoneChange","selected","findTimeZoneItemByLabel","getAttribute","selectedValue","onComboboxClose","open","calciteInputTimeZoneClose","onComboboxOpen","calciteInputTimeZoneOpen","valid","badInput","customError","patternMismatch","rangeOverflow","rangeUnderflow","stepMismatch","tooLong","tooShort","typeMismatch","valueMissing","onMessagesChange","handleTimeZoneItemPropsChange","updateTimeZoneItems","updateTimeZoneSelection","openChanged","handleValueChange","oldValue","normalizeValue","clearable","findTimeZoneItem","timeZoneItem","setFocus","componentFocusable","effectiveLocaleWatcher","updateMessages","onLabelClick","city","textLabel","timeZoneRegionLabel","fallbackValue","getTimezoneOffset","DateTimeFormat","resolvedOptions","offsetStyle","connectedCallback","connectForm","connectLabel","connectLocalized","connectMessages","disconnectedCallback","disconnectForm","disconnectLabel","disconnectLocalized","disconnectMessages","normalizer","componentWillLoad","setUpLoadableComponent","setUpMessages","afterConnectDefaultValueSet","componentDidLoad","setComponentLoaded","componentDidRender","updateHostInteraction","render","h","Host","InteractiveContainer","disabled","clearDisabled","chooseTimeZone","lang","maxItems","onCalciteComboboxBeforeClose","onCalciteComboboxBeforeOpen","onCalciteComboboxChange","onCalciteComboboxClose","onCalciteComboboxOpen","overlayPositioning","placeholder","namePlaceholder","offsetPlaceholder","regionPlaceholder","placeholderIcon","readOnly","ref","scale","selectionMode","status","validationIcon","validationMessage","renderItems","HiddenFormInputSlot","component","renderRegionItems","_ref5","description","class","slot","getIconScale","componentScale","componentOnReady","isStencilEl","resolve","requestAnimationFrame","componentsWithInputEvent","hiddenFormInputSlotName","isCheckable","onFormResetMap","WeakMap","formComponentSet","WeakSet","getValidationComponent","nodeName","closestElementCrossShadowBoundary","invalidEvent","CustomEvent","bubbles","composed","invalidHandler","hiddenInput","hiddenInputMessage","formComponent","parentElement","componentTag","toLowerCase","componentTagParts","preventDefault","validity","dispatchEvent","message","icon","displayValidationMessage","clearValidationEvent","part","toUpperCase","slice","join","getClearValidationEventName","addEventListener","once","submitForm","formEl","requestSubmit","removeEventListener","invalidEls","querySelectorAll","resetForm","reset","associatedForm","findAssociatedForm","form","formComponentEl","formComponentRegisterEventName","hasRegisteredFormComponentParent","composedPath","some","element","has","defaultValue","defaultChecked","checked","boundOnFormReset","onFormReset","bind","set","add","queryElementRoots","id","get","delete","internalHiddenInputInputEvent","hiddenInputInputHandler","removeHiddenInputChangeEventListener","input","defaultSyncHiddenFormInput","name","required","tabIndex","setAttribute","removeAttribute","syncHiddenFormInput","validationComponent","ownerDocument","inputs","remove","values","Array","isArray","extra","seen","Set","docFrag","valueMatch","val","push","createElement","createDocumentFragment","append","interceptedClick","HTMLElement","prototype","click","call","onPointerDown","nonBubblingWhenDisabledMouseEvents","onNonBubblingWhenDisabledMouseEvent","stopImmediatePropagation","captureOnlyOptions","capture","contains","document","activeElement","blur","blockInteraction","restoreInteraction","children","inert","labelClickEvent","labelConnectedEvent","labelDisconnectedEvent","labelTagName","labelToLabelables","onLabelClickMap","onLabelConnectedMap","onLabelDisconnectedMap","unlabeledComponents","findLabelForComponent","componentEl","forLabel","selector","parentLabel","traversedElements","customElementAncestorCheckEventType","listener","indexOf","ancestorCustomElements","tagName","hasAncestorCustomElements","labelEl","boundOnLabelDisconnected","onLabelDisconnected","labelables","sortByDOMOrder","labelable","a","b","isBefore","getLabelText","textContent","trim","labelClickTarget","detail","sourceEvent","clickedLabelable","firstLabelable","onLabelConnected","boundOnLabelConnected","associateExplicitLabelToUnlabeledComponent","forComponentEl","getElementById","for","resolveMap","promiseMap","componentLoaded","isBrowser","forceUpdate","componentLangToMessageBundleCache","throwMessageFetchError","Error","mergeMessages","defaultMessages","messageOverrides","noop","fetchMessages","componentName","fetch","getAssetPath","then","resp","ok","json","catch","getMessageBundle","getSupportedLocale","defaultOnMessagesChange"],"sourceRoot":""}