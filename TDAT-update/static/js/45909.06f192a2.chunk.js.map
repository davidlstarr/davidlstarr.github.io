{"version":3,"file":"static/js/45909.06f192a2.chunk.js","mappings":"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","sources":["../node_modules/@arcgis/charts-components/dist/esm/charts-box-plot-dceefd0f.js"],"sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See LICENSE.md for details.\n * v4.31.1\n */\nimport { r as registerInstance, c as createEvent, h, H as Host, a as getElement } from './index-a70f9e3a.js';\nimport { u as updateLegendPosition, b as updateLegendVisibility, r as resetAxesBounds, f as fetchErrorsStrings, c as fetchCommonStrings, p as promise, g as gatherComponentOptions, l as addMissingSplitBySeries, d as gatherComponentGlobalOptions, m as maximumNumberOfSimultaneousUpdates, i as isValidDataSource, e as addLayerFilterListener, h as addLayerRendererListener, j as addExtentChangeListener, z as zY, k as ArcgisChartsNotifyPanel } from './config-update-5d4b05b1.js';\nimport { A as Am, E as Em, x as xn, M as Mc, W as WebChartTypes, b as El, u as updateActionBarStates, S as Slot, o as onActionBarSlotChange, j as jc, e as WebChartVersionStatus, K as Kr } from './action-bar-utils-537f9a25.js';\n\nconst chartsBoxPlotCss = \".hide{display:none}.am5-modal{width:100%;height:100%;position:absolute;z-index:100000;top:0px;left:0px}.am5-modal-curtain{top:0px;left:0px;width:100%;height:100%;position:absolute;background:rgba(255, 255, 255, 0.5);z-index:100}.am5-modal-wrapper{top:0px;left:0px;width:100%;height:100%;position:absolute;display:flex;align-items:center;justify-content:center;white-space:nowrap;background:rgba(255, 255, 255, 0.5);z-index:101}.am5-modal-content{display:inline-block;padding:1.2em;vertical-align:middle;text-align:left;white-space:normal;background:rgb(255, 255, 255);border-radius:4px;box-shadow:rgba(0, 0, 0, 0.45) 0px 0px 36px 0px;color:rgb(0, 0, 0)}.arcgis-charts-modal{box-shadow:none !important}.arcgis-charts-modal-header{background-color:rgba(0, 0, 0, 0.05);font-weight:bold;padding:4px 4px 4px 4px}.show{display:block}.notifyPanel{flex:0 1 auto}.disable-interactions{pointer-events:none}.boxPlotSeries{flex-grow:1;overflow-y:hidden}.boxPlotSeries>div{justify-content:center;align-items:center}.boxPlotSeries .arcgis-charts-modal-inside{padding:1em;padding-left:0}.boxPlotSeries .arcgis-charts-modal-inside ol{padding-left:2em}.boxPlotSeries .arcgis-charts-modal-curtain{width:100%;height:100%;position:absolute;top:0px;left:0px;z-index:2001;background-color:rgb(255, 255, 255);opacity:0.5;opacity:1}.boxPlotSeries .arcgis-charts-modal-content{background:rgba(255, 255, 255, 0.8);color:rgb(0, 0, 0);display:inline-block;position:absolute;top:0px;left:0px;max-width:90%;max-height:90%;overflow:visible;z-index:2002;position:absolute;max-width:90%;max-height:90%;width:auto !important;height:auto !important;margin:auto !important;inset:auto !important;left:auto !important;top:auto !important}.boxPlotSeries .arcgis-charts-modal-header{display:block;width:100%;min-height:1.8em;background:rgba(0, 0, 0, 0.05)}.boxPlotSeries .arcgis-charts-modal-close{display:block;position:absolute;top:0.3em;right:0.3em;background:url(\\\"data:image/svg+xml;charset=utf-8;base64,PHN2ZyBoZWlnaHQ9IjUxMiIgdmVyc2lvbj0iMSIgdmlld0JveD0iMCAwIDUxMiA1MTIiIHdpZHRoPSI1MTIiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyI+PHBhdGggZD0iTTQ0NS4yIDEwOS4ybC00Mi40LTQyLjRMMjU2IDIxMy42IDEwOS4yIDY2LjhsLTQyLjQgNDIuNEwyMTMuNiAyNTYgNjYuOCA0MDIuOGw0Mi40IDQyLjRMMjU2IDI5OC40bDE0Ni44IDE0Ni44IDQyLjQtNDIuNEwyOTguNCAyNTYiLz48L3N2Zz4=\\\") center center/80% no-repeat rgba(100, 100, 100, 0.1);width:1.2em;height:1.2em;cursor:pointer}.boxPlotSeries .arcgis-charts-modal-title{font-weight:bold;font-size:110%;padding:0.5em 1.2em 0.5em 1em}:host{width:var(--charts-bar-chart-width, var(--arcgis-charts-default-width));height:var(--charts-bar-chart-height, var(--arcgis-charts-default-height));display:flex;flex-direction:row}\";\nconst ArcgisChartsBoxPlotStyle0 = chartsBoxPlotCss;\n\nconst ArcGISChartsBoxPlot = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.arcgisRuntimeError = createEvent(this, \"arcgisRuntimeError\", 7);\n        this.arcgisDataProcessError = createEvent(this, \"arcgisDataProcessError\", 7);\n        this.arcgisDataProcessComplete = createEvent(this, \"arcgisDataProcessComplete\", 7);\n        this.arcgisLegendItemVisibilityChange = createEvent(this, \"arcgisLegendItemVisibilityChange\", 7);\n        this.arcgisUpdateComplete = createEvent(this, \"arcgisUpdateComplete\", 7);\n        this.arcgisBadDataWarningRaise = createEvent(this, \"arcgisBadDataWarningRaise\", 7);\n        this.arcgisSeriesColorChange = createEvent(this, \"arcgisSeriesColorChange\", 7);\n        this.arcgisAxesMinMaxChange = createEvent(this, \"arcgisAxesMinMaxChange\", 7);\n        this.arcgisSelectionComplete = createEvent(this, \"arcgisSelectionComplete\", 7);\n        this.arcgisNoRenderPropChange = createEvent(this, \"arcgisNoRenderPropChange\", 7);\n        this.arcgisSeriesOrder = createEvent(this, \"arcgisSeriesOrder\", 7);\n        /**\n         * When `true`, the next round of update will be skipped.\n         * @type {boolean}\n         * @category Private\n         * @default false\n         */\n        this.skipNextUpdate = false;\n        /**\n         * List of props which should not trigger a render when changed\n         * @type {string[]}\n         * @category Private\n         */\n        this.noRenderProps = [\"rotation\", \"legendPosition\", \"legendVisibility\", \"view\"];\n        /**\n         * List of props which should trigger a data update\n         * @type {string[]}\n         * @category Private\n         */\n        this.dataUpdateNeededProps = [\"forceDataUpdate\", \"runtimeDataFilters\", \"returnFeaturesExtent\"];\n        /**\n         * List of all the properties updated since the last update.rSeries'  Useful when multiple properties are updated\n         * within the same time frame, while some of them require some extra logic to be applied.\n         * @type {Set<string>}\n         * @category Private\n         */\n        this.updatedProps = new Set();\n        this.config = undefined;\n        this.rotation = undefined;\n        this.actionMode = undefined;\n        this.cursorRange = undefined;\n        this.legendPosition = undefined;\n        this.legendVisibility = undefined;\n        this.hideEmptySeries = undefined;\n        this.view = undefined;\n        this.layer = undefined;\n        this.selectionData = undefined;\n        this.returnSelectionOIDs = undefined;\n        this.returnSelectionIndexes = undefined;\n        this.returnFeaturesExtent = undefined;\n        this.filterBySelection = undefined;\n        this.disableInteractions = undefined;\n        this.queueChartCreation = undefined;\n        this.useAnimatedCharts = undefined;\n        this.hideLicenceWatermark = undefined;\n        this.enableResponsiveFeatures = undefined;\n        this.autoDisposeChart = undefined;\n        this.placeholder = undefined;\n        this.selectionTheme = undefined;\n        this.chartLimits = undefined;\n        this.tooltipFormatter = undefined;\n        this.dataLabelFormatter = undefined;\n        this.guideTooltipFormatter = undefined;\n        this.xAxisLabelFormatter = undefined;\n        this.yAxisLabelFormatter = undefined;\n        this.messageOptions = undefined;\n        this.disableTogglingLegendItems = undefined;\n        this.hideLoaderAnimation = undefined;\n        this.runtimeDataFilters = undefined;\n        this.usePopupTemplateFieldsInfo = undefined;\n        this.layerFilterChangePolicy = Am.Refresh;\n        this.layerRendererChangePolicy = Em.Refresh;\n        this.ignoreViewExtent = undefined;\n        this.updateSplitBySeries = undefined;\n        this.showNotifyPanel = false;\n    }\n    /**\n     * Listener on event coming from the chart container indicating the chart data has been processed\n     * emitting an event carrying the data\n     * @param {CustomEvent<WebChartGenericDataItem>} event The event carrying the chart data processed by the core\n     * @category Custom-event handler\n     */\n    handleChartOutputDataChange(event) {\n        this.arcgisDataProcessComplete.emit(event.detail);\n    }\n    /**\n     * Listener on event coming from the chart container indicating a legend item visibility has been changed\n     * emitting an event carrying the item id and its new visibility\n     * @param {CustomEvent} event The event carrying the item id and its new visibility\n     * @category Custom-event handler\n     */\n    handleLegendItemVisibilityChanged(event) {\n        this.arcgisLegendItemVisibilityChange.emit(event.detail);\n    }\n    /**\n     * Listener on event coming from the chart container indicating a chart is updated\n     * @param {CustomEvent} event The event carrying the ValidationStatus\n     * @category Custom-event handler\n     */\n    handleUpdateCompleted(event) {\n        this.arcgisUpdateComplete.emit(event.detail);\n    }\n    /**\n     * Listener on event coming from the chart container indicating an error in the data set\n     * @param {CustomEvent} event The event carrying details about the error\n     * @category Custom-event handler\n     */\n    handleBadDataWarningRaise(event) {\n        this.arcgisBadDataWarningRaise.emit(event.detail);\n    }\n    /**\n     * Listener on event coming from the chart container indicating the chart series color\n     * have been assigned\n     * @param {CustomEvent<SeriesSymbolsMap>} event The event carrying the series colors\n     * @category Custom-event handler\n     */\n    handleSeriesColorsChange(event) {\n        this.arcgisSeriesColorChange.emit(event.detail);\n    }\n    /**\n     * Listener on event coming from the chart container\n     * on selection of one or multiple columns\n     * @param {CustomEvent<SeriesSymbolsMap>} event The event carrying the selected elements\n     * @category Custom-event handler\n     */\n    handleSelection(event) {\n        this.arcgisSelectionComplete.emit(event.detail);\n    }\n    /**\n     * Listener on event coming from the chart container\n     * when more elements than the authorized limit have been selected.\n     * @category Custom-event handler\n     */\n    handleTooManySelectedElements() {\n        // TODO t9n these messages. Only English is available for now\n        this.notifyHeading = this.errorStrings.tooManySelectedElements.title;\n        this.notifyMessage = this.errorStrings.tooManySelectedElements.message;\n        this.notifyOptions = {\n            kind: \"warning\",\n            autoClose: true,\n            duration: \"fast\",\n            active: true,\n        };\n        this.showNotifyPanel = true;\n    }\n    /**\n     * Listener on event coming from the closure of a calcite-alert.\n     * The handler helps keeping in sync the boolean `showNotifyPanel` with the panel's state.\n     * @param {CustomEvent} event\n     * @category Custom-event handler\n     */\n    handleAlertClosed(event) {\n        // If the calcite-alert (notify panel) from this component is getting closed, we flag it\n        if (event.target === this.el) {\n            // we don't want the component to re-render so we skip the next update\n            this.skipNextUpdate = true;\n            this.showNotifyPanel = false;\n        }\n    }\n    /**\n     * Listener on event coming from the chart container indicating the chart axes\n     * min and max values have been computed\n     * @param {CustomEvent} event The event carrying the axes min and max\n     * @category Custom-event handler\n     */\n    handleAxesMinMaxChange(event) {\n        this.arcgisAxesMinMaxChange.emit(event.detail);\n    }\n    /**\n     * Listener on event coming from the chart container indicating a the series order changed on the chart.\n     * @param event The event carrying a list of series id as they are visually ordered on the chart\n     * @category Custom-event handler\n     */\n    handleSeriesOrder(event) {\n        this.arcgisSeriesOrder.emit(event.detail);\n    }\n    /**\n     * Called every time the view prop is updated.\n     * Add a listener to it to keep the chart in sync.\n     * @param {MapView | SceneView | undefined} newView The new view\n     * @param {MapView | SceneView | undefined} oldView The old view\n     * @category Watch handler\n     */\n    async viewChange(newView, oldView) {\n        await this.setExtentChangeListener();\n        // The \"view\" property is flagged as a non-render prop to avoid an unnecessary update when the\n        // view is assigned to the component (the update will happen through the view listeners), so we\n        // only need to explicitly ask for a refresh when the view is removed from the component\n        if (oldView !== undefined && newView === undefined) {\n            await this.refresh();\n        }\n    }\n    /**\n     * Called every time the layer prop is updated.\n     * Adds listeners to it to keep the chart in sync.\n     * @category Watch handler\n     */\n    async layerChange() {\n        await this.addLayerListeners();\n    }\n    /**\n     * Called every time the rotation property is updated\n     * @param {boolean} newRotation The new rotation value for the chart\n     * @category Watch handler\n     */\n    rotationChange(newRotation) {\n        this.config = xn(newRotation, this.config);\n    }\n    /**\n     * Called every time the position of the legend is updated\n     * @param {WebChartLegendPositions} newLegendPosition The new position of the legend\n     * @category Watch handler\n     */\n    legendPositionChange(newLegendPosition) {\n        this.config = updateLegendPosition(newLegendPosition, this.config);\n    }\n    /**\n     * Called every time the visibility of the legend is updated\n     * @param {boolean} newLegendVisibility The new visibility of the legend\n     * @category Watch handler\n     */\n    legendVisibilityChange(newLegendVisibility) {\n        this.config = updateLegendVisibility(newLegendVisibility, this.config);\n    }\n    /**\n     * Called every time the filter by selection is updated.\n     * Resets the axes min/max.\n     * @category Watch handler\n     */\n    filterBySelectionChanged() {\n        this.config = resetAxesBounds(this.config);\n    }\n    /**\n     * Called every time when  the property `layerFilterChangePolicy` changes\n     * Adds a listener on the layer's filter when the property is `true`, removes it otherwise.\n     * @param newRefreshOnLayerFilter The new value of refresh on layer filter\n     * @category Watch handler\n     */\n    layerFilterChangePolicyCallBack(newRefreshOnLayerFilter) {\n        if (newRefreshOnLayerFilter !== Am.Ignore) {\n            this.setLayerFilterListener();\n        }\n        else {\n            this.removeLayerFilterListener();\n        }\n    }\n    /**\n     * Called every time when the property `layerRendererChangePolicy` changes\n     * Adds a listener on the layer's renderer when the property is `true`, removes it otherwise.\n     * @param newRefreshOnLayerRenderer The new value of refresh on layer renderer\n     * @category Watch handler\n     */\n    layerRendererChangePolicyCallBack(newRefreshOnLayerRenderer) {\n        if (newRefreshOnLayerRenderer !== Em.Ignore) {\n            this.setLayerRendererListener();\n        }\n        else {\n            this.removeLayerRendererListener();\n        }\n    }\n    /**\n     * Notify method allows passing external messages to the chart component.\n     * It can be used to pass validation or information messages.\n     * In a situation where a config update is overriding your notification modal,\n     * consider waiting for the `arcgisUpdateComplete` event.\n     * @param {string} [message] The message to display in the notify panel\n     * @param {string} [heading] The heading to display in the notify panel\n     * @param {NotifyOptions} [options] The options to apply to the notify panel\n     * @category Public\n     */\n    async notify(message, heading, options) {\n        if (this.chart !== undefined) {\n            this.chart.notify(message, heading, options);\n        }\n        await Promise.resolve(undefined);\n    }\n    /**\n     * Triggers an alert to display an error message.\n     * @category Public\n     * @param {string | undefined} [errorMessage] The error message to display in the notify panel\n     */\n    async errorAlert(errorMessage) {\n        this.notifyHeading = this.errorStrings.errorHeading;\n        this.notifyMessage = errorMessage;\n        this.notifyOptions = {\n            kind: \"danger\",\n            autoClose: true,\n            active: true,\n        };\n        this.showNotifyPanel = true;\n    }\n    /**\n     * Resets the chart zoom to bring it back to full extent\n     * @category Public\n     */\n    async resetZoom() {\n        if (this.chart !== undefined) {\n            this.chart.resetZoom();\n        }\n        await Promise.resolve(undefined);\n    }\n    /**\n     * Switches the selection on the chart.\n     * @category Public\n     */\n    async switchSelection() {\n        // for now we don't allow the switch selection when the filter by selection is on\n        if (this.chart !== undefined && this.filterBySelection !== true) {\n            await this.chart.switchSelection();\n        }\n    }\n    /**\n     * Clears all selection on the chart.\n     * @category Public\n     */\n    async clearSelection() {\n        if (this.chart !== undefined) {\n            this.chart.clearSelection();\n            // to handle the full data reset we call the componentDidUpdate to trigger a chart update\n            if (this.filterBySelection === true) {\n                await this.refresh();\n            }\n        }\n    }\n    /**\n     * Re-render the chart.\n     * @param {boolean} [props.updateData] Indicates whether to fetch new data. Default: true.\n     * @param {boolean} [props.updateExtent] Indicates whether the view's extent is to update. Default: false.\n     * @param {boolean} [props.resetAxesBounds] Option to reset the axes bounds along with the refresh. Default: false;\n     * @category Public\n     */\n    async refresh(props) {\n        const { updateData = true, resetAxesBounds = false, updateExtent = false } = props ?? {};\n        //  Adds a property into `updatedProps` so the debouncedChartUpdate triggers the update\n        this.updatedProps.add(updateData ? \"forceDataUpdate\" : \"forceSimpleUpdate\");\n        this.viewExtentUpdated = updateExtent;\n        // Resetting the axes bounds\n        if (resetAxesBounds) {\n            delete this.config?.axes?.[0]?.minimum;\n            delete this.config?.axes?.[0]?.maximum;\n            delete this.config?.axes?.[1]?.minimum;\n            delete this.config?.axes?.[1]?.maximum;\n        }\n        await this.componentDidUpdate();\n        // reset the boolean for the next update\n        this.viewExtentUpdated = false;\n    }\n    /**\n     * Prevents render for noRenderProps\n     * @category Lifecycle\n     */\n    componentShouldUpdate(...args) {\n        const [value, , propName] = args;\n        // Flagging the property. This list will be used when the chart update is actually called.\n        this.updatedProps.add(propName);\n        const isNoRenderProp = this.noRenderProps.includes(propName);\n        if (isNoRenderProp) {\n            this.arcgisNoRenderPropChange.emit({ propName, value });\n        }\n        const shouldUpdate = !this.skipNextUpdate && !isNoRenderProp;\n        this.skipNextUpdate = false;\n        return shouldUpdate;\n    }\n    /**\n     * @category Lifecycle\n     */\n    async componentWillLoad() {\n        this.errorStrings = await fetchErrorsStrings(this.el);\n        this.commonStrings = await fetchCommonStrings(this.el);\n        // We define the function that will be called to update the chart. We use the external library fastq to queue the updates\n        // to make sure only one update is executed at a time\n        this.debouncedChartUpdate = promise(async () => {\n            if (this.chart !== undefined) {\n                const updatedProps = Array.from(this.updatedProps);\n                if (updatedProps.length > 0) {\n                    // if one of the properties updated require a data update, we flag it\n                    // multiple properties can be updated within the same time frame, which will trigger only one Stencil lifecycle\n                    const dataUpdateNeeded = updatedProps.some((updatedProp) => this.dataUpdateNeededProps.includes(updatedProp));\n                    // clearing the list for the next update\n                    this.updatedProps.clear();\n                    const updateOptions = gatherComponentOptions({\n                        component: this,\n                        dataUpdated: dataUpdateNeeded,\n                        viewExtentUpdated: this.viewExtentUpdated,\n                    });\n                    // As long as `addMissingSeries` is true, we try to complete the config with missing series\n                    if (this.updateSplitBySeries?.addMissingSeries === true) {\n                        await addMissingSplitBySeries(this, updateOptions);\n                    }\n                    await this.chart.update({\n                        newChartConfig: this.config,\n                        updateOptions,\n                        updateGlobalOptions: gatherComponentGlobalOptions(this),\n                        t9nStrings: {\n                            errorStrings: this.errorStrings,\n                            commonStrings: this.commonStrings,\n                        },\n                    });\n                }\n                await Promise.resolve(undefined);\n            }\n        }, maximumNumberOfSimultaneousUpdates);\n    }\n    /**\n     * @category Lifecycle\n     */\n    async componentDidLoad() {\n        if (this.chartRef !== undefined) {\n            await this.createChartInstance();\n        }\n    }\n    /**\n     * @category Lifecycle\n     */\n    async componentDidUpdate() {\n        // If this.chartCreationProcessing is still running we need to wait for it to be done before updating the chart\n        if (this.chart === undefined && this.chartCreationProcessing !== undefined) {\n            await this.chartCreationProcessing;\n        }\n        // Controlling the series type to display a console error if the type is not the expected one\n        // We still proceed to the update to let the config validator deal with the invalid config\n        await Mc([WebChartTypes.BoxPlotSeries, WebChartTypes.LineSeries], this.config);\n        if (this.config !== undefined && this.chart !== undefined && !this.showNotifyPanel) {\n            try {\n                // Calling for the chart update if the data source is valid\n                if (isValidDataSource(this.config, this.layer)) {\n                    await this.debouncedChartUpdate.push({});\n                }\n            }\n            catch (e) {\n                if (this.chartRef !== undefined) {\n                    if (e.name === El.ChartDisposed) {\n                        this.chart.dispose();\n                        this.chartRef.innerHTML = \"\";\n                        await this.createChartInstance(false);\n                    }\n                    else {\n                        // sending an event when error occurs.\n                        // We don't automatically recreate the chart in that scenario as it would lead to the same result.\n                        if (e.name === El.QueryFeaturesError) {\n                            this.arcgisDataProcessError.emit(e.details);\n                        }\n                        else {\n                            this.arcgisRuntimeError.emit(e.details ?? e);\n                        }\n                        // displaying the error\n                        this.errorAlert(e?.message);\n                    }\n                }\n            }\n        }\n        else if (this.chart === undefined && this.chartCreationProcessing === undefined && !this.showNotifyPanel) {\n            await this.createChartInstance();\n        }\n        else if (this.placeholder !== undefined) {\n            this.notify(this.placeholder);\n        }\n        // Update the action bar states since the relevant properties may have changed\n        if (this.actionBarElement !== undefined) {\n            updateActionBarStates(this.actionBarElement, this.config);\n        }\n    }\n    /**\n     * Called when the component is removed from the DOM.\n     * @category Lifecycle\n     */\n    async disconnectedCallback() {\n        this.removeLayerListeners();\n        this.removeExtentChangeListeners();\n        if (this.chart !== undefined) {\n            this.chart.dispose();\n        }\n    }\n    /**\n     * @category Lifecycle\n     */\n    render() {\n        const notifyPanel = this.showNotifyPanel ? (h(ArcgisChartsNotifyPanel, { heading: this.notifyHeading, message: this.notifyMessage, options: this.notifyOptions })) : null;\n        // TODO: implement stronger way to know when to keep the chart visible\n        const chartStyles = this.showNotifyPanel && this.notifyOptions?.kind === \"danger\" ? \"hide\" : `${WebChartTypes.BoxPlotSeries} show`;\n        const notifyStyles = this.showNotifyPanel ? \"show notifyPanel\" : \"hide\";\n        return (h(Host, { key: '85f8f9cff7410c223c31c71a3f4a0b128b3adae2' }, h(\"slot\", { key: '8cb3db0f73228dd8ed49faa7c25066240ef7db38', name: Slot.actionBar, onSlotchange: (e) => {\n                onActionBarSlotChange(e, WebChartTypes.BoxPlotSeries, this.config);\n            }, ref: (el) => {\n                this.actionBarElement = el;\n            } }), h(\"div\", { key: '4685723d03fbc3c517154fdf0ab5469a5d0ed628', class: chartStyles, ref: (el) => {\n                this.chartRef = el;\n            } }), h(\"div\", { key: 'c6da22d1ec706b9b40d1a20a4d4ccb6240b941b2', class: notifyStyles }, notifyPanel)));\n    }\n    /**\n     * Adds the listener to listen to the layer definitionExpression and renderer changes\n     * @category Private\n     */\n    async addLayerListeners() {\n        // removing existing listeners before adding new ones\n        this.removeLayerListeners();\n        this.layerFilterListener = await addLayerFilterListener({\n            layer: this.layer,\n            component: this,\n        });\n        this.layerRendererListener = await addLayerRendererListener({\n            layer: this.layer,\n            component: this,\n        });\n    }\n    /**\n     * Adds the listener to listen to the layer definitionExpression changes\n     * @category Private\n     */\n    async setLayerFilterListener() {\n        this.removeLayerFilterListener();\n        this.layerFilterListener = await addLayerFilterListener({\n            layer: this.layer,\n            component: this,\n        });\n    }\n    /**\n     * Adds a listener to listen to the layer's renderer changes when color match is enabled for a layer data source\n     * @category Private\n     */\n    async setLayerRendererListener() {\n        this.removeLayerRendererListener();\n        this.layerRendererListener = await addLayerRendererListener({\n            layer: this.layer,\n            component: this,\n        });\n    }\n    /**\n     * Adds a listener to listen to the view's extent change\n     * @category Private\n     */\n    async setExtentChangeListener() {\n        // removing existing listeners before adding new ones\n        this.removeExtentChangeListeners();\n        this.extentChangeListeners = await addExtentChangeListener({\n            view: this.view,\n            layer: this.layer,\n            component: this,\n        });\n    }\n    /**\n     * Removes the listeners added to listen to the layer definitionExpression and renderer changes\n     * @category Private\n     */\n    removeLayerListeners() {\n        this.removeLayerFilterListener();\n        this.removeLayerRendererListener();\n    }\n    /**\n     * Removes the layer filter listener when layer definitionExpression changes\n     * @category Private\n     */\n    removeLayerFilterListener() {\n        if (this.layerFilterListener !== undefined) {\n            this.layerFilterListener.remove();\n        }\n    }\n    /**\n     * Removes the layer renderer listener when layer renderer changes\n     * @category Private\n     */\n    removeLayerRendererListener() {\n        if (this.layerRendererListener !== undefined) {\n            this.layerRendererListener.remove();\n        }\n    }\n    /**\n     * Removes the listeners added to listen to the view's extent change\n     * @category Private\n     */\n    removeExtentChangeListeners() {\n        if (this.extentChangeListeners !== undefined) {\n            this.extentChangeListeners.forEach((listener) => listener.remove());\n            this.extentChangeListeners = [];\n        }\n    }\n    /**\n     * If the chart config version is newer than the current one, display a message in a popup.\n     * @category Private\n     */\n    checkForIncompatibleChartVersion() {\n        const chartVersion = this.config?.version;\n        if (jc(chartVersion).versionStatus === WebChartVersionStatus.Newer) {\n            this.notifyHeading = this.errorStrings.incompatibleChartVersion.title;\n            this.notifyMessage = Kr(this.errorStrings.incompatibleChartVersion.message, {\n                chartVersion: chartVersion ?? \"\",\n            });\n            this.notifyOptions = {\n                kind: \"warning\",\n                autoClose: true,\n                active: true,\n            };\n            this.showNotifyPanel = true;\n        }\n    }\n    /**\n     * creates arcgis chart instance\n     * @param {boolean} firstCreation Indicates whether it's the first time the component is created\n     * @category Private\n     */\n    async createChartInstance(firstCreation = true) {\n        // If a chart creation is already running (rare case) we wait for it to be done before continuing\n        if (this.chartCreationProcessing !== undefined) {\n            await this.chartCreationProcessing;\n            this.chartCreationProcessing = undefined;\n        }\n        // Controlling the series type to display a console error if the type is not the expected one\n        // We still proceed to the creation to let the config validator deal with the invalid config\n        await Mc([WebChartTypes.BoxPlotSeries, WebChartTypes.LineSeries], this.config);\n        this.checkForIncompatibleChartVersion();\n        this.updatedProps.clear();\n        try {\n            if (isValidDataSource(this.config, this.layer)) {\n                const options = gatherComponentOptions({ component: this });\n                await addMissingSplitBySeries(this, options);\n                this.chartCreationProcessing = zY({\n                    chartContainer: this.chartRef,\n                    chartConfig: this.config,\n                    options,\n                    globalOptions: gatherComponentGlobalOptions(this),\n                    t9nStrings: {\n                        errorStrings: this.errorStrings,\n                        commonStrings: this.commonStrings,\n                    },\n                });\n            }\n            this.chart = await this.chartCreationProcessing;\n            // after creating the chart we add listeners on the feature layer and view\n            // only adding them if it's the first component creation. `createChartInstance()` can be called\n            // when an update failed, and in that case we don't need to add again the listeners given the view\n            // or layer didn't change\n            if (firstCreation) {\n                await this.addLayerListeners();\n                await this.setExtentChangeListener();\n            }\n        }\n        catch (e) {\n            // sending an event if a query failed\n            if (e.name === El.QueryFeaturesError) {\n                this.arcgisDataProcessError.emit(e.details);\n            }\n            else {\n                this.arcgisRuntimeError.emit(e.details ?? e);\n            }\n            // displaying the error\n            this.errorAlert(e?.message);\n            // disposing the chart\n            this.chart?.dispose();\n            this.chartCreationProcessing = undefined;\n            this.chart = undefined;\n        }\n    }\n    static get assetsDirs() { return [\"assets\"]; }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"view\": [\"viewChange\"],\n        \"layer\": [\"layerChange\"],\n        \"rotation\": [\"rotationChange\"],\n        \"legendPosition\": [\"legendPositionChange\"],\n        \"legendVisibility\": [\"legendVisibilityChange\"],\n        \"filterBySelection\": [\"filterBySelectionChanged\"],\n        \"layerFilterChangePolicy\": [\"layerFilterChangePolicyCallBack\"],\n        \"layerRendererChangePolicy\": [\"layerRendererChangePolicyCallBack\"]\n    }; }\n};\nArcGISChartsBoxPlot.style = ArcgisChartsBoxPlotStyle0;\n\nexport { ArcGISChartsBoxPlot as A };\n"],"names":["ArcGISChartsBoxPlot","constructor","hostRef","registerInstance","this","arcgisRuntimeError","createEvent","arcgisDataProcessError","arcgisDataProcessComplete","arcgisLegendItemVisibilityChange","arcgisUpdateComplete","arcgisBadDataWarningRaise","arcgisSeriesColorChange","arcgisAxesMinMaxChange","arcgisSelectionComplete","arcgisNoRenderPropChange","arcgisSeriesOrder","skipNextUpdate","noRenderProps","dataUpdateNeededProps","updatedProps","Set","config","undefined","rotation","actionMode","cursorRange","legendPosition","legendVisibility","hideEmptySeries","view","layer","selectionData","returnSelectionOIDs","returnSelectionIndexes","returnFeaturesExtent","filterBySelection","disableInteractions","queueChartCreation","useAnimatedCharts","hideLicenceWatermark","enableResponsiveFeatures","autoDisposeChart","placeholder","selectionTheme","chartLimits","tooltipFormatter","dataLabelFormatter","guideTooltipFormatter","xAxisLabelFormatter","yAxisLabelFormatter","messageOptions","disableTogglingLegendItems","hideLoaderAnimation","runtimeDataFilters","usePopupTemplateFieldsInfo","layerFilterChangePolicy","Am","Refresh","layerRendererChangePolicy","Em","ignoreViewExtent","updateSplitBySeries","showNotifyPanel","handleChartOutputDataChange","event","emit","detail","handleLegendItemVisibilityChanged","handleUpdateCompleted","handleBadDataWarningRaise","handleSeriesColorsChange","handleSelection","handleTooManySelectedElements","notifyHeading","errorStrings","tooManySelectedElements","title","notifyMessage","message","notifyOptions","kind","autoClose","duration","active","handleAlertClosed","target","el","handleAxesMinMaxChange","handleSeriesOrder","viewChange","newView","oldView","setExtentChangeListener","refresh","layerChange","addLayerListeners","rotationChange","newRotation","xn","legendPositionChange","newLegendPosition","updateLegendPosition","legendVisibilityChange","newLegendVisibility","updateLegendVisibility","filterBySelectionChanged","resetAxesBounds","layerFilterChangePolicyCallBack","newRefreshOnLayerFilter","Ignore","setLayerFilterListener","removeLayerFilterListener","layerRendererChangePolicyCallBack","newRefreshOnLayerRenderer","setLayerRendererListener","removeLayerRendererListener","notify","heading","options","chart","Promise","resolve","errorAlert","errorMessage","errorHeading","resetZoom","switchSelection","clearSelection","props","updateData","updateExtent","add","viewExtentUpdated","axes","minimum","maximum","componentDidUpdate","componentShouldUpdate","_len","arguments","length","args","Array","_key","value","propName","isNoRenderProp","includes","shouldUpdate","componentWillLoad","fetchErrorsStrings","commonStrings","fetchCommonStrings","debouncedChartUpdate","promise","async","from","dataUpdateNeeded","some","updatedProp","clear","updateOptions","gatherComponentOptions","component","dataUpdated","addMissingSeries","addMissingSplitBySeries","update","newChartConfig","updateGlobalOptions","gatherComponentGlobalOptions","t9nStrings","maximumNumberOfSimultaneousUpdates","componentDidLoad","chartRef","createChartInstance","chartCreationProcessing","Mc","WebChartTypes","BoxPlotSeries","LineSeries","isValidDataSource","push","e","name","El","ChartDisposed","dispose","innerHTML","QueryFeaturesError","details","actionBarElement","updateActionBarStates","disconnectedCallback","removeLayerListeners","removeExtentChangeListeners","render","notifyPanel","h","ArcgisChartsNotifyPanel","chartStyles","notifyStyles","Host","key","Slot","actionBar","onSlotchange","onActionBarSlotChange","ref","class","layerFilterListener","addLayerFilterListener","layerRendererListener","addLayerRendererListener","extentChangeListeners","addExtentChangeListener","remove","forEach","listener","checkForIncompatibleChartVersion","chartVersion","version","jc","versionStatus","WebChartVersionStatus","Newer","incompatibleChartVersion","Kr","firstCreation","zY","chartContainer","chartConfig","globalOptions","assetsDirs","getElement","watchers","style"],"sourceRoot":""}