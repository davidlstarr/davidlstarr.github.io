{"version":3,"file":"static/js/48897.6694a1e3.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/components/src/components/action/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/action/action.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/action/action.scss?tag=calcite-action&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/components/icon/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/icon/utils.ts","../node_modules/@esri/calcite-components/dist/components/src/components/icon/icon.scss?tag=calcite-icon&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/components/icon/icon.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/loader/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/loader/loader.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/loader/loader.scss?tag=calcite-loader&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/utils/t9n.ts"],"sourcesContent":["export const CSS = {\n  button: \"button\",\n  buttonTextVisible: \"button--text-visible\",\n  buttonCompact: \"button--compact\",\n  indicatorText: \"indicator-text\",\n  iconContainer: \"icon-container\",\n  slotContainer: \"slot-container\",\n  slotContainerHidden: \"slot-container--hidden\",\n  textContainer: \"text-container\",\n  textContainerVisible: \"text-container--visible\",\n  indicatorWithIcon: \"indicator-with-icon\",\n  indicatorWithoutIcon: \"indicator-without-icon\",\n};\n\nexport const SLOTS = {\n  tooltip: \"tooltip\",\n};\n","import {\n  Component,\n  Element,\n  forceUpdate,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport { toAriaBoolean } from \"../../utils/dom\";\nimport { guid } from \"../../utils/guid\";\nimport {\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { connectLocalized, disconnectLocalized, LocalizedComponent } from \"../../utils/locale\";\nimport { createObserver } from \"../../utils/observers\";\nimport { getIconScale } from \"../../utils/component\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { Alignment, Appearance, Scale } from \"../interfaces\";\nimport { IconNameOrString } from \"../icon/interfaces\";\nimport { isBrowser } from \"../../utils/browser\";\nimport { ActionMessages } from \"./assets/action/t9n\";\nimport { CSS, SLOTS } from \"./resources\";\n\n/**\n * @slot - A slot for adding a `calcite-icon`.\n * @slot tooltip - [Deprecated] Use the `calcite-tooltip` component instead.\n */\n@Component({\n  tag: \"calcite-action\",\n  styleUrl: \"action.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class Action\n  implements InteractiveComponent, LocalizedComponent, T9nComponent, LoadableComponent\n{\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * When `true`, the component is highlighted.\n   */\n  @Prop({ reflect: true }) active = false;\n\n  /**\n   * Specifies the horizontal alignment of button elements with text content.\n   */\n  @Prop({ reflect: true }) alignment: Alignment;\n\n  /** Specifies the appearance of the component. */\n  @Prop({ reflect: true }) appearance: Extract<\"solid\" | \"transparent\", Appearance> = \"solid\";\n\n  /**\n   * When `true`, the side padding of the component is reduced.\n   *\n   * @deprecated No longer necessary.\n   */\n  @Prop({ reflect: true }) compact = false;\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  /** Specifies an icon to display. */\n  @Prop() icon: IconNameOrString;\n\n  /** When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`). */\n  @Prop({ reflect: true }) iconFlipRtl = false;\n\n  /**\n   * When `true`, displays a visual indicator.\n   */\n  @Prop({ reflect: true }) indicator = false;\n\n  /**\n   * Specifies the label of the component. If no label is provided, the label inherits what's provided for the `text` prop.\n   */\n  @Prop() label: string;\n\n  /**\n   * When `true`, a busy indicator is displayed.\n   */\n  @Prop({ reflect: true }) loading = false;\n\n  /**\n   * Specifies the size of the component.\n   */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /**\n   * Specifies text that accompanies the icon.\n   */\n  @Prop() text!: string;\n\n  /**\n   * Indicates whether the text is displayed.\n   */\n  @Prop({ reflect: true }) textEnabled = false;\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: ActionMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<ActionMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteActionElement;\n\n  buttonEl: HTMLButtonElement;\n\n  mutationObserver = createObserver(\"mutation\", () => forceUpdate(this));\n\n  @State() effectiveLocale = \"\";\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  @State() defaultMessages: ActionMessages;\n\n  guid = `calcite-action-${guid()}`;\n\n  indicatorId = `${this.guid}-indicator`;\n\n  buttonId = `${this.guid}-button`;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectLocalized(this);\n    connectMessages(this);\n    this.mutationObserver?.observe(this.el, { childList: true, subtree: true });\n  }\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    if (isBrowser()) {\n      await setUpMessages(this);\n    }\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectLocalized(this);\n    disconnectMessages(this);\n    this.mutationObserver?.disconnect();\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Methods\n  //\n  // --------------------------------------------------------------------------\n\n  /** Sets focus on the component. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    this.buttonEl?.focus();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n\n  renderTextContainer(): VNode {\n    const { text, textEnabled } = this;\n\n    const textContainerClasses = {\n      [CSS.textContainer]: true,\n      [CSS.textContainerVisible]: textEnabled,\n    };\n\n    return text ? (\n      <div class={textContainerClasses} key=\"text-container\">\n        {text}\n      </div>\n    ) : null;\n  }\n\n  renderIndicatorText(): VNode {\n    const { indicator, messages, indicatorId, buttonId } = this;\n    return (\n      <div\n        aria-labelledby={buttonId}\n        aria-live=\"polite\"\n        class={CSS.indicatorText}\n        id={indicatorId}\n        role=\"region\"\n      >\n        {indicator ? messages.indicator : null}\n      </div>\n    );\n  }\n\n  renderIconContainer(): VNode {\n    const { loading, icon, scale, el, iconFlipRtl, indicator } = this;\n    const loaderScale = scale === \"l\" ? \"l\" : \"m\";\n    const calciteLoaderNode = loading ? (\n      <calcite-loader inline label={this.messages.loading} scale={loaderScale} />\n    ) : null;\n    const calciteIconNode = icon ? (\n      <calcite-icon\n        class={{ [CSS.indicatorWithIcon]: indicator }}\n        flipRtl={iconFlipRtl}\n        icon={icon}\n        scale={getIconScale(this.scale)}\n      />\n    ) : null;\n    const iconNode = calciteLoaderNode || calciteIconNode;\n    const hasIconToDisplay = iconNode || el.children?.length;\n\n    const slotContainerNode = (\n      <div\n        class={{\n          [CSS.slotContainer]: true,\n          [CSS.slotContainerHidden]: loading,\n        }}\n      >\n        <slot />\n      </div>\n    );\n\n    return hasIconToDisplay ? (\n      <div aria-hidden=\"true\" class={CSS.iconContainer} key=\"icon-container\">\n        {iconNode}\n        {slotContainerNode}\n      </div>\n    ) : null;\n  }\n\n  render(): VNode {\n    const {\n      active,\n      compact,\n      disabled,\n      icon,\n      loading,\n      textEnabled,\n      label,\n      text,\n      indicator,\n      indicatorId,\n      buttonId,\n      messages,\n    } = this;\n    const labelFallback = label || text;\n    const ariaLabel = labelFallback\n      ? `${labelFallback}${indicator ? ` (${messages.indicator})` : \"\"}`\n      : \"\";\n\n    const buttonClasses = {\n      [CSS.button]: true,\n      [CSS.buttonTextVisible]: textEnabled,\n      [CSS.buttonCompact]: compact,\n    };\n\n    return (\n      <Host>\n        <InteractiveContainer disabled={disabled}>\n          <button\n            aria-busy={toAriaBoolean(loading)}\n            aria-controls={indicator ? indicatorId : null}\n            aria-label={ariaLabel}\n            aria-pressed={toAriaBoolean(active)}\n            class={buttonClasses}\n            disabled={disabled}\n            id={buttonId}\n            ref={(buttonEl): HTMLButtonElement => (this.buttonEl = buttonEl)}\n          >\n            {this.renderIconContainer()}\n            {this.renderTextContainer()}\n            {!icon && indicator && <div class={CSS.indicatorWithoutIcon} key=\"indicator-no-icon\" />}\n          </button>\n          <slot name={SLOTS.tooltip} onSlotchange={this.handleTooltipSlotChange} />\n          {this.renderIndicatorText()}\n        </InteractiveContainer>\n      </Host>\n    );\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  handleTooltipSlotChange = (event: Event): void => {\n    const tooltips = (event.target as HTMLSlotElement)\n      .assignedElements({\n        flatten: true,\n      })\n      .filter((el): el is HTMLCalciteTooltipElement => el?.matches(\"calcite-tooltip\"));\n\n    const tooltip = tooltips[0];\n\n    if (tooltip) {\n      tooltip.referenceElement = this.buttonEl;\n    }\n  };\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-action-indicator-color: Specifies the component's indicator color.\n * @prop --calcite-action-background-color: Specifies the component's background color.\n * @prop --calcite-action-background-color-hover: Specifies the component's background color when hovered or focused.\n * @prop --calcite-action-background-color-pressed: Specifies the component's background color when active.\n * @prop --calcite-action-corner-radius: Specifies the component's corner radius.\n * @prop --calcite-action-corner-radius-end-end: Specifies the component's corner radius end end.\n * @prop --calcite-action-corner-radius-end-start: Specifies the component's corner radius end start.\n * @prop --calcite-action-corner-radius-start-end: Specifies the component's corner radius start end.\n * @prop --calcite-action-corner-radius-start-start: Specifies the component's corner radius start start.\n * @prop --calcite-action-text-color: Specifies the component's text color.\n * @prop --calcite-action-text-color-pressed: Specifies the component's text color when hovered.\n */\n\n:host {\n  @extend %component-host;\n  @apply flex bg-transparent;\n}\n\n:host,\nbutton {\n  border-end-end-radius: var(\n    --calcite-action-corner-radius-end-end,\n    var(--calcite-action-corner-radius, var(--calcite-corner-radius))\n  );\n  border-end-start-radius: var(\n    --calcite-action-corner-radius-end-start,\n    var(--calcite-action-corner-radius, var(--calcite-corner-radius))\n  );\n  border-start-end-radius: var(\n    --calcite-action-corner-radius-start-end,\n    var(--calcite-action-corner-radius, var(--calcite-corner-radius))\n  );\n  border-start-start-radius: var(\n    --calcite-action-corner-radius-start-start,\n    var(--calcite-action-corner-radius, var(--calcite-corner-radius))\n  );\n}\n\n@mixin action-indicator() {\n  position: relative;\n  &::after {\n    content: \"\";\n    @apply absolute\n      h-2\n      w-2\n      rounded-full;\n    inset-block-end: calc(-0.275rem);\n    inset-inline-end: calc(-0.275rem);\n    background-color: var(--calcite-action-indicator-color, theme(\"colors.brand\"));\n  }\n}\n\n.button {\n  @apply focus-base\n    text-n2h\n    relative\n    m-0\n    flex\n    w-auto\n    cursor-pointer\n    items-center\n    justify-start\n    border-none\n    font-medium\n    font-sans;\n\n  background-color: var(--calcite-action-background-color, var(--calcite-color-foreground-1));\n  color: var(--calcite-action-text-color, var(--calcite-color-text-3));\n  text-align: unset;\n  flex: 1 0 auto;\n\n  &:hover,\n  &:focus {\n    background-color: var(--calcite-action-background-color-hover, var(--calcite-color-foreground-2));\n    color: var(--calcite-action-text-color-pressed, var(--calcite-color-text-1));\n  }\n\n  &:focus {\n    @apply focus-inset;\n  }\n\n  &:active {\n    background-color: var(--calcite-action-background-color-pressed, var(--calcite-color-foreground-3));\n  }\n}\n\n.icon-container {\n  @apply pointer-events-none\n    m-0\n    flex\n    items-center\n    justify-center;\n  min-inline-size: theme(\"spacing.4\");\n  min-block-size: theme(\"spacing.6\");\n}\n\n.text-container {\n  @apply m-0\n    w-0\n    truncate\n    leading-6\n    opacity-0\n    transition-opacity\n    duration-150\n    ease-in-out;\n\n  transition-property: margin;\n  transition-property: inline-size;\n}\n\n.text-container--visible {\n  @apply w-auto flex-auto opacity-100;\n}\n\n:host([active]) {\n  .button {\n    &,\n    &:hover,\n    &:focus {\n      color: var(--calcite-action-text-color-pressed, var(--calcite-color-text-1));\n      background-color: var(--calcite-action-background-color-pressed, var(--calcite-color-foreground-3));\n    }\n\n    &:active {\n      background-color: var(--calcite-action-background-color, var(--calcite-color-foreground-1));\n    }\n  }\n}\n\n:host([loading]) {\n  .button {\n    &:hover,\n    &:focus {\n      background-color: var(--calcite-action-background-color, var(--calcite-color-foreground-1));\n    }\n  }\n\n  .text-container {\n    @apply opacity-disabled;\n  }\n\n  calcite-loader[inline] {\n    margin-inline-end: theme(\"spacing.0\");\n  }\n}\n\n:host([appearance=\"transparent\"]) {\n  .button {\n    @apply bg-transparent\n      transition-shadow\n      duration-150\n      ease-in-out;\n\n    &:hover,\n    &:focus {\n      background-color: var(--calcite-color-transparent-hover);\n    }\n\n    &:active {\n      background-color: var(--calcite-color-transparent-press);\n    }\n  }\n}\n\n:host([data-active]) .button {\n  @apply focus-inset;\n}\n\n:host([scale=\"s\"]) {\n  .button {\n    @apply text-n2h px-2 py-1 font-normal;\n  }\n  .button--text-visible .icon-container {\n    margin-inline-end: theme(\"spacing.2\");\n  }\n}\n\n:host([scale=\"m\"]) {\n  .button {\n    @apply text-n1h px-4 py-3 font-normal;\n  }\n  .button--text-visible .icon-container {\n    margin-inline-end: theme(\"spacing.3\");\n  }\n}\n\n:host([scale=\"l\"]) {\n  .button {\n    @apply text-0h p-5 font-normal;\n  }\n  .button--text-visible .icon-container {\n    margin-inline-end: theme(\"spacing.4\");\n  }\n}\n\n:host([alignment=\"center\"]) .button {\n  @apply justify-center;\n}\n\n:host([alignment=\"end\"]) .button {\n  @apply justify-end;\n}\n\n:host([alignment=\"center\"]),\n:host([alignment=\"end\"]) {\n  .button .text-container--visible {\n    @apply flex-initial;\n  }\n}\n\n/* [Deprecated]  Compact */\n:host([scale=\"s\"][compact]) .button,\n:host([scale=\"m\"][compact]) .button,\n:host([scale=\"l\"][compact]) .button {\n  @apply px-0;\n}\n\n.slot-container {\n  @apply flex;\n}\n\n.slot-container--hidden {\n  @apply hidden;\n}\n\n.button--text-visible {\n  @apply w-full;\n}\n\n.indicator-with-icon {\n  @include action-indicator();\n}\n\n.indicator-without-icon {\n  @apply w-4 mx-1;\n  @include action-indicator();\n}\n\n.indicator-text {\n  @apply sr-only;\n}\n\n@include base-component();\n@include disabled {\n  .button,\n  .button:hover,\n  .button:focus {\n    @apply opacity-disabled bg-foreground-1 cursor-default;\n  }\n\n  &:host([active]) {\n    .button,\n    .button:hover,\n    .button:focus {\n      @apply opacity-disabled bg-foreground-3;\n    }\n  }\n}\n","export const CSS = {\n  icon: \"icon\",\n  flipRtl: \"flip-rtl\",\n};\n","import { CalciteIconPath } from \"@esri/calcite-ui-icons\";\nimport { getAssetPath } from \"@stencil/core\";\nimport { Scale } from \"../interfaces\";\nimport { IconNameOrString } from \"./interfaces\";\n\nexport interface FetchIconProps {\n  icon: IconNameOrString;\n  scale: Scale;\n}\n\n/**\n * Icon data cache.\n * Exported for testing purposes.\n *\n * @private\n */\nexport const iconCache: Record<string, CalciteIconPath> = {};\n\n/**\n * Icon request cache.\n * Exported for testing purposes.\n *\n * @private\n */\nexport const requestCache: Record<string, Promise<CalciteIconPath>> = {};\n\nexport const scaleToPx: Record<Scale, number> = {\n  s: 16,\n  m: 24,\n  l: 32,\n};\n\nfunction generateIconId({ icon, scale }: FetchIconProps): string {\n  const size = scaleToPx[scale];\n  const name = normalizeIconName(icon);\n  const filled = name.charAt(name.length - 1) === \"F\";\n  const iconName = filled ? name.substring(0, name.length - 1) : name;\n\n  return `${iconName}${size}${filled ? \"F\" : \"\"}`;\n}\n\nexport async function fetchIcon(props: FetchIconProps): Promise<CalciteIconPath> {\n  const cachedIconKey = generateIconId(props);\n  const cachedIconData = getCachedIconDataByKey(cachedIconKey);\n\n  if (cachedIconData) {\n    return cachedIconData;\n  }\n\n  if (!requestCache[cachedIconKey]) {\n    requestCache[cachedIconKey] = fetch(getAssetPath(`./assets/icon/${cachedIconKey}.json`))\n      .then((resp) => resp.json())\n      .catch(() => {\n        console.error(`\"${cachedIconKey}\" is not a valid calcite-ui-icon name`);\n        return \"\";\n      });\n  }\n\n  const path = await requestCache[cachedIconKey];\n  iconCache[cachedIconKey] = path;\n\n  return path;\n}\n\n/**\n * Util to retrieve cached icon data based on icon name and scale.\n *\n * @param props – icon properties\n */\nexport function getCachedIconData(props: FetchIconProps): CalciteIconPath {\n  return getCachedIconDataByKey(generateIconId(props));\n}\n\nfunction getCachedIconDataByKey(id: string): CalciteIconPath {\n  return iconCache[id];\n}\n\n/**\n * Normalize the icon name to match the path data module exports.\n * Exported for testing purposes.\n *\n * @param name – an icon name that can be either kebab or camel-cased\n * @private\n */\nexport function normalizeIconName(name: string): string {\n  const numberLeadingName = !isNaN(Number(name.charAt(0)));\n  const parts = name.split(\"-\");\n  const kebabCased = parts.length > 0;\n\n  if (kebabCased) {\n    const firstNonDigitInPartPattern = /[a-z]/i;\n\n    name = parts\n      .map((part, partIndex) => {\n        return part.replace(firstNonDigitInPartPattern, function replacer(match, offset) {\n          const isFirstCharInName = partIndex === 0 && offset === 0;\n\n          if (isFirstCharInName) {\n            return match;\n          }\n\n          return match.toUpperCase();\n        });\n      })\n      .join(\"\");\n  }\n\n  return numberLeadingName ? `i${name}` : name;\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-ui-icon-color: [Deprecated] Use `--calcite-icon-color`. Specifies the component's color. Defaults to current color.\n * @prop --calcite-icon-color: Specifies the component's color. Defaults to current color.\n */\n\n:host {\n  @apply text-color-icon inline-flex;\n}\n\n$icon-size-s: 16px;\n$icon-size-m: 24px;\n$icon-size-l: 32px;\n\n:host([scale=\"s\"]) {\n  inline-size: $icon-size-s;\n  block-size: $icon-size-s;\n  min-inline-size: $icon-size-s;\n  min-block-size: $icon-size-s;\n}\n\n:host([scale=\"m\"]) {\n  inline-size: $icon-size-m;\n  block-size: $icon-size-m;\n  min-inline-size: $icon-size-m;\n  min-block-size: $icon-size-m;\n}\n\n:host([scale=\"l\"]) {\n  inline-size: $icon-size-l;\n  block-size: $icon-size-l;\n  min-inline-size: $icon-size-l;\n  min-block-size: $icon-size-l;\n}\n\n.flip-rtl {\n  transform: scaleX(-1);\n}\n\n.svg {\n  @apply block;\n}\n\n@include base-component();\n","import { CalciteIconPath, CalciteMultiPathEntry } from \"@esri/calcite-ui-icons\";\nimport { Component, Element, h, Host, Prop, State, VNode, Watch } from \"@stencil/core\";\nimport { getElementDir, toAriaBoolean } from \"../../utils/dom\";\nimport { createObserver } from \"../../utils/observers\";\nimport { Scale } from \"../interfaces\";\nimport { isBrowser } from \"../../utils/browser\";\nimport { CSS } from \"./resources\";\nimport { fetchIcon, getCachedIconData, scaleToPx } from \"./utils\";\nimport { IconNameOrString } from \"./interfaces\";\n\n@Component({\n  tag: \"calcite-icon\",\n  styleUrl: \"icon.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class Icon {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Displays a specific icon.\n   *\n   * @see [Icons](https://esri.github.io/calcite-ui-icons)\n   */\n  @Prop({\n    reflect: true,\n  })\n  icon: IconNameOrString = null;\n\n  /**\n   * When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).\n   */\n  @Prop({\n    reflect: true,\n  })\n  flipRtl = false;\n\n  /**\n   * Specifies the size of the component.\n   */\n  @Prop({\n    reflect: true,\n  })\n  scale: Scale = \"m\";\n\n  /**\n   * Accessible name for the component.\n   *\n   * It is recommended to set this value if your icon is semantic.\n   */\n  @Prop()\n  textLabel: string;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    if (!this.visible) {\n      this.waitUntilVisible(() => {\n        this.visible = true;\n        this.loadIconPathData();\n      });\n    }\n  }\n\n  disconnectedCallback(): void {\n    this.intersectionObserver?.disconnect();\n    this.intersectionObserver = null;\n  }\n\n  render(): VNode {\n    const { el, flipRtl, pathData, scale, textLabel } = this;\n    const dir = getElementDir(el);\n    const size = scaleToPx[scale];\n    const semantic = !!textLabel;\n    const paths = [].concat(pathData || \"\");\n    return (\n      <Host\n        aria-hidden={toAriaBoolean(!semantic)}\n        aria-label={semantic ? textLabel : null}\n        role={semantic ? \"img\" : null}\n      >\n        <svg\n          aria-hidden=\"true\"\n          class={{\n            [CSS.flipRtl]: dir === \"rtl\" && flipRtl,\n            svg: true,\n          }}\n          fill=\"currentColor\"\n          height=\"100%\"\n          viewBox={`0 0 ${size} ${size}`}\n          width=\"100%\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          {paths.map((path: string | CalciteMultiPathEntry) =>\n            typeof path === \"string\" ? (\n              <path d={path} />\n            ) : (\n              <path d={path.d} opacity={\"opacity\" in path ? path.opacity : 1} />\n            ),\n          )}\n        </svg>\n      </Host>\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteIconElement;\n\n  private intersectionObserver: IntersectionObserver;\n\n  @State()\n  private pathData: CalciteIconPath;\n\n  @State()\n  private visible = false;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  @Watch(\"icon\")\n  @Watch(\"scale\")\n  private async loadIconPathData(): Promise<void> {\n    const { icon, scale, visible } = this;\n\n    if (!isBrowser() || !icon || !visible) {\n      return;\n    }\n\n    const fetchIconProps = { icon, scale };\n    const pathData = getCachedIconData(fetchIconProps) || (await fetchIcon(fetchIconProps));\n\n    // While the fetchIcon method is awaiting response, the icon requested can change. This check is to verify the response received belongs to the current icon.\n    if (icon !== this.icon) {\n      return;\n    }\n\n    this.pathData = pathData;\n  }\n\n  private waitUntilVisible(callback: () => void): void {\n    this.intersectionObserver = createObserver(\n      \"intersection\",\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            this.intersectionObserver.disconnect();\n            this.intersectionObserver = null;\n            callback();\n          }\n        });\n      },\n      { rootMargin: \"50px\" },\n    );\n\n    if (!this.intersectionObserver) {\n      callback();\n      return;\n    }\n\n    this.intersectionObserver.observe(this.el);\n  }\n}\n","export const CSS = {\n  loader: \"loader\",\n  loaderParts: \"loader__svgs\",\n  loaderPart: \"loader__svg\",\n  loaderPartId: (partId: number) => `${CSS.loaderPart}--${partId}` as const,\n  loaderText: \"loader__text\",\n  loaderPercentage: \"loader__percentage\",\n};\n","import { Component, Element, h, Host, Prop, State, VNode, Watch } from \"@stencil/core\";\nimport { guid } from \"../../utils/guid\";\nimport { Scale } from \"../interfaces\";\nimport { connectLocalized, disconnectLocalized, LocalizedComponent } from \"../../utils/locale\";\nimport { CSS } from \"./resources\";\n\n@Component({\n  tag: \"calcite-loader\",\n  styleUrl: \"loader.scss\",\n  shadow: true,\n})\nexport class Loader implements LocalizedComponent {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Indicates whether the component is in a loading state.\n   *\n   * @internal\n   */\n  @Prop({ mutable: true, reflect: true }) complete = false;\n\n  /** When `true`, displays smaller and appears to the left of the text. */\n  @Prop({ reflect: true }) inline = false;\n\n  /** Accessible name for the component. */\n  @Prop() label!: string;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /**\n   * Specifies the component type.\n   *\n   * Use `\"indeterminate\"` if finding actual progress value is impossible. Otherwise, use `\"determinate\"` to have the value indicate the progress or `\"determinate-value\"` to have the value label displayed along the progress.\n   *\n   */\n  @Prop({ reflect: true }) type: \"indeterminate\" | \"determinate\" | \"determinate-value\" =\n    \"indeterminate\";\n\n  /** The component's value. Valid only for `\"determinate\"` indicators. Percent complete of 100. */\n  @Prop() value = 0;\n\n  @Watch(\"value\")\n  valueChangeHandler(): void {\n    this.complete = this.type.startsWith(\"determinate\") && this.value === 100;\n  }\n\n  /** Text that displays under the component's indicator. */\n  @Prop() text = \"\";\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectLocalized(this);\n\n    this.updateFormatter();\n  }\n\n  disconnectedCallback(): void {\n    disconnectLocalized(this);\n  }\n\n  componentWillLoad(): void {\n    requestAnimationFrame(() => this.valueChangeHandler());\n  }\n\n  render(): VNode {\n    const { el, inline, label, scale, text, type, value } = this;\n\n    const id = el.id || guid();\n    const radiusRatio = 0.45;\n    const size = inline ? this.getInlineSize(scale) : this.getSize(scale);\n    const radius = size * radiusRatio;\n    const viewbox = `0 0 ${size} ${size}`;\n    const isDeterminate = type.startsWith(\"determinate\");\n    const circumference = 2 * radius * Math.PI;\n    const progress = (value / 100) * circumference;\n    const remaining = circumference - progress;\n    const valueNow = Math.floor(value);\n    const determinateStyle = { \"stroke-dasharray\": `${progress} ${remaining}` };\n\n    return (\n      <Host\n        aria-label={label}\n        aria-valuemax={isDeterminate ? \"100\" : undefined}\n        aria-valuemin={isDeterminate ? \"0\" : undefined}\n        aria-valuenow={isDeterminate ? valueNow.toString() : undefined}\n        id={id}\n        role=\"progressbar\"\n      >\n        <div class={CSS.loaderParts}>\n          {[1, 2, 3].map((index) => (\n            <svg\n              aria-hidden=\"true\"\n              class={{\n                [CSS.loaderPart]: true,\n                [CSS.loaderPartId(index)]: true,\n              }}\n              key={index}\n              style={isDeterminate && index === 3 ? determinateStyle : undefined}\n              viewBox={viewbox}\n            >\n              <circle cx={size / 2} cy={size / 2} r={radius} />\n            </svg>\n          ))}\n          {isDeterminate && <div class={CSS.loaderPercentage}>{this.formatValue()}</div>}\n        </div>\n        {text && <div class={CSS.loaderText}>{text}</div>}\n      </Host>\n    );\n  }\n\n  private formatValue = (): string => {\n    if (this.type !== \"determinate-value\") {\n      return `${this.value}`;\n    }\n\n    return this.formatter.format(this.value / 100);\n  };\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteLoaderElement;\n\n  @State() effectiveLocale = \"\";\n\n  @Watch(\"effectiveLocale\")\n  @Watch(\"type\")\n  formatterPropsChange(): void {\n    this.updateFormatter();\n  }\n\n  private formatter: Intl.NumberFormat;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Return the proper sizes based on the scale property\n   *\n   * @param scale\n   */\n  private getSize(scale: string) {\n    return {\n      s: 32,\n      m: 56,\n      l: 80,\n    }[scale];\n  }\n\n  private getInlineSize(scale: string) {\n    return {\n      s: 12,\n      m: 16,\n      l: 20,\n    }[scale];\n  }\n\n  private updateFormatter(): void {\n    if (\n      this.type !== \"determinate-value\" ||\n      this.formatter?.resolvedOptions().locale === this.effectiveLocale\n    ) {\n      return;\n    }\n\n    this.formatter = new Intl.NumberFormat(this.effectiveLocale, {\n      style: \"percent\",\n    });\n  }\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-loader-font-size: Specifies the font size of the loading percentage when type is `\"determinate\"`.\n * @prop --calcite-loader-size: The width and height of a non-inline loader.\n * @prop --calcite-loader-size-inline: The width and height of an inline loader\n * @prop --calcite-loader-padding : Specifies the padding of the loader.\n */\n\n@import \"../../assets/styles/animation\";\n\n$stroke-width: 3;\n$loader-scale: 54;\n$loader-circumference: ($loader-scale - (2 * $stroke-width)) * 3.14159;\n\n@media (prefers-reduced-motion: reduce) {\n  :root {\n    --calcite-internal-duration-factor: 0;\n  }\n}\n\n:host {\n  @apply relative mx-auto hidden items-center justify-center opacity-100;\n  min-block-size: var(--calcite-loader-size);\n  font-size: var(--calcite-loader-font-size);\n  stroke: var(--calcite-color-brand);\n  stroke-width: $stroke-width;\n  fill: none;\n  transform: scale(1, 1);\n  animation: loader-color-shift scale-duration(--calcite-internal-animation-timing-slow, 2) alternate-reverse infinite\n    linear;\n  padding-block: var(--calcite-loader-padding, theme(\"spacing.16\"));\n  will-change: contents;\n}\n\n:host([scale=\"s\"]) {\n  --calcite-loader-font-size: var(--calcite-font-size--3);\n  --calcite-loader-size: theme(\"spacing.8\");\n  --calcite-loader-size-inline: theme(\"spacing.3\");\n  --calcite-internal-loader-value-line-height: 0.625rem; // 10px\n}\n\n:host([scale=\"m\"]) {\n  --calcite-loader-font-size: theme(\"fontSize.0\");\n  --calcite-loader-size: theme(\"spacing.16\");\n  --calcite-loader-size-inline: theme(\"spacing.4\");\n  --calcite-internal-loader-value-line-height: 1.375rem; // 22px\n}\n\n:host([scale=\"l\"]) {\n  --calcite-loader-font-size: theme(\"fontSize.2\");\n  --calcite-loader-size: theme(\"spacing.24\");\n  --calcite-loader-size-inline: theme(\"spacing.6\");\n  --calcite-internal-loader-value-line-height: 1.71875rem; // 27.5px\n}\n\n:host([no-padding]) {\n  @apply py-0;\n}\n\n:host {\n  @apply flex;\n}\n\n.loader__text {\n  @apply text-n2h\n  text-color-1\n  block\n  text-center;\n  margin-block-start: calc(var(--calcite-loader-size) + theme(\"spacing.6\"));\n}\n\n.loader__percentage {\n  @apply block text-center text-color-1;\n  font-size: var(--calcite-loader-font-size);\n  inline-size: var(--calcite-loader-size);\n  line-height: var(--calcite-internal-loader-value-line-height);\n  align-self: center;\n}\n\n.loader__svgs {\n  @apply absolute overflow-visible opacity-100;\n  inline-size: var(--calcite-loader-size);\n  block-size: var(--calcite-loader-size);\n  inset-inline-start: 50%;\n  margin-inline-start: calc(var(--calcite-loader-size) / 2 * -1);\n  animation-iteration-count: infinite;\n  animation-timing-function: linear;\n  animation-duration: scale-duration(--calcite-internal-animation-timing-slow, 6.66);\n  animation-name: loader-clockwise;\n  display: flex;\n}\n\n.loader__svg {\n  @apply absolute top-0 origin-center overflow-visible;\n  inset-inline-start: 0;\n  inline-size: var(--calcite-loader-size);\n  block-size: var(--calcite-loader-size);\n  animation-iteration-count: infinite;\n  animation-timing-function: linear;\n\n  &--1 {\n    animation-name: loader-offset-1;\n  }\n  &--2 {\n    animation-name: loader-offset-2;\n  }\n  &--3 {\n    animation-name: loader-offset-3;\n  }\n}\n\n:host([type=\"determinate\"]),\n:host([type=\"determinate-value\"]) {\n  @apply animate-none;\n  stroke: var(--calcite-color-border-3);\n  .loader__svgs {\n    @apply animate-none;\n  }\n  .loader__svg--3 {\n    @apply animate-none;\n    stroke: var(--calcite-color-brand);\n    stroke-dasharray: $loader-circumference;\n    transform: rotate(-90deg);\n    transition: all var(--calcite-internal-animation-timing-fast) linear;\n  }\n}\n\n:host([inline]) {\n  @apply relative m-0 animate-none stroke-current stroke-2 py-0;\n  block-size: var(--calcite-loader-size-inline);\n  min-block-size: var(--calcite-loader-size-inline);\n  inline-size: var(--calcite-loader-size-inline);\n  margin-inline-end: calc(var(--calcite-loader-size-inline) * 0.5);\n  vertical-align: calc(var(--calcite-loader-size-inline) * -1 * 0.2);\n}\n\n:host([inline]) .loader__svgs {\n  @apply top-0 m-0;\n  inset-inline-start: 0;\n  inline-size: var(--calcite-loader-size-inline);\n  block-size: var(--calcite-loader-size-inline);\n}\n\n:host([inline]) .loader__svg {\n  inline-size: var(--calcite-loader-size-inline);\n  block-size: var(--calcite-loader-size-inline);\n}\n\n:host([complete]) {\n  @apply opacity-0;\n  transform: scale(0.75, 0.75);\n  transform-origin: center;\n  transition:\n    opacity var(--calcite-internal-animation-timing-medium) linear 1000ms,\n    transform var(--calcite-internal-animation-timing-medium) linear 1000ms;\n}\n\n:host([complete]) .loader__svgs {\n  @apply opacity-0;\n  transform: scale(0.75, 0.75);\n  transform-origin: center;\n  transition:\n    opacity calc(180ms * var(--calcite-internal-duration-factor)) linear 800ms,\n    transform calc(180ms * var(--calcite-internal-duration-factor)) linear 800ms;\n}\n\n:host([complete]) .loader__percentage {\n  color: theme(\"colors.brand\");\n  transform: scale(1.05, 1.05);\n  transform-origin: center;\n  transition:\n    color var(--calcite-internal-animation-timing-medium) linear,\n    transform var(--calcite-internal-animation-timing-medium) linear;\n}\n\n/**\n  Segment variables\n  - i         index (1-3)\n  - size      length of the segment (0 - 100)\n  - growth    how much the segment grows during the animation\n              (size + growth should not exceed 100)\n  - duration  how long the segment takes to rotate 360° (seconds)\n*/\n@mixin generate-segment($i, $size, $growth, $duration) {\n  $circumference: calc($loader-circumference / $loader-scale) * 100;\n  $length: ($size * 0.01) * $circumference;\n  $end: $length + ($growth * 0.01) * $circumference;\n\n  .loader__svg--#{$i} {\n    stroke-dasharray: $length $circumference - $end;\n    animation-duration: $duration;\n  }\n  @keyframes loader-offset-#{$i} {\n    0% {\n      stroke-dasharray: $length $circumference - $length;\n      stroke-dashoffset: 0;\n    }\n    50% {\n      stroke-dasharray: $end $circumference - $end;\n      stroke-dashoffset: -$circumference * 0.5 - ($length - $end) * 0.5;\n    }\n    100% {\n      stroke-dasharray: $length $circumference - $length;\n      stroke-dashoffset: -$circumference;\n    }\n  }\n}\n\n@include generate-segment(1, 10, 40, scale-duration(--calcite-internal-animation-timing-slow, 4.8));\n@include generate-segment(2, 20, 30, scale-duration(--calcite-internal-animation-timing-slow, 6.4));\n@include generate-segment(3, 05, 45, scale-duration(--calcite-internal-animation-timing-slow, 7.734));\n\n@keyframes loader-color-shift {\n  0% {\n    stroke: var(--calcite-color-brand);\n  }\n  33% {\n    stroke: var(--calcite-color-brand-press);\n  }\n  66% {\n    stroke: var(--calcite-color-brand-hover);\n  }\n  100% {\n    stroke: var(--calcite-color-brand);\n  }\n}\n\n@keyframes loader-clockwise {\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n@include base-component();\n","import { getAssetPath } from \"@stencil/core\";\nimport { getSupportedLocale, LocalizedComponent } from \"./locale\";\nimport { isBrowser } from \"./browser\";\n\nexport type MessageBundle = Record<string, string>;\n\nexport const componentLangToMessageBundleCache: Record<string, Promise<MessageBundle>> = {};\n\nasync function getMessageBundle(lang: string, component: string): Promise<MessageBundle> {\n  const key = `${component}_${lang}`;\n\n  if (componentLangToMessageBundleCache[key]) {\n    return componentLangToMessageBundleCache[key];\n  }\n\n  componentLangToMessageBundleCache[key] = fetch(getAssetPath(`./assets/${component}/t9n/messages_${lang}.json`))\n    .then((resp) => {\n      if (!resp.ok) {\n        throwMessageFetchError();\n      }\n      return resp.json();\n    })\n    .catch(() => throwMessageFetchError());\n\n  return componentLangToMessageBundleCache[key];\n}\n\nfunction throwMessageFetchError(): never {\n  throw new Error(\"could not fetch component message bundle\");\n}\n\nfunction mergeMessages(component: T9nComponent): void {\n  component.messages = {\n    ...component.defaultMessages,\n    ...component.messageOverrides,\n  };\n}\n\nfunction noop(): void {\n  // intentionally empty\n}\n\n/**\n * This utility sets up the messages used by the component. It should be awaited in the `componentWillLoad` lifecycle hook.\n *\n * @param component\n */\nexport async function setUpMessages(component: T9nComponent): Promise<void> {\n  component.defaultMessages = await fetchMessages(component, component.effectiveLocale);\n  mergeMessages(component);\n}\n\nasync function fetchMessages(component: T9nComponent, lang: string): Promise<MessageBundle> {\n  if (!isBrowser()) {\n    return {};\n  }\n\n  const { el } = component;\n  const tag = el.tagName.toLowerCase();\n  const componentName = tag.replace(\"calcite-\", \"\");\n\n  return getMessageBundle(getSupportedLocale(lang, \"t9n\"), componentName);\n}\n\n/**\n * This utility must be set up for the component to update its default message bundle if the locale changes.\n *\n * It can be set up in **either** of the following ways:\n *\n * 1. called from `LocalizedComponent`'s `onLocaleChange` method or\n * 2. called from a watcher configured to watch `LocalizedComponent`'s `effectiveLocale` prop\n *\n * @param component\n * @param lang\n */\nexport async function updateMessages(component: T9nComponent, lang: string): Promise<void> {\n  component.defaultMessages = await fetchMessages(component, lang);\n  mergeMessages(component);\n}\n\n/**\n * This utility sets up internals for messages support.\n *\n * It needs to be called in `connectedCallback`\n *\n * **Note**: this must be called after `LocalizedComponent`'s `connectLocalized` method.\n *\n * @param component\n */\nexport function connectMessages(component: T9nComponent): void {\n  component.onMessagesChange = defaultOnMessagesChange;\n}\n\n/**\n * This utility tears down internals for messages support.\n *\n * It needs to be called in `disconnectedCallback`\n *\n * @param component\n */\nexport function disconnectMessages(component: T9nComponent): void {\n  // we set this to noop to for watchers triggered when components are disconnected\n  component.onMessagesChange = noop;\n}\n\n/**\n * This interface enables components to support built-in translation strings.\n *\n * **Notes**:\n *\n * This requires `LocalizedComponent` to be implemented.\n * To avoid unnecessary lookups, composite components should set `lang` on internal t9n components.\n */\nexport interface T9nComponent extends LocalizedComponent {\n  el: HTMLElement;\n\n  /**\n   * This property holds all messages used by the component's rendering.\n   *\n   * This prop should use the `@Prop` decorator. It uses `@Prop` decorator for testing purpose only.\n   */\n  messages: MessageBundle;\n\n  /**\n   * This property holds the component's default messages.\n   */\n  defaultMessages: MessageBundle;\n\n  /**\n   * This property holds all user message overrides.\n   *\n   * This prop should use the `@Prop` decorator.\n   */\n  messageOverrides: Partial<MessageBundle>;\n\n  /**\n   * This private method ensures messages are kept in sync.\n   *\n   * This method should be empty and configured to watch for changes on  `messageOverrides` property.\n   *\n   * @Watch(\"messageOverrides\")\n   * onMessagesChange(): void {\n   *  \\/* wired up by t9n util *\\/\n   * }\n   */\n  onMessagesChange: () => void;\n}\n\nfunction defaultOnMessagesChange(this: T9nComponent): void {\n  mergeMessages(this);\n}\n"],"names":["CSS","SLOTS","Action","proxyCustomElement","HTMLElement","mutationObserver","createObserver","forceUpdate","this","guid","indicatorId","buttonId","handleTooltipSlotChange","event","tooltip","target","assignedElements","flatten","filter","el","matches","referenceElement","buttonEl","onMessagesChange","effectiveLocaleChange","updateMessages","effectiveLocale","connectedCallback","connectLocalized","connectMessages","observe","childList","subtree","componentWillLoad","setUpLoadableComponent","isBrowser","setUpMessages","componentDidLoad","setComponentLoaded","disconnectedCallback","disconnectLocalized","disconnectMessages","disconnect","componentDidRender","updateHostInteraction","setFocus","componentFocusable","focus","renderTextContainer","text","textEnabled","textContainerClasses","h","class","key","renderIndicatorText","indicator","messages","id","role","renderIconContainer","loading","icon","scale","iconFlipRtl","loaderScale","calciteLoaderNode","inline","label","calciteIconNode","flipRtl","getIconScale","iconNode","hasIconToDisplay","children","length","slotContainerNode","render","active","compact","disabled","labelFallback","ariaLabel","buttonClasses","Host","InteractiveContainer","toAriaBoolean","ref","name","onSlotchange","iconCache","requestCache","scaleToPx","s","m","l","generateIconId","_ref","size","numberLeadingName","isNaN","Number","charAt","parts","split","firstNonDigitInPartPattern","map","part","partIndex","replace","match","offset","toUpperCase","join","normalizeIconName","filled","substring","getCachedIconDataByKey","Icon","visible","waitUntilVisible","loadIconPathData","intersectionObserver","pathData","textLabel","dir","getElementDir","semantic","paths","concat","svg","fill","height","viewBox","width","xmlns","path","d","opacity","fetchIconProps","async","props","cachedIconKey","cachedIconData","fetch","getAssetPath","then","resp","json","catch","console","error","fetchIcon","callback","entries","forEach","entry","isIntersecting","rootMargin","loader","loaderParts","loaderPart","loaderPartId","partId","loaderText","loaderPercentage","Loader","formatValue","type","value","formatter","format","valueChangeHandler","complete","startsWith","updateFormatter","requestAnimationFrame","getInlineSize","getSize","radius","viewbox","isDeterminate","circumference","Math","PI","progress","remaining","valueNow","floor","determinateStyle","undefined","toString","index","style","cx","cy","r","formatterPropsChange","resolvedOptions","locale","Intl","NumberFormat","componentLangToMessageBundleCache","throwMessageFetchError","Error","mergeMessages","component","defaultMessages","messageOverrides","noop","fetchMessages","lang","componentName","tagName","toLowerCase","ok","getMessageBundle","getSupportedLocale","defaultOnMessagesChange"],"sourceRoot":""}