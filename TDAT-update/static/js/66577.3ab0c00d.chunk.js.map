{"version":3,"file":"static/js/66577.3ab0c00d.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/components/src/components/functional/Validation.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/radio-button-group/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/radio-button-group/radio-button-group.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/radio-button-group/radio-button-group.scss?tag=calcite-radio-button-group&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/components/icon/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/icon/utils.ts","../node_modules/@esri/calcite-components/dist/components/src/components/icon/icon.scss?tag=calcite-icon&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/components/icon/icon.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/input-message/interfaces.ts","../node_modules/@esri/calcite-components/dist/components/src/components/input-message/input-message.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/input-message/input-message.scss?tag=calcite-input-message&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/utils/loadable.ts","../node_modules/@esri/calcite-components/dist/components/src/utils/observers.ts"],"sourcesContent":["import { FunctionalComponent, h, VNode } from \"@stencil/core\";\nimport { JSXBase } from \"@stencil/core/internal\";\nimport { Scale, Status } from \"../interfaces\";\nimport { IconNameOrString } from \"../icon/interfaces\";\n\ninterface ValidationProps extends JSXBase.HTMLAttributes {\n  scale: Scale;\n  status: Status;\n  icon?: IconNameOrString | boolean;\n  id?: string;\n  message: string;\n}\n\nexport const CSS = {\n  validationContainer: \"validation-container\",\n};\n\nexport const Validation: FunctionalComponent<ValidationProps> = ({\n  scale,\n  status,\n  id,\n  icon,\n  message,\n}): VNode => (\n  <div class={CSS.validationContainer}>\n    <calcite-input-message aria-live=\"polite\" icon={icon} id={id} scale={scale} status={status}>\n      {message}\n    </calcite-input-message>\n  </div>\n);\n","export const CSS = {\n  itemWrapper: \"item-wrapper\",\n};\n\nexport const IDS = {\n  validationMessage: \"radioButtonGroupValidationMessage\",\n};\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport { createObserver } from \"../../utils/observers\";\nimport { toAriaBoolean } from \"../../utils/dom\";\nimport { Layout, Scale, Status } from \"../interfaces\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { Validation } from \"../functional/Validation\";\nimport { IconNameOrString } from \"../icon/interfaces\";\nimport { CSS, IDS } from \"./resources\";\n\n/**\n * @slot - A slot for adding `calcite-radio-button`s.\n */\n@Component({\n  tag: \"calcite-radio-button-group\",\n  styleUrl: \"radio-button-group.scss\",\n  shadow: true,\n})\nexport class RadioButtonGroup implements LoadableComponent {\n  //--------------------------------------------------------------------------\n  //\n  //  Global attributes\n  //\n  //--------------------------------------------------------------------------\n\n  @Watch(\"hidden\")\n  handleHiddenChange(): void {\n    this.passPropsToRadioButtons();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /** When `true`, interaction is prevented and the component is displayed with lower opacity. */\n  @Prop({ reflect: true }) disabled = false;\n\n  @Watch(\"disabled\")\n  onDisabledChange(): void {\n    this.passPropsToRadioButtons();\n  }\n\n  /** Defines the layout of the component. */\n  @Prop({ reflect: true }) layout: Extract<\"horizontal\" | \"vertical\" | \"grid\", Layout> =\n    \"horizontal\";\n\n  @Watch(\"layout\")\n  onLayoutChange(): void {\n    this.passPropsToRadioButtons();\n  }\n\n  /** Specifies the name of the component on form submission. Must be unique to other component instances. */\n  @Prop({ reflect: true }) name!: string;\n\n  /** When `true`, the component must have a value in order for the form to submit. */\n  @Prop({ reflect: true }) required = false;\n\n  /**\n   * Specifies the component's selected item.\n   *\n   * @readonly\n   */\n  @Prop({ mutable: true }) selectedItem: HTMLCalciteRadioButtonElement = null;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /** Specifies the status of the validation message. */\n  @Prop({ reflect: true }) status: Status = \"idle\";\n\n  /** Specifies the validation message to display under the component. */\n  @Prop() validationMessage: string;\n\n  /** Specifies the validation icon to display under the component. */\n  @Prop({ reflect: true }) validationIcon: IconNameOrString | boolean;\n\n  @Watch(\"scale\")\n  onScaleChange(): void {\n    this.passPropsToRadioButtons();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el!: HTMLCalciteRadioButtonGroupElement;\n\n  mutationObserver = createObserver(\"mutation\", () => this.passPropsToRadioButtons());\n\n  @State() radioButtons: HTMLCalciteRadioButtonElement[] = [];\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    this.passPropsToRadioButtons();\n    this.mutationObserver?.observe(this.el, { childList: true, subtree: true });\n  }\n\n  componentWillLoad(): void {\n    setUpLoadableComponent(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  disconnectedCallback(): void {\n    this.mutationObserver?.disconnect();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  private passPropsToRadioButtons = (): void => {\n    this.radioButtons = Array.from(this.el.querySelectorAll(\"calcite-radio-button\"));\n    this.selectedItem =\n      Array.from(this.radioButtons).find((radioButton) => radioButton.checked) || null;\n    if (this.radioButtons.length > 0) {\n      this.radioButtons.forEach((radioButton) => {\n        radioButton.disabled = this.disabled || radioButton.disabled;\n        radioButton.hidden = this.el.hidden;\n        radioButton.name = this.name;\n        radioButton.required = this.required;\n        radioButton.scale = this.scale;\n      });\n    }\n  };\n\n  private getFocusableRadioButton(): HTMLCalciteRadioButtonElement | null {\n    return this.radioButtons.find((radiobutton) => !radiobutton.disabled) ?? null;\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Fires when the component has changed.\n   */\n  @Event({ cancelable: false }) calciteRadioButtonGroupChange: EventEmitter<void>;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Method\n  //\n  //--------------------------------------------------------------------------\n\n  /** Sets focus on the fist focusable `calcite-radio-button` element in the component. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    if (this.selectedItem && !this.selectedItem.disabled) {\n      return this.selectedItem.setFocus();\n    }\n    if (this.radioButtons.length > 0) {\n      return this.getFocusableRadioButton()?.setFocus();\n    }\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Event Listeners\n  //\n  //--------------------------------------------------------------------------\n\n  @Listen(\"calciteRadioButtonChange\")\n  radioButtonChangeHandler(event: CustomEvent): void {\n    this.selectedItem = event.target as HTMLCalciteRadioButtonElement;\n    this.calciteRadioButtonGroupChange.emit();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n\n  render(): VNode {\n    return (\n      <Host role=\"radiogroup\">\n        <div\n          aria-errormessage={IDS.validationMessage}\n          aria-invalid={toAriaBoolean(this.status === \"invalid\")}\n          class={CSS.itemWrapper}\n        >\n          <slot />\n        </div>\n        {this.validationMessage && this.status === \"invalid\" ? (\n          <Validation\n            icon={this.validationIcon}\n            id={IDS.validationMessage}\n            message={this.validationMessage}\n            scale={this.scale}\n            status={this.status}\n          />\n        ) : null}\n      </Host>\n    );\n  }\n}\n",":host {\n  @apply flex flex-col;\n}\n\n:host > .item-wrapper {\n  @apply flex;\n  max-inline-size: 100vw;\n}\n\n:host([layout=\"horizontal\"]) > .item-wrapper {\n  @apply flex-row flex-wrap;\n}\n\n:host([layout=\"horizontal\"][scale=\"s\"]) > .item-wrapper {\n  @apply gap-x-4;\n}\n\n:host([layout=\"horizontal\"][scale=\"m\"]) > .item-wrapper {\n  @apply gap-x-5;\n}\n\n:host([layout=\"horizontal\"][scale=\"l\"]) > .item-wrapper {\n  @apply gap-x-6;\n}\n\n:host([layout=\"vertical\"]) > .item-wrapper {\n  @apply flex-col;\n  inline-size: fit-content;\n}\n\n:host([scale=\"s\"]) calcite-input-message {\n  --calcite-input-message-spacing-value: calc(var(--calcite-spacing-xxs) * -1);\n}\n\n:host([scale=\"m\"]) calcite-input-message {\n  --calcite-input-message-spacing-value: calc(var(--calcite-spacing-sm) * -1);\n}\n\n:host([scale=\"l\"]) calcite-input-message {\n  --calcite-input-message-spacing-value: calc(var(--calcite-spacing-md) * -1);\n}\n\n@include form-validation-message();\n@include base-component();\n","export const CSS = {\n  icon: \"icon\",\n  flipRtl: \"flip-rtl\",\n};\n","import { CalciteIconPath } from \"@esri/calcite-ui-icons\";\nimport { getAssetPath } from \"@stencil/core\";\nimport { Scale } from \"../interfaces\";\nimport { IconNameOrString } from \"./interfaces\";\n\nexport interface FetchIconProps {\n  icon: IconNameOrString;\n  scale: Scale;\n}\n\n/**\n * Icon data cache.\n * Exported for testing purposes.\n *\n * @private\n */\nexport const iconCache: Record<string, CalciteIconPath> = {};\n\n/**\n * Icon request cache.\n * Exported for testing purposes.\n *\n * @private\n */\nexport const requestCache: Record<string, Promise<CalciteIconPath>> = {};\n\nexport const scaleToPx: Record<Scale, number> = {\n  s: 16,\n  m: 24,\n  l: 32,\n};\n\nfunction generateIconId({ icon, scale }: FetchIconProps): string {\n  const size = scaleToPx[scale];\n  const name = normalizeIconName(icon);\n  const filled = name.charAt(name.length - 1) === \"F\";\n  const iconName = filled ? name.substring(0, name.length - 1) : name;\n\n  return `${iconName}${size}${filled ? \"F\" : \"\"}`;\n}\n\nexport async function fetchIcon(props: FetchIconProps): Promise<CalciteIconPath> {\n  const cachedIconKey = generateIconId(props);\n  const cachedIconData = getCachedIconDataByKey(cachedIconKey);\n\n  if (cachedIconData) {\n    return cachedIconData;\n  }\n\n  if (!requestCache[cachedIconKey]) {\n    requestCache[cachedIconKey] = fetch(getAssetPath(`./assets/icon/${cachedIconKey}.json`))\n      .then((resp) => resp.json())\n      .catch(() => {\n        console.error(`\"${cachedIconKey}\" is not a valid calcite-ui-icon name`);\n        return \"\";\n      });\n  }\n\n  const path = await requestCache[cachedIconKey];\n  iconCache[cachedIconKey] = path;\n\n  return path;\n}\n\n/**\n * Util to retrieve cached icon data based on icon name and scale.\n *\n * @param props – icon properties\n */\nexport function getCachedIconData(props: FetchIconProps): CalciteIconPath {\n  return getCachedIconDataByKey(generateIconId(props));\n}\n\nfunction getCachedIconDataByKey(id: string): CalciteIconPath {\n  return iconCache[id];\n}\n\n/**\n * Normalize the icon name to match the path data module exports.\n * Exported for testing purposes.\n *\n * @param name – an icon name that can be either kebab or camel-cased\n * @private\n */\nexport function normalizeIconName(name: string): string {\n  const numberLeadingName = !isNaN(Number(name.charAt(0)));\n  const parts = name.split(\"-\");\n  const kebabCased = parts.length > 0;\n\n  if (kebabCased) {\n    const firstNonDigitInPartPattern = /[a-z]/i;\n\n    name = parts\n      .map((part, partIndex) => {\n        return part.replace(firstNonDigitInPartPattern, function replacer(match, offset) {\n          const isFirstCharInName = partIndex === 0 && offset === 0;\n\n          if (isFirstCharInName) {\n            return match;\n          }\n\n          return match.toUpperCase();\n        });\n      })\n      .join(\"\");\n  }\n\n  return numberLeadingName ? `i${name}` : name;\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-ui-icon-color: [Deprecated] Use `--calcite-icon-color`. Specifies the component's color. Defaults to current color.\n * @prop --calcite-icon-color: Specifies the component's color. Defaults to current color.\n */\n\n:host {\n  @apply text-color-icon inline-flex;\n}\n\n$icon-size-s: 16px;\n$icon-size-m: 24px;\n$icon-size-l: 32px;\n\n:host([scale=\"s\"]) {\n  inline-size: $icon-size-s;\n  block-size: $icon-size-s;\n  min-inline-size: $icon-size-s;\n  min-block-size: $icon-size-s;\n}\n\n:host([scale=\"m\"]) {\n  inline-size: $icon-size-m;\n  block-size: $icon-size-m;\n  min-inline-size: $icon-size-m;\n  min-block-size: $icon-size-m;\n}\n\n:host([scale=\"l\"]) {\n  inline-size: $icon-size-l;\n  block-size: $icon-size-l;\n  min-inline-size: $icon-size-l;\n  min-block-size: $icon-size-l;\n}\n\n.flip-rtl {\n  transform: scaleX(-1);\n}\n\n.svg {\n  @apply block;\n}\n\n@include base-component();\n","import { CalciteIconPath, CalciteMultiPathEntry } from \"@esri/calcite-ui-icons\";\nimport { Component, Element, h, Host, Prop, State, VNode, Watch } from \"@stencil/core\";\nimport { getElementDir, toAriaBoolean } from \"../../utils/dom\";\nimport { createObserver } from \"../../utils/observers\";\nimport { Scale } from \"../interfaces\";\nimport { isBrowser } from \"../../utils/browser\";\nimport { CSS } from \"./resources\";\nimport { fetchIcon, getCachedIconData, scaleToPx } from \"./utils\";\nimport { IconNameOrString } from \"./interfaces\";\n\n@Component({\n  tag: \"calcite-icon\",\n  styleUrl: \"icon.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class Icon {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Displays a specific icon.\n   *\n   * @see [Icons](https://esri.github.io/calcite-ui-icons)\n   */\n  @Prop({\n    reflect: true,\n  })\n  icon: IconNameOrString = null;\n\n  /**\n   * When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).\n   */\n  @Prop({\n    reflect: true,\n  })\n  flipRtl = false;\n\n  /**\n   * Specifies the size of the component.\n   */\n  @Prop({\n    reflect: true,\n  })\n  scale: Scale = \"m\";\n\n  /**\n   * Accessible name for the component.\n   *\n   * It is recommended to set this value if your icon is semantic.\n   */\n  @Prop()\n  textLabel: string;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    if (!this.visible) {\n      this.waitUntilVisible(() => {\n        this.visible = true;\n        this.loadIconPathData();\n      });\n    }\n  }\n\n  disconnectedCallback(): void {\n    this.intersectionObserver?.disconnect();\n    this.intersectionObserver = null;\n  }\n\n  render(): VNode {\n    const { el, flipRtl, pathData, scale, textLabel } = this;\n    const dir = getElementDir(el);\n    const size = scaleToPx[scale];\n    const semantic = !!textLabel;\n    const paths = [].concat(pathData || \"\");\n    return (\n      <Host\n        aria-hidden={toAriaBoolean(!semantic)}\n        aria-label={semantic ? textLabel : null}\n        role={semantic ? \"img\" : null}\n      >\n        <svg\n          aria-hidden=\"true\"\n          class={{\n            [CSS.flipRtl]: dir === \"rtl\" && flipRtl,\n            svg: true,\n          }}\n          fill=\"currentColor\"\n          height=\"100%\"\n          viewBox={`0 0 ${size} ${size}`}\n          width=\"100%\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          {paths.map((path: string | CalciteMultiPathEntry) =>\n            typeof path === \"string\" ? (\n              <path d={path} />\n            ) : (\n              <path d={path.d} opacity={\"opacity\" in path ? path.opacity : 1} />\n            ),\n          )}\n        </svg>\n      </Host>\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteIconElement;\n\n  private intersectionObserver: IntersectionObserver;\n\n  @State()\n  private pathData: CalciteIconPath;\n\n  @State()\n  private visible = false;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  @Watch(\"icon\")\n  @Watch(\"scale\")\n  private async loadIconPathData(): Promise<void> {\n    const { icon, scale, visible } = this;\n\n    if (!isBrowser() || !icon || !visible) {\n      return;\n    }\n\n    const fetchIconProps = { icon, scale };\n    const pathData = getCachedIconData(fetchIconProps) || (await fetchIcon(fetchIconProps));\n\n    // While the fetchIcon method is awaiting response, the icon requested can change. This check is to verify the response received belongs to the current icon.\n    if (icon !== this.icon) {\n      return;\n    }\n\n    this.pathData = pathData;\n  }\n\n  private waitUntilVisible(callback: () => void): void {\n    this.intersectionObserver = createObserver(\n      \"intersection\",\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            this.intersectionObserver.disconnect();\n            this.intersectionObserver = null;\n            callback();\n          }\n        });\n      },\n      { rootMargin: \"50px\" },\n    );\n\n    if (!this.intersectionObserver) {\n      callback();\n      return;\n    }\n\n    this.intersectionObserver.observe(this.el);\n  }\n}\n","export const StatusIconDefaults = {\n  valid: \"check-circle\",\n  invalid: \"exclamation-mark-triangle\",\n  idle: \"information\",\n} as const;\n","import { Component, Element, h, Host, Prop, VNode, Watch } from \"@stencil/core\";\nimport { setRequestedIcon } from \"../../utils/dom\";\nimport { Scale, Status } from \"../interfaces\";\nimport { IconNameOrString } from \"../icon/interfaces\";\nimport { StatusIconDefaults } from \"./interfaces\";\n\n/**\n * @slot - A slot for adding text.\n */\n@Component({\n  tag: \"calcite-input-message\",\n  styleUrl: \"input-message.scss\",\n  shadow: true,\n})\nexport class InputMessage {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /** Specifies an icon to display. */\n  @Prop({ reflect: true }) icon: IconNameOrString | boolean;\n\n  /** When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`). */\n  @Prop({ reflect: true }) iconFlipRtl = false;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /** Specifies the status of the input field, which determines message and icons. */\n  @Prop({ reflect: true }) status: Status = \"idle\";\n\n  @Watch(\"status\")\n  @Watch(\"icon\")\n  handleIconEl(): void {\n    this.requestedIcon = setRequestedIcon(StatusIconDefaults, this.icon, this.status);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    this.requestedIcon = setRequestedIcon(StatusIconDefaults, this.icon, this.status);\n  }\n\n  render(): VNode {\n    const hidden = this.el.hidden;\n    return (\n      <Host calcite-hydrated-hidden={hidden}>\n        {this.renderIcon(this.requestedIcon)}\n        <slot />\n      </Host>\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteInputMessageElement;\n\n  /** the computed icon to render */\n  private requestedIcon?: IconNameOrString;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  private renderIcon(iconName: IconNameOrString): VNode {\n    if (iconName) {\n      return (\n        <calcite-icon\n          class=\"calcite-input-message-icon\"\n          flipRtl={this.iconFlipRtl}\n          icon={iconName}\n          scale=\"s\"\n        />\n      );\n    }\n  }\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-input-message-spacing-value: The top margin spacing above the component.\n */\n\n:host {\n  @apply text-color-1 transition-default box-border flex h-auto w-full items-center font-medium opacity-100;\n  --calcite-input-message-spacing-value: theme(\"spacing.1\");\n  margin-block-start: var(--calcite-input-message-spacing-value);\n}\n\n.calcite-input-message-icon {\n  @apply transition-default pointer-events-none inline-flex flex-shrink-0;\n  margin-inline-end: theme(\"margin.2\");\n}\n\n:host([status=\"invalid\"]) .calcite-input-message-icon {\n  color: var(--calcite-color-status-danger);\n}\n\n:host([status=\"warning\"]) .calcite-input-message-icon {\n  color: var(--calcite-color-status-warning);\n}\n\n:host([status=\"valid\"]) .calcite-input-message-icon {\n  color: var(--calcite-color-status-success);\n}\n\n:host([status=\"idle\"]) .calcite-input-message-icon {\n  color: var(--calcite-color-brand);\n}\n\n:host([scale=\"s\"]) {\n  @apply text-n3h;\n}\n\n:host([scale=\"m\"]) {\n  @apply text-n2h;\n}\n\n:host([scale=\"l\"]) {\n  @apply text-n1h;\n}\n\n@include base-component();\n","import { forceUpdate } from \"@stencil/core\";\nimport { isBrowser } from \"./browser\";\n\n/**\n * This helper adds support for knowing when a component has been loaded.\n *\n * Related issue: https://github.com/Esri/calcite-design-system/issues/5369\n * Could be related to Stencil.js issue: https://github.com/ionic-team/stencil/issues/3580\n *\n * Implementing\n *\n * ```\n * export class MyComponent implements LoadableComponent { }\n * ```\n *\n * ```\n *  //--------------------------------------------------------------------------\n *  //\n *  //  Lifecycle\n *  //\n *  //--------------------------------------------------------------------------\n *\n *  componentWillLoad(): void {\n *    setUpLoadableComponent(this);\n *  }\n *\n *  componentDidLoad(): void {\n *    setComponentLoaded(this);\n *  }\n *\n *  // --------------------------------------------------------------------------\n *  //\n *  //  Methods\n *  //\n *  // --------------------------------------------------------------------------\n *\n *  async myMethod(): Promise<void> {\n *    await componentLoaded(this);\n *  }\n * ```\n */\nexport interface LoadableComponent {\n  /**\n   * Stencil lifecycle method.\n   * https://stenciljs.com/docs/component-lifecycle#componentwillload\n   *\n   * Called once just after the component is first connected to the DOM. Since this method is only called once, it's a good place to load data asynchronously and to setup the state without triggering extra re-renders.\n   */\n  componentWillLoad: () => Promise<void> | void;\n\n  /**\n   * Stencil lifecycle method.\n   * https://stenciljs.com/docs/component-lifecycle#componentdidload\n   *\n   * Called once just after the component is fully loaded and the first render() occurs.\n   */\n  componentDidLoad: () => Promise<void> | void;\n}\n\nconst resolveMap = new WeakMap<LoadableComponent, (value: void | PromiseLike<void>) => void>();\n\nconst promiseMap = new WeakMap<LoadableComponent, Promise<void>>();\n\n/**\n * This helper util sets up the component for the ability to know when the component has been loaded.\n *\n * This should be used in the `componentWillLoad` lifecycle hook.\n *\n * ```\n * componentWillLoad(): void {\n *   setUpLoadableComponent(this);\n * }\n * ```\n *\n * @param component\n */\nexport function setUpLoadableComponent(component: LoadableComponent): void {\n  promiseMap.set(component, new Promise((resolve) => resolveMap.set(component, resolve)));\n}\n\n/**\n * This helper util lets the loadable component know that it is now loaded.\n *\n * This should be used in the `componentDidLoad` lifecycle hook.\n *\n * ```\n * componentDidLoad(): void {\n *   setComponentLoaded(this);\n * }\n * ```\n *\n * @param component\n */\nexport function setComponentLoaded(component: LoadableComponent): void {\n  resolveMap.get(component)();\n}\n\n/**\n * This helper util can be used to ensure a component has been loaded (The \"componentDidLoad\" Stencil lifecycle method has been called).\n *\n * Requires requires `LoadableComponent` to be implemented.\n *\n * A component developer can await this method before proceeding with any logic that requires a component to be loaded first.\n *\n * ```\n * async myMethod(): Promise<void> {\n *   await componentLoaded(this);\n * }\n * ```\n *\n * @param component\n * @returns Promise<void>\n */\nexport function componentLoaded(component: LoadableComponent): Promise<void> {\n  return promiseMap.get(component);\n}\n\n/**\n * This helper util can be used to ensuring the component is loaded and rendered by the browser (The \"componentDidLoad\" Stencil lifecycle method has been called and any internal elements are focusable).\n *\n * Requires `LoadableComponent` to be implemented.\n *\n * A component developer can await this method before proceeding with any logic that requires a component to be loaded first and then an internal element be focused.\n *\n * ```\n * async setFocus(): Promise<void> {\n *   await componentFocusable(this);\n *   this.internalElement?.focus();\n * }\n * ```\n *\n * @param component\n * @returns Promise<void>\n */\nexport async function componentFocusable(component: LoadableComponent): Promise<void> {\n  await componentLoaded(component);\n\n  if (!isBrowser()) {\n    return;\n  }\n\n  forceUpdate(component);\n  return new Promise((resolve) => requestAnimationFrame(() => resolve()));\n}\n","import { isBrowser } from \"./browser\";\n\nexport interface ExtendedMutationObserver extends MutationObserver {\n  new: () => ExtendedMutationObserver;\n  unobserve: (target: Node) => void;\n}\n\ndeclare const ExtendedMutationObserver: {\n  prototype: ExtendedMutationObserver;\n  new (callback: MutationCallback): ExtendedMutationObserver;\n};\n\ntype ObserverType = \"mutation\" | \"intersection\" | \"resize\";\n\ntype ObserverCallbackType<T extends ObserverType> = T extends \"mutation\"\n  ? MutationCallback\n  : T extends \"intersection\"\n    ? IntersectionObserverCallback\n    : T extends \"resize\"\n      ? ResizeObserverCallback\n      : never;\n\ntype ObserverOptions<T extends ObserverType> = T extends \"intersection\" ? IntersectionObserverInit : never;\n\ntype ObserverClassType<T extends ObserverType> = T extends \"mutation\"\n  ? typeof ExtendedMutationObserver\n  : T extends \"intersection\"\n    ? typeof IntersectionObserver\n    : T extends \"resize\"\n      ? typeof ResizeObserver\n      : never;\n\ntype ObserverInstanceType<T extends ObserverType> = T extends \"mutation\"\n  ? ExtendedMutationObserver\n  : T extends \"intersection\"\n    ? IntersectionObserver\n    : T extends \"resize\"\n      ? ResizeObserver\n      : never;\n\n/**\n * This utility ensures observers are created only for browser contexts.\n *\n * @param type - the type of observer to create\n * @param callback - the observer callback\n * @param options - the observer options\n */\nexport function createObserver<T extends ObserverType>(\n  type: T,\n  callback: ObserverCallbackType<T>,\n  options?: ObserverOptions<T>,\n): ObserverInstanceType<T> | undefined {\n  if (!isBrowser()) {\n    return undefined;\n  }\n\n  const Observer = getObserver<T>(type);\n  return new Observer(callback as any, options) as any;\n}\n\nfunction getObserver<T extends ObserverType>(type: T): ObserverClassType<T> {\n  // based on https://github.com/whatwg/dom/issues/126#issuecomment-1049814948\n  class ExtendedMutationObserver extends window.MutationObserver implements ExtendedMutationObserver {\n    private observedEntry: Array<{\n      target: Node;\n      options?: MutationObserverInit;\n    }> = [];\n\n    private readonly callback: MutationCallback;\n\n    constructor(callback: MutationCallback) {\n      super(callback);\n      this.callback = callback;\n    }\n\n    observe(target: Node, options?: MutationObserverInit): void {\n      this.observedEntry.push({ target, options });\n\n      return super.observe(target, options);\n    }\n\n    unobserve(target: Node): void {\n      const newObservedEntries = this.observedEntry.filter((observed) => observed.target !== target);\n      this.observedEntry = [];\n      this.callback(super.takeRecords(), this);\n      this.disconnect();\n      newObservedEntries.forEach((observed) => this.observe(observed.target, observed.options));\n    }\n  }\n\n  return (function () {\n    return (\n      type === \"intersection\"\n        ? window.IntersectionObserver\n        : type === \"mutation\"\n          ? ExtendedMutationObserver\n          : window.ResizeObserver\n    ) as any;\n  })();\n}\n"],"names":["CSS","Validation","_ref","scale","status","id","icon","message","h","class","IDS","RadioButtonGroup","proxyCustomElement","HTMLElement","mutationObserver","createObserver","this","passPropsToRadioButtons","radioButtons","Array","from","el","querySelectorAll","selectedItem","find","radioButton","checked","length","forEach","disabled","hidden","name","required","handleHiddenChange","onDisabledChange","onLayoutChange","onScaleChange","connectedCallback","observe","childList","subtree","componentWillLoad","setUpLoadableComponent","componentDidLoad","setComponentLoaded","disconnectedCallback","disconnect","getFocusableRadioButton","radiobutton","setFocus","componentFocusable","radioButtonChangeHandler","event","target","calciteRadioButtonGroupChange","emit","render","Host","key","role","toAriaBoolean","validationMessage","validationIcon","iconCache","requestCache","scaleToPx","s","m","l","generateIconId","size","numberLeadingName","isNaN","Number","charAt","parts","split","firstNonDigitInPartPattern","map","part","partIndex","replace","match","offset","toUpperCase","join","normalizeIconName","filled","substring","getCachedIconDataByKey","Icon","visible","waitUntilVisible","loadIconPathData","intersectionObserver","flipRtl","pathData","textLabel","dir","getElementDir","semantic","paths","concat","svg","fill","height","viewBox","width","xmlns","path","d","opacity","isBrowser","fetchIconProps","async","props","cachedIconKey","cachedIconData","fetch","getAssetPath","then","resp","json","catch","console","error","fetchIcon","callback","entries","entry","isIntersecting","rootMargin","StatusIconDefaults","valid","invalid","idle","InputMessage","handleIconEl","requestedIcon","setRequestedIcon","renderIcon","iconName","iconFlipRtl","resolveMap","WeakMap","promiseMap","component","set","Promise","resolve","get","componentLoaded","forceUpdate","requestAnimationFrame","type","options","Observer","ExtendedMutationObserver","window","MutationObserver","constructor","super","observedEntry","push","unobserve","newObservedEntries","filter","observed","takeRecords","IntersectionObserver","ResizeObserver","getObserver"],"sourceRoot":""}