{"version":3,"file":"static/js/14701.113763ce.chunk.js","mappings":"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","sources":["../node_modules/@arcgis/charts-components/dist/esm/charts-histogram-1705b40c.js"],"sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See LICENSE.md for details.\n * v4.31.1\n */\nimport { r as registerInstance, c as createEvent, h, H as Host, a as getElement } from './index-a70f9e3a.js';\nimport { H as HTMLClasses, u as updateLegendPosition, b as updateLegendVisibility, r as resetAxesBounds, f as fetchErrorsStrings, c as fetchCommonStrings, p as promise, g as gatherComponentOptions, d as gatherComponentGlobalOptions, m as maximumNumberOfSimultaneousUpdates, i as isValidDataSource, e as addLayerFilterListener, h as addLayerRendererListener, j as addExtentChangeListener, z as zY, k as ArcgisChartsNotifyPanel } from './config-update-5d4b05b1.js';\nimport { L as Lm, A as Am, E as Em, M as Mc, W as WebChartTypes, b as El, u as updateActionBarStates, S as Slot, o as onActionBarSlotChange, j as jc, e as WebChartVersionStatus, K as Kr } from './action-bar-utils-537f9a25.js';\n\nconst chartsHistogramCss = \".hide{display:none}.am5-modal{width:100%;height:100%;position:absolute;z-index:100000;top:0px;left:0px}.am5-modal-curtain{top:0px;left:0px;width:100%;height:100%;position:absolute;background:rgba(255, 255, 255, 0.5);z-index:100}.am5-modal-wrapper{top:0px;left:0px;width:100%;height:100%;position:absolute;display:flex;align-items:center;justify-content:center;white-space:nowrap;background:rgba(255, 255, 255, 0.5);z-index:101}.am5-modal-content{display:inline-block;padding:1.2em;vertical-align:middle;text-align:left;white-space:normal;background:rgb(255, 255, 255);border-radius:4px;box-shadow:rgba(0, 0, 0, 0.45) 0px 0px 36px 0px;color:rgb(0, 0, 0)}.arcgis-charts-modal{box-shadow:none !important}.arcgis-charts-modal-header{background-color:rgba(0, 0, 0, 0.05);font-weight:bold;padding:4px 4px 4px 4px}.show{display:block}.notifyPanel{flex:0 1 auto}.disable-interactions{pointer-events:none}.histogramSeries{flex-grow:1;overflow-y:hidden}.histogramSeries>div{justify-content:center;align-items:center}.histogramSeries .arcgis-charts-modal-inside{padding:1em;padding-left:0}.histogramSeries .arcgis-charts-modal-inside ol{padding-left:2em}.histogramSeries .arcgis-charts-modal-curtain{width:100%;height:100%;position:absolute;top:0px;left:0px;z-index:2001;background-color:rgb(255, 255, 255);opacity:0.5;opacity:1}.histogramSeries .arcgis-charts-modal-content{background:rgba(255, 255, 255, 0.8);color:rgb(0, 0, 0);display:inline-block;position:absolute;top:0px;left:0px;max-width:90%;max-height:90%;overflow:visible;z-index:2002;position:absolute;max-width:90%;max-height:90%;width:auto !important;height:auto !important;margin:auto !important;inset:auto !important;left:auto !important;top:auto !important}.histogramSeries .arcgis-charts-modal-header{display:block;width:100%;min-height:1.8em;background:rgba(0, 0, 0, 0.05)}.histogramSeries .arcgis-charts-modal-close{display:block;position:absolute;top:0.3em;right:0.3em;background:url(\\\"data:image/svg+xml;charset=utf-8;base64,PHN2ZyBoZWlnaHQ9IjUxMiIgdmVyc2lvbj0iMSIgdmlld0JveD0iMCAwIDUxMiA1MTIiIHdpZHRoPSI1MTIiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyI+PHBhdGggZD0iTTQ0NS4yIDEwOS4ybC00Mi40LTQyLjRMMjU2IDIxMy42IDEwOS4yIDY2LjhsLTQyLjQgNDIuNEwyMTMuNiAyNTYgNjYuOCA0MDIuOGw0Mi40IDQyLjRMMjU2IDI5OC40bDE0Ni44IDE0Ni44IDQyLjQtNDIuNEwyOTguNCAyNTYiLz48L3N2Zz4=\\\") center center/80% no-repeat rgba(100, 100, 100, 0.1);width:1.2em;height:1.2em;cursor:pointer}.histogramSeries .arcgis-charts-modal-title{font-weight:bold;font-size:110%;padding:0.5em 1.2em 0.5em 1em}:host{width:var(--charts-histogram-width, var(--arcgis-charts-default-width));height:var(--charts-histogram-height, var(--arcgis-charts-default-height));display:flex;flex-direction:row}\";\nconst ArcgisChartsHistogramStyle0 = chartsHistogramCss;\n\nconst ArcGISChartsHistogram = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.arcgisRuntimeError = createEvent(this, \"arcgisRuntimeError\", 7);\n        this.arcgisDataProcessError = createEvent(this, \"arcgisDataProcessError\", 7);\n        this.arcgisDataProcessComplete = createEvent(this, \"arcgisDataProcessComplete\", 7);\n        this.arcgisLegendItemVisibilityChange = createEvent(this, \"arcgisLegendItemVisibilityChange\", 7);\n        this.arcgisUpdateComplete = createEvent(this, \"arcgisUpdateComplete\", 7);\n        this.arcgisBadDataWarningRaise = createEvent(this, \"arcgisBadDataWarningRaise\", 7);\n        this.arcgisSeriesColorChange = createEvent(this, \"arcgisSeriesColorChange\", 7);\n        this.arcgisAxesMinMaxChange = createEvent(this, \"arcgisAxesMinMaxChange\", 7);\n        this.arcgisSelectionComplete = createEvent(this, \"arcgisSelectionComplete\", 7);\n        /**\n         * When `true`, the next round of update will be skipped.\n         * @type {boolean}\n         * @category Private\n         * @default false\n         */\n        this.skipNextUpdate = false;\n        /**\n         * List of props which should not trigger a render when changed\n         * @type {string[]}\n         * @category Private\n         */\n        this.noRenderProps = [\"disableInteractions\", \"legendPosition\", \"legendVisibility\", \"view\"];\n        /**\n         * List of props which should trigger a data update\n         * @type {string[]}\n         * @category Private\n         */\n        this.dataUpdateNeededProps = [\"forceDataUpdate\", \"runtimeDataFilters\"];\n        /**\n         * List of all the properties updated since the last update. Useful when multiple properties are updated\n         * within the same time frame, while some of them require some extra logic to be applied.\n         * @type {Set<string>}\n         * @category Private\n         */\n        this.updatedProps = new Set();\n        this.config = undefined;\n        this.actionMode = undefined;\n        this.cursorRange = undefined;\n        this.legendPosition = undefined;\n        this.legendVisibility = undefined;\n        this.view = undefined;\n        this.layer = undefined;\n        this.selectionData = undefined;\n        this.returnSelectionOIDs = undefined;\n        this.returnSelectionIndexes = undefined;\n        this.filterBySelection = undefined;\n        this.messageOptions = undefined;\n        this.errorPolicy = Lm.Throw;\n        this.disableInteractions = undefined;\n        this.queueChartCreation = undefined;\n        this.useAnimatedCharts = undefined;\n        this.hideLicenceWatermark = undefined;\n        this.enableResponsiveFeatures = undefined;\n        this.autoDisposeChart = undefined;\n        this.placeholder = undefined;\n        this.selectionTheme = undefined;\n        this.tooltipFormatter = undefined;\n        this.dataLabelFormatter = undefined;\n        this.guideTooltipFormatter = undefined;\n        this.xAxisLabelFormatter = undefined;\n        this.yAxisLabelFormatter = undefined;\n        this.disableTogglingLegendItems = undefined;\n        this.hideLoaderAnimation = undefined;\n        this.runtimeDataFilters = undefined;\n        this.usePopupTemplateFieldsInfo = undefined;\n        this.layerFilterChangePolicy = Am.Refresh;\n        this.layerRendererChangePolicy = Em.Refresh;\n        this.ignoreViewExtent = undefined;\n        this.showNotifyPanel = false;\n    }\n    /**\n     * Listener on event coming from the chart container indicating the chart data has been processed\n     * emitting an event carrying the data\n     * @param {CustomEvent<WebChartHistogramDataItem>} event The event carrying the chart data processed by the core\n     * @category Custom-event handler\n     */\n    handleChartOutputDataChange(event) {\n        this.arcgisDataProcessComplete.emit(event.detail);\n    }\n    /**\n     * Listener on event coming from the chart container indicating a legend item visibility has been changed\n     * Emitting an event carrying the item id and its new visibility\n     * @param {CustomEvent} event The event carrying the item id and its new visibility\n     * @category Custom-event handler\n     */\n    handleLegendItemVisibilityChanged(event) {\n        this.arcgisLegendItemVisibilityChange.emit(event.detail);\n    }\n    /**\n     * Listener on event coming from the chart container indicating a chart is updated\n     * @param {CustomEvent} event The event carrying the ValidationStatus\n     * @category Custom-event handler\n     */\n    handleUpdateCompleted(event) {\n        this.arcgisUpdateComplete.emit(event.detail);\n    }\n    /**\n     * Listener on event coming from the chart container indicating an error in the data set\n     * @param {CustomEvent} event The event carrying details about the error\n     * @category Custom-event handler\n     */\n    handleBadDataWarningRaise(event) {\n        this.arcgisBadDataWarningRaise.emit(event.detail);\n    }\n    /**\n     * Listener on event coming from the chart container indicating the chart series color\n     * have been assigned\n     * @param {CustomEvent<SeriesSymbolsMap>} event The event carrying the series colors\n     * @category Custom-event handler\n     */\n    handleSeriesColorsChange(event) {\n        this.arcgisSeriesColorChange.emit(event.detail);\n    }\n    /**\n     * Listener on event coming from the chart container indicating the chart axes\n     * min and max values have been computed\n     * @param {CustomEvent} event The event carrying the axes min and max\n     * @category Custom-event handler\n     */\n    handleAxesMinMaxChange(event) {\n        this.arcgisAxesMinMaxChange.emit(event.detail);\n    }\n    /**\n     * Listener on event coming from the chart container\n     * on selection of one or multiple columns\n     * @param {CustomEvent<SelectionData>} event The event carrying the selected elements\n     * @category Custom-event handler\n     */\n    handleSelection(event) {\n        this.arcgisSelectionComplete.emit(event.detail);\n    }\n    /**\n     * Listener on event coming from the closure of a calcite-alert.\n     * The handler helps keeping in sync the boolean `showNotifyPanel` with the panel's state.\n     * @param {CustomEvent} event The event carrying the alert's details\n     * @category Custom-event handler\n     */\n    handleAlertClosed(event) {\n        // If the calcite-alert (notify panel) from this component is getting closed, we flag it\n        if (event.target === this.el) {\n            // we don't want the component to re-render so we skip the next update\n            this.skipNextUpdate = true;\n            this.showNotifyPanel = false;\n        }\n    }\n    /**\n     * Called every time the view prop is updated.\n     * Add a listener to it to keep the chart in sync.\n     * @param {MapView | SceneView | undefined} newView The new view\n     * @param {MapView | SceneView | undefined} oldView The old view\n     * @category Watch handler\n     */\n    async viewChange(newView, oldView) {\n        await this.setExtentChangeListener();\n        // The \"view\" property is flagged as a non-render prop to avoid an unnecessary update when the\n        // view is assigned to the component (the update will happen through the view listeners), so we\n        // only need to explicitly ask for a refresh when the view is removed from the component\n        if (oldView !== undefined && newView === undefined) {\n            await this.refresh();\n        }\n    }\n    /**\n     * Called every time the layer prop is updated.\n     * Adds listeners to it to keep the chart in sync.\n     * @category Watch handler\n     */\n    async layerChange() {\n        await this.addLayerListeners();\n    }\n    /**\n     * Called every time the `runtimeDataFilters` prop is updated.\n     * The property name is added to the `updatedProps` list in order to trigger later a data update.\n     * The mechanism is also done by `componentShouldUpdate` but doesn't always work when multiple properties are\n     * updated at the same time (e.g. only 1 `componentShouldUpdate` is called while 2 properties were changed).\n     * For that reason all the properties implying a data update (see this.dataUpdateNeededProps) need a @Watch\n     * to ensure the chart update to consider them properly.\n     * Refer to https://devtopia.esri.com/WebGIS/arcgis-charts/issues/6095\n     * @category Watch handler\n     */\n    async runtimeDataFiltersChange() {\n        this.updatedProps.add(\"runtimeDataFilters\");\n    }\n    /**\n     * Called every time the disableInteractions prop is updated.\n     * Helps setting a css class on the chart to either enable or disable the chart interactions.\n     * @param {boolean} newValue The new value of the disableInteractions prop\n     */\n    async disableInteractionsChange(newValue) {\n        // Toggling the interactions only for Firefox. (see issue #2466 for more details)\n        if (navigator.userAgent.search(\"Firefox\") !== -1) {\n            if (newValue) {\n                this.chartRef?.classList.add(HTMLClasses.DisableInteractions);\n            }\n            else {\n                this.chartRef?.classList.remove(HTMLClasses.DisableInteractions);\n            }\n        }\n    }\n    /**\n     * Called every time the position of the legend is updated\n     * @param {WebChartLegendPositions} newLegendPosition The new position of the legend\n     * @category Watch handler\n     */\n    legendPositionChange(newLegendPosition) {\n        this.config = updateLegendPosition(newLegendPosition, this.config);\n    }\n    /**\n     * Called every time the visibility of the legend is updated\n     * @param {boolean} newLegendVisibility The new visibility of the legend\n     * @category Watch handler\n     */\n    legendVisibilityChange(newLegendVisibility) {\n        this.config = updateLegendVisibility(newLegendVisibility, this.config);\n    }\n    /**\n     * Called every time the filter by selection is updated.\n     * Resets the axes min/max.\n     * @category Watch handler\n     */\n    filterBySelectionChanged() {\n        this.config = resetAxesBounds(this.config);\n    }\n    /**\n     * Called every time when the property `layerFilterChangePolicy` changes\n     * Adds a listener on the layer's filter when the property is `true`, removes it otherwise.\n     * @param newRefreshOnLayerFilter The new value of refresh on layer filter\n     * @category Watch handler\n     */\n    layerFilterChangePolicyCallBack(newRefreshOnLayerFilter) {\n        if (newRefreshOnLayerFilter !== Am.Ignore) {\n            this.setLayerFilterListener();\n        }\n        else {\n            this.removeLayerFilterListener();\n        }\n    }\n    /**\n     * Called every time when the property `layerRendererChangePolicy` changes\n     * Adds a listener on the layer's renderer when the property is `true`, removes it otherwise.\n     * @param {LayerRendererChangePolicy | undefined} newRefreshOnLayerRenderer The new value of refresh on layer renderer\n     * @category Watch handler\n     */\n    layerRendererChangePolicyCallBack(newRefreshOnLayerRenderer) {\n        if (newRefreshOnLayerRenderer !== Em.Ignore) {\n            this.setLayerRendererListener();\n        }\n        else {\n            this.removeLayerRendererListener();\n        }\n    }\n    /**\n     * Notify method allows passing external messages to the chart component.\n     * It can be used to pass validation or information messages.\n     * In a situation where a config update is overriding your notification modal,\n     * consider waiting for the `arcgisUpdateComplete` event.\n     * @param {string} [message] The message to display\n     * @param {string} [heading] The heading of the message\n     * @param {NotifyOptions} [options] The options to apply to the notification\n     * @category Public\n     */\n    async notify(message, heading, options) {\n        if (this.chart !== undefined) {\n            this.chart.notify(message, heading, options);\n        }\n        await Promise.resolve(undefined);\n    }\n    /**\n     * Triggers an alert to display an error message.\n     * @category Public\n     * @param {string | undefined} [errorMessage] The error message to display\n     */\n    async errorAlert(errorMessage) {\n        if (this.errorPolicy === Lm.Throw) {\n            this.notifyHeading = this.errorStrings.errorHeading;\n            this.notifyMessage = errorMessage;\n            this.notifyOptions = {\n                kind: \"danger\",\n                autoClose: true,\n                active: true,\n            };\n            this.showNotifyPanel = true;\n        }\n    }\n    /**\n     * Resets the chart zoom to bring it back to full extent\n     * @category Public\n     */\n    async resetZoom() {\n        if (this.chart !== undefined) {\n            this.chart.resetZoom();\n        }\n        await Promise.resolve(undefined);\n    }\n    /**\n     * Switches the selection on the chart.\n     * @category Public\n     */\n    async switchSelection() {\n        // for now we don't allow the switch selection when the filter by selection is on\n        if (this.chart !== undefined && this.filterBySelection !== true) {\n            await this.chart.switchSelection();\n        }\n    }\n    /**\n     * Clears all selection on the chart.\n     * @category Public\n     */\n    async clearSelection() {\n        if (this.chart !== undefined) {\n            this.chart.clearSelection();\n            // to handle the full data reset we call the componentDidUpdate to trigger a chart update\n            if (this.filterBySelection === true) {\n                await this.refresh();\n            }\n        }\n    }\n    /**\n     * Re-render the chart.\n     * @param {boolean | undefined} [props.updateData] Indicates whether to fetch new data. Default: true.\n     * @param {boolean | undefined} [props.updateExtent] Indicates whether the view's extent is to update. Default: false.\n     * @param {boolean | undefined} [props.resetAxesBounds] Option to reset the axes bounds along with the refresh.\n     * @category Public\n     */\n    async refresh(props) {\n        const { updateData = true, resetAxesBounds = false, updateExtent = false } = props ?? {};\n        this.viewExtentUpdated = updateExtent;\n        //  Adds a property into `updatedProps` so the debouncedChartUpdate triggers the update\n        this.updatedProps.add(updateData ? \"forceDataUpdate\" : \"forceSimpleUpdate\");\n        // Resetting the axes bounds\n        if (resetAxesBounds) {\n            delete this.config?.axes?.[1]?.minimum;\n            delete this.config?.axes?.[1]?.maximum;\n        }\n        await this.componentDidUpdate();\n        // reset the boolean for the next update\n        this.viewExtentUpdated = false;\n    }\n    /**\n     * Prevents render for noRenderProps\n     * @category Lifecycle\n     */\n    componentShouldUpdate(...args) {\n        const [, , propName] = args;\n        // Flagging the property. This list will be used when the chart update is actually called.\n        this.updatedProps.add(propName);\n        const shouldUpdate = !this.skipNextUpdate && !this.noRenderProps.includes(propName);\n        this.skipNextUpdate = false;\n        return shouldUpdate;\n    }\n    /**\n     * @category Lifecycle\n     */\n    async componentWillLoad() {\n        this.errorStrings = await fetchErrorsStrings(this.el);\n        this.commonStrings = await fetchCommonStrings(this.el);\n        // We define the function that will be called to update the chart. We use the external library fastq to queue the updates\n        // to make sure only one update is executed at a time\n        this.debouncedChartUpdate = promise(async () => {\n            if (this.chart !== undefined) {\n                const updatedProps = Array.from(this.updatedProps);\n                if (updatedProps.length > 0) {\n                    // if one of the properties updated require a data update, we flag it\n                    // multiple properties can be updated within the same time frame, which will trigger only one Stencil lifecycle\n                    const dataUpdateNeeded = updatedProps.some((updatedProp) => this.dataUpdateNeededProps.includes(updatedProp));\n                    // clearing the list for the next update\n                    this.updatedProps.clear();\n                    await this.chart.update({\n                        newChartConfig: this.config,\n                        updateOptions: gatherComponentOptions({\n                            component: this,\n                            dataUpdated: dataUpdateNeeded,\n                            viewExtentUpdated: this.viewExtentUpdated,\n                        }),\n                        updateGlobalOptions: gatherComponentGlobalOptions(this),\n                        t9nStrings: {\n                            errorStrings: this.errorStrings,\n                            commonStrings: this.commonStrings,\n                        },\n                    });\n                }\n                await Promise.resolve(undefined);\n            }\n        }, maximumNumberOfSimultaneousUpdates);\n    }\n    /**\n     * @category Lifecycle\n     */\n    async componentDidLoad() {\n        if (this.chartRef !== undefined) {\n            await this.createChartInstance();\n        }\n    }\n    /**\n     * @category Lifecycle\n     */\n    async componentDidUpdate() {\n        // If this.chartCreationProcessing is still running we need to wait for it to be done before updating the chart\n        if (this.chart === undefined && this.chartCreationProcessing !== undefined) {\n            await this.chartCreationProcessing;\n            this.chartCreationProcessing = undefined;\n        }\n        // Controlling the series type to display a console error if the type is not the expected one\n        // We still proceed to the update to let the config validator deal with the invalid config\n        await Mc([WebChartTypes.HistogramSeries], this.config);\n        if (this.config !== undefined && this.chart !== undefined && !this.showNotifyPanel) {\n            try {\n                // Calling for the chart update if the data source is valid\n                if (isValidDataSource(this.config, this.layer)) {\n                    await this.debouncedChartUpdate.push();\n                }\n            }\n            catch (e) {\n                if (this.chartRef !== undefined) {\n                    if (e.name === El.ChartDisposed) {\n                        this.chart.dispose();\n                        this.chart = undefined;\n                        this.chartRef.innerHTML = \"\";\n                        await this.createChartInstance(false);\n                    }\n                    else {\n                        // sending an event when error occurs.\n                        // We don't automatically recreate the chart in that scenario as it would lead to the same result.\n                        if (e.name === El.QueryFeaturesError) {\n                            this.arcgisDataProcessError.emit(e.details);\n                        }\n                        else {\n                            this.arcgisRuntimeError.emit(e.details ?? e);\n                        }\n                        // displaying the error\n                        this.errorAlert(e?.message);\n                    }\n                }\n            }\n        }\n        else if (this.chart === undefined && this.chartCreationProcessing === undefined && !this.showNotifyPanel) {\n            await this.createChartInstance();\n        }\n        else if (this.placeholder !== undefined) {\n            this.notify(this.placeholder);\n        }\n        // Update the action bar states since the relevant properties may have changed\n        if (this.actionBarElement !== undefined) {\n            updateActionBarStates(this.actionBarElement, this.config);\n        }\n    }\n    /**\n     * Called when the component is removed from the DOM.\n     * @category Lifecycle\n     */\n    async disconnectedCallback() {\n        this.removeLayerListeners();\n        this.removeExtentChangeListeners();\n        if (this.chart !== undefined) {\n            this.chart.dispose();\n        }\n    }\n    /**\n     * @category Lifecycle\n     */\n    render() {\n        const notifyPanel = this.showNotifyPanel ? (h(ArcgisChartsNotifyPanel, { heading: this.notifyHeading, message: this.notifyMessage, options: this.notifyOptions })) : null;\n        // TODO: implement stronger way to know when to keep the chart visible\n        const chartStyles = this.showNotifyPanel && this.notifyOptions?.kind === \"danger\"\n            ? HTMLClasses.Hide\n            : `${WebChartTypes.HistogramSeries} ${HTMLClasses.Show}`;\n        const notifyStyles = this.showNotifyPanel ? `${HTMLClasses.Show} ${HTMLClasses.NotifyPanel}` : HTMLClasses.Hide;\n        return (h(Host, { key: 'd575fe47ab3f5bdf2509f75a87c8fccb1d975daf' }, h(\"slot\", { key: '34ec67613feade72ef09361487a70687b697891f', name: Slot.actionBar, onSlotchange: (e) => {\n                onActionBarSlotChange(e, WebChartTypes.HistogramSeries, this.config);\n            }, ref: (el) => {\n                this.actionBarElement = el;\n            } }), h(\"div\", { key: 'e548fbab3b1c97f757c268f262e6e5c4fb652d48', class: chartStyles, ref: (el) => {\n                this.chartRef = el;\n            } }), h(\"div\", { key: 'a68ea4310a28df1fdba44a77b0fc8ad8770a9883', class: notifyStyles }, notifyPanel)));\n    }\n    /**\n     * Adds the listener to listen to the layer definitionExpression and renderer changes\n     * @category Private\n     */\n    async addLayerListeners() {\n        // removing existing listeners before adding new ones\n        this.removeLayerListeners();\n        this.layerFilterListener = await addLayerFilterListener({\n            layer: this.layer,\n            component: this,\n        });\n        this.layerRendererListener = await addLayerRendererListener({\n            layer: this.layer,\n            component: this,\n        });\n    }\n    /**\n     * Adds the listener to listen to the layer definitionExpression changes\n     * @category Private\n     */\n    async setLayerFilterListener() {\n        this.removeLayerFilterListener();\n        this.layerFilterListener = await addLayerFilterListener({\n            layer: this.layer,\n            component: this,\n        });\n    }\n    /**\n     * Adds a listener to listen to the layer's renderer changes when color match is enabled for a layer data source\n     * @category Private\n     */\n    async setLayerRendererListener() {\n        this.removeLayerRendererListener();\n        this.layerRendererListener = await addLayerRendererListener({\n            layer: this.layer,\n            component: this,\n        });\n    }\n    /**\n     * Adds a listener to listen to the view's extent change\n     * @category Private\n     */\n    async setExtentChangeListener() {\n        // removing existing listeners before adding new ones\n        this.removeExtentChangeListeners();\n        this.extentChangeListeners = await addExtentChangeListener({\n            view: this.view,\n            layer: this.layer,\n            component: this,\n        });\n    }\n    /**\n     * Removes the listeners added to listen to the layer definitionExpression and renderer changes\n     * @category Private\n     */\n    removeLayerListeners() {\n        this.removeLayerFilterListener();\n        this.removeLayerRendererListener();\n    }\n    /**\n     * Removes the layer filter listener when layer definitionExpression changes\n     * @category Private\n     */\n    removeLayerFilterListener() {\n        if (this.layerFilterListener !== undefined) {\n            this.layerFilterListener.remove();\n        }\n    }\n    /**\n     * Removes the layer renderer listener when layer renderer changes\n     * @category Private\n     */\n    removeLayerRendererListener() {\n        if (this.layerRendererListener !== undefined) {\n            this.layerRendererListener.remove();\n        }\n    }\n    /**\n     * Removes the listeners added to listen to the view's extent change\n     * @category Private\n     */\n    removeExtentChangeListeners() {\n        if (this.extentChangeListeners !== undefined) {\n            this.extentChangeListeners.forEach((listener) => listener.remove());\n            this.extentChangeListeners = [];\n        }\n    }\n    /**\n     * If the chart config version is newer than the current one, display a message in a popup.\n     * @category Private\n     */\n    checkForIncompatibleChartVersion() {\n        const chartVersion = this.config?.version;\n        if (this.errorPolicy === Lm.Throw &&\n            jc(chartVersion).versionStatus === WebChartVersionStatus.Newer) {\n            this.notifyHeading = this.errorStrings.incompatibleChartVersion.title;\n            this.notifyMessage = Kr(this.errorStrings.incompatibleChartVersion.message, {\n                chartVersion: chartVersion ?? \"\",\n            });\n            this.notifyOptions = {\n                kind: \"warning\",\n                autoClose: true,\n                active: true,\n            };\n            this.showNotifyPanel = true;\n        }\n    }\n    /**\n     * creates arcgis chart instance\n     * @param {boolean} [firstCreation] Indicates whether it's the first time the component is created\n     * @category Private\n     */\n    async createChartInstance(firstCreation = true) {\n        // If a chart creation is already running (rare case) we wait for it to be done before continuing\n        if (this.chartCreationProcessing !== undefined) {\n            await this.chartCreationProcessing;\n            this.chartCreationProcessing = undefined;\n        }\n        // Controlling the series type to display a console error if the type is not the expected one\n        // We still proceed to the creation to let the config validator deal with the invalid config\n        await Mc([WebChartTypes.HistogramSeries], this.config);\n        this.checkForIncompatibleChartVersion();\n        this.updatedProps.clear();\n        try {\n            if (isValidDataSource(this.config, this.layer)) {\n                this.chartCreationProcessing = zY({\n                    chartContainer: this.chartRef,\n                    chartConfig: this.config,\n                    options: gatherComponentOptions({ component: this }),\n                    globalOptions: gatherComponentGlobalOptions(this),\n                    t9nStrings: {\n                        errorStrings: this.errorStrings,\n                        commonStrings: this.commonStrings,\n                    },\n                });\n            }\n            this.chart = await this.chartCreationProcessing;\n            this.chartCreationProcessing = undefined;\n            // after creating the chart we add listeners on the feature layer and view\n            // only adding them if it's the first component creation. `createChartInstance()` can be called\n            // when an update failed, and in that case we don't need to add again the listeners given the view\n            // or layer didn't change\n            if (firstCreation) {\n                await this.addLayerListeners();\n                await this.setExtentChangeListener();\n            }\n        }\n        catch (e) {\n            // sending an event if a query failed\n            if (e.name === El.QueryFeaturesError) {\n                this.arcgisDataProcessError.emit(e.details);\n            }\n            else {\n                this.arcgisRuntimeError.emit(e.details ?? e);\n            }\n            // displaying the error\n            this.errorAlert(e?.message);\n            // disposing the chart\n            this.chart?.dispose();\n            this.chartCreationProcessing = undefined;\n            this.chart = undefined;\n        }\n    }\n    static get assetsDirs() { return [\"assets\"]; }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"view\": [\"viewChange\"],\n        \"layer\": [\"layerChange\"],\n        \"runtimeDataFilters\": [\"runtimeDataFiltersChange\"],\n        \"disableInteractions\": [\"disableInteractionsChange\"],\n        \"legendPosition\": [\"legendPositionChange\"],\n        \"legendVisibility\": [\"legendVisibilityChange\"],\n        \"filterBySelection\": [\"filterBySelectionChanged\"],\n        \"layerFilterChangePolicy\": [\"layerFilterChangePolicyCallBack\"],\n        \"layerRendererChangePolicy\": [\"layerRendererChangePolicyCallBack\"]\n    }; }\n};\nArcGISChartsHistogram.style = ArcgisChartsHistogramStyle0;\n\nexport { ArcGISChartsHistogram as A };\n"],"names":["ArcGISChartsHistogram","constructor","hostRef","registerInstance","this","arcgisRuntimeError","createEvent","arcgisDataProcessError","arcgisDataProcessComplete","arcgisLegendItemVisibilityChange","arcgisUpdateComplete","arcgisBadDataWarningRaise","arcgisSeriesColorChange","arcgisAxesMinMaxChange","arcgisSelectionComplete","skipNextUpdate","noRenderProps","dataUpdateNeededProps","updatedProps","Set","config","undefined","actionMode","cursorRange","legendPosition","legendVisibility","view","layer","selectionData","returnSelectionOIDs","returnSelectionIndexes","filterBySelection","messageOptions","errorPolicy","Lm","Throw","disableInteractions","queueChartCreation","useAnimatedCharts","hideLicenceWatermark","enableResponsiveFeatures","autoDisposeChart","placeholder","selectionTheme","tooltipFormatter","dataLabelFormatter","guideTooltipFormatter","xAxisLabelFormatter","yAxisLabelFormatter","disableTogglingLegendItems","hideLoaderAnimation","runtimeDataFilters","usePopupTemplateFieldsInfo","layerFilterChangePolicy","Am","Refresh","layerRendererChangePolicy","Em","ignoreViewExtent","showNotifyPanel","handleChartOutputDataChange","event","emit","detail","handleLegendItemVisibilityChanged","handleUpdateCompleted","handleBadDataWarningRaise","handleSeriesColorsChange","handleAxesMinMaxChange","handleSelection","handleAlertClosed","target","el","viewChange","newView","oldView","setExtentChangeListener","refresh","layerChange","addLayerListeners","runtimeDataFiltersChange","add","disableInteractionsChange","newValue","navigator","userAgent","search","chartRef","classList","HTMLClasses","DisableInteractions","remove","legendPositionChange","newLegendPosition","updateLegendPosition","legendVisibilityChange","newLegendVisibility","updateLegendVisibility","filterBySelectionChanged","resetAxesBounds","layerFilterChangePolicyCallBack","newRefreshOnLayerFilter","Ignore","setLayerFilterListener","removeLayerFilterListener","layerRendererChangePolicyCallBack","newRefreshOnLayerRenderer","setLayerRendererListener","removeLayerRendererListener","notify","message","heading","options","chart","Promise","resolve","errorAlert","errorMessage","notifyHeading","errorStrings","errorHeading","notifyMessage","notifyOptions","kind","autoClose","active","resetZoom","switchSelection","clearSelection","props","updateData","updateExtent","viewExtentUpdated","axes","minimum","maximum","componentDidUpdate","componentShouldUpdate","_len","arguments","length","args","Array","_key","propName","shouldUpdate","includes","componentWillLoad","fetchErrorsStrings","commonStrings","fetchCommonStrings","debouncedChartUpdate","promise","async","from","dataUpdateNeeded","some","updatedProp","clear","update","newChartConfig","updateOptions","gatherComponentOptions","component","dataUpdated","updateGlobalOptions","gatherComponentGlobalOptions","t9nStrings","maximumNumberOfSimultaneousUpdates","componentDidLoad","createChartInstance","chartCreationProcessing","Mc","WebChartTypes","HistogramSeries","isValidDataSource","push","e","name","El","ChartDisposed","dispose","innerHTML","QueryFeaturesError","details","actionBarElement","updateActionBarStates","disconnectedCallback","removeLayerListeners","removeExtentChangeListeners","render","notifyPanel","h","ArcgisChartsNotifyPanel","chartStyles","Hide","Show","notifyStyles","NotifyPanel","Host","key","Slot","actionBar","onSlotchange","onActionBarSlotChange","ref","class","layerFilterListener","addLayerFilterListener","layerRendererListener","addLayerRendererListener","extentChangeListeners","addExtentChangeListener","forEach","listener","checkForIncompatibleChartVersion","chartVersion","version","jc","versionStatus","WebChartVersionStatus","Newer","incompatibleChartVersion","title","Kr","firstCreation","zY","chartContainer","chartConfig","globalOptions","assetsDirs","getElement","watchers","style"],"sourceRoot":""}