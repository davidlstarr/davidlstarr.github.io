{"version":3,"file":"static/js/79671.7404e0ea.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/components/src/components/functional/Validation.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/input-message/interfaces.ts","../node_modules/@esri/calcite-components/dist/components/src/components/input-message/input-message.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/input-message/input-message.scss?tag=calcite-input-message&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/components/input-text/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/input-text/input-text.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/input-text/input-text.scss?tag=calcite-input-text&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/components/input/common/input.ts","../node_modules/@esri/calcite-components/dist/components/src/components/progress/progress.scss?tag=calcite-progress&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/components/progress/progress.tsx"],"sourcesContent":["import { FunctionalComponent, h, VNode } from \"@stencil/core\";\nimport { JSXBase } from \"@stencil/core/internal\";\nimport { Scale, Status } from \"../interfaces\";\nimport { IconNameOrString } from \"../icon/interfaces\";\n\ninterface ValidationProps extends JSXBase.HTMLAttributes {\n  scale: Scale;\n  status: Status;\n  icon?: IconNameOrString | boolean;\n  id?: string;\n  message: string;\n}\n\nexport const CSS = {\n  validationContainer: \"validation-container\",\n};\n\nexport const Validation: FunctionalComponent<ValidationProps> = ({\n  scale,\n  status,\n  id,\n  icon,\n  message,\n}): VNode => (\n  <div class={CSS.validationContainer}>\n    <calcite-input-message aria-live=\"polite\" icon={icon} id={id} scale={scale} status={status}>\n      {message}\n    </calcite-input-message>\n  </div>\n);\n","export const StatusIconDefaults = {\n  valid: \"check-circle\",\n  invalid: \"exclamation-mark-triangle\",\n  idle: \"information\",\n} as const;\n","import { Component, Element, h, Host, Prop, VNode, Watch } from \"@stencil/core\";\nimport { setRequestedIcon } from \"../../utils/dom\";\nimport { Scale, Status } from \"../interfaces\";\nimport { IconNameOrString } from \"../icon/interfaces\";\nimport { StatusIconDefaults } from \"./interfaces\";\n\n/**\n * @slot - A slot for adding text.\n */\n@Component({\n  tag: \"calcite-input-message\",\n  styleUrl: \"input-message.scss\",\n  shadow: true,\n})\nexport class InputMessage {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /** Specifies an icon to display. */\n  @Prop({ reflect: true }) icon: IconNameOrString | boolean;\n\n  /** When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`). */\n  @Prop({ reflect: true }) iconFlipRtl = false;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /** Specifies the status of the input field, which determines message and icons. */\n  @Prop({ reflect: true }) status: Status = \"idle\";\n\n  @Watch(\"status\")\n  @Watch(\"icon\")\n  handleIconEl(): void {\n    this.requestedIcon = setRequestedIcon(StatusIconDefaults, this.icon, this.status);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    this.requestedIcon = setRequestedIcon(StatusIconDefaults, this.icon, this.status);\n  }\n\n  render(): VNode {\n    const hidden = this.el.hidden;\n    return (\n      <Host calcite-hydrated-hidden={hidden}>\n        {this.renderIcon(this.requestedIcon)}\n        <slot />\n      </Host>\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteInputMessageElement;\n\n  /** the computed icon to render */\n  private requestedIcon?: IconNameOrString;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  private renderIcon(iconName: IconNameOrString): VNode {\n    if (iconName) {\n      return (\n        <calcite-icon\n          class=\"calcite-input-message-icon\"\n          flipRtl={this.iconFlipRtl}\n          icon={iconName}\n          scale=\"s\"\n        />\n      );\n    }\n  }\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-input-message-spacing-value: The top margin spacing above the component.\n */\n\n:host {\n  @apply text-color-1 transition-default box-border flex h-auto w-full items-center font-medium opacity-100;\n  --calcite-input-message-spacing-value: theme(\"spacing.1\");\n  margin-block-start: var(--calcite-input-message-spacing-value);\n}\n\n.calcite-input-message-icon {\n  @apply transition-default pointer-events-none inline-flex flex-shrink-0;\n  margin-inline-end: theme(\"margin.2\");\n}\n\n:host([status=\"invalid\"]) .calcite-input-message-icon {\n  color: var(--calcite-color-status-danger);\n}\n\n:host([status=\"warning\"]) .calcite-input-message-icon {\n  color: var(--calcite-color-status-warning);\n}\n\n:host([status=\"valid\"]) .calcite-input-message-icon {\n  color: var(--calcite-color-status-success);\n}\n\n:host([status=\"idle\"]) .calcite-input-message-icon {\n  color: var(--calcite-color-brand);\n}\n\n:host([scale=\"s\"]) {\n  @apply text-n3h;\n}\n\n:host([scale=\"m\"]) {\n  @apply text-n2h;\n}\n\n:host([scale=\"l\"]) {\n  @apply text-n1h;\n}\n\n@include base-component();\n","export const CSS = {\n  loader: \"loader\",\n  clearButton: \"clear-button\",\n  editingEnabled: \"editing-enabled\",\n  inlineChild: \"inline-child\",\n  inputIcon: \"icon\",\n  prefix: \"prefix\",\n  suffix: \"suffix\",\n  wrapper: \"element-wrapper\",\n  inputWrapper: \"wrapper\",\n  actionWrapper: \"action-wrapper\",\n  resizeIconWrapper: \"resize-icon-wrapper\",\n};\n\nexport const IDS = {\n  validationMessage: \"inputTextValidationMessage\",\n};\n\nexport const SLOTS = {\n  action: \"action\",\n};\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  forceUpdate,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport { getElementDir, getSlotted, setRequestedIcon, toAriaBoolean } from \"../../utils/dom\";\nimport {\n  connectForm,\n  disconnectForm,\n  FormComponent,\n  HiddenFormInputSlot,\n  internalHiddenInputInputEvent,\n  MutableValidityState,\n  submitForm,\n} from \"../../utils/form\";\nimport {\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport { connectLabel, disconnectLabel, getLabelText, LabelableComponent } from \"../../utils/label\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { connectLocalized, disconnectLocalized, LocalizedComponent } from \"../../utils/locale\";\nimport { createObserver } from \"../../utils/observers\";\nimport { CSS_UTILITY } from \"../../utils/resources\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { SetValueOrigin } from \"../input/interfaces\";\nimport { Alignment, Scale, Status } from \"../interfaces\";\nimport { getIconScale } from \"../../utils/component\";\nimport { Validation } from \"../functional/Validation\";\nimport { syncHiddenFormInput, TextualInputComponent } from \"../input/common/input\";\nimport { IconNameOrString } from \"../icon/interfaces\";\nimport { CSS, IDS, SLOTS } from \"./resources\";\nimport { InputTextMessages } from \"./assets/input-text/t9n\";\n\n/**\n * @slot action - A slot for positioning a button next to the component.\n */\n@Component({\n  tag: \"calcite-input-text\",\n  styleUrl: \"input-text.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class InputText\n  implements\n    LabelableComponent,\n    FormComponent,\n    InteractiveComponent,\n    LoadableComponent,\n    LocalizedComponent,\n    TextualInputComponent,\n    T9nComponent\n{\n  //--------------------------------------------------------------------------\n  //\n  //  Global attributes\n  //\n  //--------------------------------------------------------------------------\n\n  @Watch(\"autofocus\")\n  @Watch(\"enterkeyhint\")\n  @Watch(\"inputmode\")\n  handleGlobalAttributesChanged(): void {\n    forceUpdate(this);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /** Specifies the text alignment of the component's value. */\n  @Prop({ reflect: true }) alignment: Extract<\"start\" | \"end\", Alignment> = \"start\";\n\n  /**\n   * Adds global prop, missing from Stencil's `HTMLElement` type, see https://github.com/ionic-team/stencil/issues/5726\n   *\n   * @ignore\n   */\n  // eslint-disable-next-line @stencil-community/reserved-member-names\n  @Prop() autofocus: boolean;\n\n  /**\n   * When `true`, a clear button is displayed when the component has a value.\n   */\n  @Prop({ reflect: true }) clearable = false;\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   *\n   * @mdn [disabled](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled)\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  @Watch(\"disabled\")\n  disabledWatcher(): void {\n    this.setDisabledAction();\n  }\n\n  /**\n   * Adds support for kebab-cased attribute, removed in https://github.com/Esri/calcite-design-system/pull/9123\n   *\n   * @futureBreaking kebab-cased attribute will not be supported in a future release\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/reserved-member-names\n  @Prop() enterKeyHint: string;\n\n  /**\n   * The `id` of the form that will be associated with the component.\n   *\n   * When not set, the component will be associated with its ancestor form element, if any.\n   */\n  @Prop({ reflect: true })\n  form: string;\n\n  /**\n   * Specifies an icon to display.\n   *\n   * @futureBreaking Remove boolean type as it is not supported.\n   */\n  @Prop({ reflect: true }) icon: IconNameOrString | boolean;\n\n  /** When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`). */\n  @Prop({ reflect: true }) iconFlipRtl = false;\n\n  /**\n   * Adds support for kebab-cased attribute, removed in https://github.com/Esri/calcite-design-system/pull/9123\n   *\n   * @futureBreaking kebab-cased attribute will not be supported in a future release\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/reserved-member-names\n  @Prop() inputMode: string;\n\n  /** Accessible name for the component's button or hyperlink. */\n  @Prop() label: string;\n\n  /** When `true`, the component is in the loading state and `calcite-progress` is displayed. */\n  @Prop({ reflect: true }) loading = false;\n\n  /**\n   * Specifies the maximum length of text for the component's value.\n   *\n   * @mdn [maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength)\n   */\n  @Prop({ reflect: true }) maxLength: number;\n\n  /**\n   * Specifies the minimum length of text for the component's value.\n   *\n   * @mdn [minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength)\n   */\n  @Prop({ reflect: true }) minLength: number;\n\n  /** Specifies the validation message to display under the component. */\n  @Prop() validationMessage: string;\n\n  /** Specifies the validation icon to display under the component. */\n  @Prop({ reflect: true }) validationIcon: IconNameOrString | boolean;\n\n  /**\n   * The current validation state of the component.\n   *\n   * @readonly\n   * @mdn [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated in form util when syncing hidden input\n  @Prop({ mutable: true }) validity: MutableValidityState = {\n    valid: false,\n    badInput: false,\n    customError: false,\n    patternMismatch: false,\n    rangeOverflow: false,\n    rangeUnderflow: false,\n    stepMismatch: false,\n    tooLong: false,\n    tooShort: false,\n    typeMismatch: false,\n    valueMissing: false,\n  };\n\n  /**\n   * Specifies the name of the component.\n   *\n   * Required to pass the component's `value` on form submission.\n   *\n   * @mdn [name](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name)\n   */\n  @Prop({ reflect: true }) name: string;\n\n  /**\n   * Specifies placeholder text for the component.\n   *\n   * @mdn [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#placeholder)\n   */\n  @Prop() placeholder: string;\n\n  /** Adds text to the start of the component. */\n  @Prop() prefixText: string;\n\n  /**\n   * When `true`, the component's value can be read, but cannot be modified.\n   *\n   * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)\n   */\n  @Prop({ reflect: true }) readOnly = false;\n\n  /** When `true`, the component must have a value in order for the form to submit. */\n  @Prop({ reflect: true }) required = false;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /** Specifies the status of the input field, which determines message and icons. */\n  @Prop({ reflect: true }) status: Status = \"idle\";\n\n  /**\n   * Specifies the type of content to autocomplete, for use in forms.\n   * Read the native attribute's documentation on MDN for more info.\n   *\n   * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)\n   */\n  @Prop() autocomplete: string;\n\n  /**\n   * Specifies a regex pattern the component's `value` must match for validation.\n   * Read the native attribute's documentation on MDN for more info.\n   *\n   * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern)\n   */\n  @Prop() pattern: string;\n\n  /** Adds text to the end of the component.  */\n  @Prop() suffixText: string;\n\n  /**\n   * @internal\n   */\n  @Prop({ mutable: true, reflect: true }) editingEnabled = false;\n\n  /** The component's value. */\n  @Prop({ mutable: true }) value = \"\";\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: InputTextMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<InputTextMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  @Watch(\"value\")\n  valueWatcher(newValue: string, previousValue: string): void {\n    if (!this.userChangedValue) {\n      this.setValue({\n        origin: \"direct\",\n        previousValue,\n        value: !newValue ? \"\" : newValue,\n      });\n    }\n    this.userChangedValue = false;\n  }\n\n  @Watch(\"icon\")\n  updateRequestedIcon(): void {\n    this.requestedIcon = setRequestedIcon({}, this.icon, \"text\");\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Properties\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteInputTextElement;\n\n  labelEl: HTMLCalciteLabelElement;\n\n  formEl: HTMLFormElement;\n\n  defaultValue: InputText[\"value\"];\n\n  inlineEditableEl: HTMLCalciteInlineEditableElement;\n\n  private inputWrapperEl: HTMLDivElement;\n\n  private actionWrapperEl: HTMLDivElement;\n\n  /** keep track of the rendered child */\n  private childEl?: HTMLInputElement;\n\n  get isClearable(): boolean {\n    return this.clearable && this.value.length > 0;\n  }\n\n  private previousEmittedValue: string;\n\n  private previousValue: string;\n\n  private previousValueOrigin: SetValueOrigin = \"initial\";\n\n  /** the computed icon to render */\n  private requestedIcon?: IconNameOrString;\n\n  mutationObserver = createObserver(\"mutation\", () => this.setDisabledAction());\n\n  private userChangedValue = false;\n\n  @State() effectiveLocale: string;\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  @State() defaultMessages: InputTextMessages;\n\n  @State() slottedActionElDisabledInternally = false;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectLocalized(this);\n    connectMessages(this);\n\n    this.inlineEditableEl = this.el.closest(\"calcite-inline-editable\");\n    if (this.inlineEditableEl) {\n      this.editingEnabled = this.inlineEditableEl.editingEnabled || false;\n    }\n\n    connectLabel(this);\n    connectForm(this);\n    this.mutationObserver?.observe(this.el, { childList: true });\n    this.setDisabledAction();\n    this.el.addEventListener(internalHiddenInputInputEvent, this.onHiddenFormInputInput);\n  }\n\n  disconnectedCallback(): void {\n    disconnectLabel(this);\n    disconnectForm(this);\n    disconnectLocalized(this);\n    disconnectMessages(this);\n\n    this.mutationObserver?.disconnect();\n    this.el.removeEventListener(internalHiddenInputInputEvent, this.onHiddenFormInputInput);\n  }\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    this.requestedIcon = setRequestedIcon({}, this.icon, \"text\");\n    await setUpMessages(this);\n\n    this.setPreviousEmittedValue(this.value);\n    this.setPreviousValue(this.value);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * @internal\n   */\n  @Event() calciteInternalInputTextFocus: EventEmitter<{\n    element: HTMLInputElement;\n    value: string;\n  }>;\n\n  /**\n   * @internal\n   */\n  @Event() calciteInternalInputTextBlur: EventEmitter<{ element: HTMLInputElement; value: string }>;\n\n  /**\n   * Fires each time a new value is typed.\n   */\n  @Event({ cancelable: true }) calciteInputTextInput: EventEmitter<void>;\n\n  /**\n   * Fires each time a new value is typed and committed.\n   */\n  @Event() calciteInputTextChange: EventEmitter<void>;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /** Sets focus on the component. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n\n    this.childEl?.focus();\n  }\n\n  /** Selects the text of the component's `value`. */\n  @Method()\n  async selectText(): Promise<void> {\n    this.childEl?.select();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  keyDownHandler = (event: KeyboardEvent): void => {\n    if (this.readOnly || this.disabled || event.defaultPrevented) {\n      return;\n    }\n\n    if (this.isClearable && event.key === \"Escape\") {\n      this.clearInputTextValue(event);\n      event.preventDefault();\n    }\n    if (event.key === \"Enter\") {\n      if (submitForm(this)) {\n        event.preventDefault();\n      }\n    }\n  };\n\n  onLabelClick(): void {\n    this.setFocus();\n  }\n\n  private clearInputTextValue = (nativeEvent: KeyboardEvent | MouseEvent): void => {\n    this.setValue({\n      committing: true,\n      nativeEvent,\n      origin: \"user\",\n      value: \"\",\n    });\n  };\n\n  private emitChangeIfUserModified = (): void => {\n    if (this.previousValueOrigin === \"user\" && this.value !== this.previousEmittedValue) {\n      this.calciteInputTextChange.emit();\n      this.setPreviousEmittedValue(this.value);\n    }\n  };\n\n  private inputTextBlurHandler = () => {\n    this.calciteInternalInputTextBlur.emit({\n      element: this.childEl,\n      value: this.value,\n    });\n\n    this.emitChangeIfUserModified();\n  };\n\n  private clickHandler = (event: MouseEvent): void => {\n    if (this.disabled) {\n      return;\n    }\n\n    const composedPath = event.composedPath();\n\n    if (\n      !composedPath.includes(this.inputWrapperEl) ||\n      composedPath.includes(this.actionWrapperEl)\n    ) {\n      return;\n    }\n\n    this.setFocus();\n  };\n\n  private inputTextFocusHandler = (): void => {\n    this.calciteInternalInputTextFocus.emit({\n      element: this.childEl,\n      value: this.value,\n    });\n  };\n\n  private inputTextInputHandler = (nativeEvent: InputEvent): void => {\n    if (this.disabled || this.readOnly) {\n      return;\n    }\n    this.setValue({\n      nativeEvent,\n      origin: \"user\",\n      value: (nativeEvent.target as HTMLInputElement).value,\n    });\n  };\n\n  private inputTextKeyDownHandler = (event: KeyboardEvent): void => {\n    if (this.disabled || this.readOnly) {\n      return;\n    }\n    if (event.key === \"Enter\") {\n      this.emitChangeIfUserModified();\n    }\n  };\n\n  syncHiddenFormInput(input: HTMLInputElement): void {\n    syncHiddenFormInput(\"text\", this, input);\n  }\n\n  private onHiddenFormInputInput = (event: Event): void => {\n    if ((event.target as HTMLInputElement).name === this.name) {\n      this.setValue({\n        value: (event.target as HTMLInputElement).value,\n        origin: \"direct\",\n      });\n    }\n    this.setFocus();\n    event.stopPropagation();\n  };\n\n  private setChildElRef = (el) => {\n    this.childEl = el;\n  };\n\n  private setDisabledAction(): void {\n    const slottedActionEl = getSlotted(this.el, \"action\");\n\n    if (!slottedActionEl) {\n      return;\n    }\n\n    if (this.disabled) {\n      if (slottedActionEl.getAttribute(\"disabled\") == null) {\n        this.slottedActionElDisabledInternally = true;\n      }\n      slottedActionEl.setAttribute(\"disabled\", \"\");\n    } else if (this.slottedActionElDisabledInternally) {\n      slottedActionEl.removeAttribute(\"disabled\");\n      this.slottedActionElDisabledInternally = false;\n    }\n  }\n\n  private setInputValue = (newInputValue: string): void => {\n    if (!this.childEl) {\n      return;\n    }\n    this.childEl.value = newInputValue;\n  };\n\n  private setPreviousEmittedValue = (value: string): void => {\n    this.previousEmittedValue = value;\n  };\n\n  private setPreviousValue = (value: string): void => {\n    this.previousValue = value;\n  };\n\n  private setValue = ({\n    committing = false,\n    nativeEvent,\n    origin,\n    previousValue,\n    value,\n  }: {\n    committing?: boolean;\n    nativeEvent?: MouseEvent | KeyboardEvent | InputEvent;\n    origin: SetValueOrigin;\n    previousValue?: string;\n    value: string;\n  }): void => {\n    this.setPreviousValue(previousValue ?? this.value);\n    this.previousValueOrigin = origin;\n    this.userChangedValue = origin === \"user\" && value !== this.value;\n    this.value = value;\n\n    if (origin === \"direct\") {\n      this.setInputValue(value);\n      this.setPreviousEmittedValue(value);\n    }\n\n    if (nativeEvent) {\n      const calciteInputTextInputEvent = this.calciteInputTextInput.emit();\n\n      if (calciteInputTextInputEvent.defaultPrevented) {\n        this.value = this.previousValue;\n      } else if (committing) {\n        this.emitChangeIfUserModified();\n      }\n    }\n  };\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n\n  render(): VNode {\n    const dir = getElementDir(this.el);\n    const loader = (\n      <div class={CSS.loader}>\n        <calcite-progress label={this.messages.loading} type=\"indeterminate\" />\n      </div>\n    );\n\n    const inputClearButton = (\n      <button\n        aria-label={this.messages.clear}\n        class={CSS.clearButton}\n        disabled={this.disabled || this.readOnly}\n        onClick={this.clearInputTextValue}\n        tabIndex={-1}\n        type=\"button\"\n      >\n        <calcite-icon icon=\"x\" scale={getIconScale(this.scale)} />\n      </button>\n    );\n    const iconEl = (\n      <calcite-icon\n        class={CSS.inputIcon}\n        flipRtl={this.iconFlipRtl}\n        icon={this.requestedIcon}\n        scale={getIconScale(this.scale)}\n      />\n    );\n    const prefixText = <div class={CSS.prefix}>{this.prefixText}</div>;\n    const suffixText = <div class={CSS.suffix}>{this.suffixText}</div>;\n\n    const childEl = (\n      <input\n        aria-errormessage={IDS.validationMessage}\n        aria-invalid={toAriaBoolean(this.status === \"invalid\")}\n        aria-label={getLabelText(this)}\n        autocomplete={this.autocomplete}\n        autofocus={this.el.autofocus ? true : null}\n        class={{\n          [CSS.editingEnabled]: this.editingEnabled,\n          [CSS.inlineChild]: !!this.inlineEditableEl,\n        }}\n        defaultValue={this.defaultValue}\n        disabled={this.disabled ? true : null}\n        enterKeyHint={this.el.enterKeyHint || this.el.getAttribute(\"enterkeyhint\")}\n        inputMode={this.el.inputMode || this.el.getAttribute(\"inputmode\")}\n        maxLength={this.maxLength}\n        minLength={this.minLength}\n        name={this.name}\n        onBlur={this.inputTextBlurHandler}\n        onFocus={this.inputTextFocusHandler}\n        onInput={this.inputTextInputHandler}\n        onKeyDown={this.inputTextKeyDownHandler}\n        pattern={this.pattern}\n        placeholder={this.placeholder || \"\"}\n        readOnly={this.readOnly}\n        ref={this.setChildElRef}\n        required={this.required ? true : null}\n        tabIndex={this.disabled || (this.inlineEditableEl && !this.editingEnabled) ? -1 : null}\n        type=\"text\"\n        value={this.value}\n      />\n    );\n\n    return (\n      <Host onClick={this.clickHandler} onKeyDown={this.keyDownHandler}>\n        <InteractiveContainer disabled={this.disabled}>\n          <div\n            class={{ [CSS.inputWrapper]: true, [CSS_UTILITY.rtl]: dir === \"rtl\" }}\n            ref={(el) => (this.inputWrapperEl = el)}\n          >\n            {this.prefixText ? prefixText : null}\n            <div class={CSS.wrapper}>\n              {childEl}\n              {this.isClearable ? inputClearButton : null}\n              {this.requestedIcon ? iconEl : null}\n              {this.loading ? loader : null}\n            </div>\n            <div class={CSS.actionWrapper} ref={(el) => (this.actionWrapperEl = el)}>\n              <slot name={SLOTS.action} />\n            </div>\n            {this.suffixText ? suffixText : null}\n            <HiddenFormInputSlot component={this} />\n          </div>\n          {this.validationMessage && this.status === \"invalid\" ? (\n            <Validation\n              icon={this.validationIcon}\n              id={IDS.validationMessage}\n              message={this.validationMessage}\n              scale={this.scale}\n              status={this.status}\n            />\n          ) : null}\n        </InteractiveContainer>\n      </Host>\n    );\n  }\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-input-prefix-size: Specifies the component's prefix width.\n * @prop --calcite-input-suffix-size: Specifies the component's suffix width.\n */\n\n:host {\n  @apply block;\n}\n\n// scales\n:host([scale=\"s\"]) {\n  & input {\n    padding-inline-start: theme(\"spacing.2\");\n    padding-inline-end: var(--calcite-internal-input-text-input-padding-inline-end, theme(\"spacing.2\"));\n  }\n\n  & input,\n  & .prefix,\n  & .suffix {\n    @apply text-n2h h-6;\n  }\n\n  & .prefix,\n  & .suffix {\n    @apply px-2;\n  }\n\n  & .action-wrapper calcite-button,\n  & .action-wrapper calcite-button button {\n    @apply h-6;\n  }\n\n  & .clear-button {\n    min-block-size: theme(\"spacing.6\");\n    min-inline-size: theme(\"spacing.6\");\n  }\n}\n\n:host([scale=\"m\"]) {\n  & input {\n    padding-inline-start: theme(\"spacing.3\");\n    padding-inline-end: var(--calcite-internal-input-text-input-padding-inline-end, theme(\"spacing.3\"));\n  }\n\n  & input,\n  & .prefix,\n  & .suffix {\n    @apply text-n1h h-8;\n  }\n\n  & .prefix,\n  & .suffix {\n    @apply px-3;\n  }\n\n  & .action-wrapper calcite-button,\n  & .action-wrapper calcite-button button {\n    @apply h-8;\n  }\n\n  & .clear-button {\n    min-block-size: theme(\"spacing.8\");\n    min-inline-size: theme(\"spacing.8\");\n  }\n}\n\n:host([scale=\"l\"]) {\n  & input {\n    padding-inline-start: theme(\"spacing.4\");\n    padding-inline-end: var(--calcite-internal-input-text-input-padding-inline-end, theme(\"spacing.4\"));\n  }\n\n  & input,\n  & .prefix,\n  & .suffix {\n    @apply text-0h h-11;\n  }\n\n  & .prefix,\n  & .suffix {\n    @apply px-4;\n  }\n\n  & .action-wrapper calcite-button,\n  & .action-wrapper calcite-button button {\n    @apply h-11;\n  }\n\n  & .clear-button {\n    min-block-size: theme(\"spacing.11\");\n    min-inline-size: theme(\"spacing.11\");\n  }\n}\n\n@include disabled();\n\ninput {\n  transition:\n    var(--calcite-animation-timing),\n    block-size 0,\n    outline-offset 0s;\n  -webkit-appearance: none;\n  @apply bg-foreground-1\n    box-border\n    flex\n    flex-1\n    font-inherit\n    font-normal\n    m-0\n    max-h-full\n    max-w-full\n    relative\n    rounded-none\n    text-color-1\n    text-ellipsis\n    w-full;\n\n  &:placeholder-shown {\n    @apply text-ellipsis;\n  }\n}\n\n// states\ninput {\n  @apply text-color-1\n    border-color-input\n    border\n    border-solid;\n  &::placeholder,\n  &:-ms-input-placeholder,\n  &::-ms-input-placeholder {\n    @apply text-color-3 font-normal;\n  }\n}\ninput:focus {\n  @apply border-color-brand text-color-1;\n}\ninput[readonly] {\n  @apply bg-background font-medium;\n}\ninput[readonly]:focus {\n  @apply text-color-1;\n}\ncalcite-icon {\n  @apply text-color-3;\n}\n\n//focus\n\ninput {\n  @apply focus-base;\n}\ninput:focus {\n  @apply focus-inset;\n}\n\n:host([status=\"invalid\"]) {\n  & input {\n    @apply border-color-danger;\n  }\n  & input:focus {\n    @apply focus-inset-danger;\n  }\n}\n\n// ICONS\n\n// position icons\n\n:host([scale=\"s\"]) .icon {\n  inset-inline-start: theme(\"spacing.2\");\n}\n\n:host([scale=\"m\"]) .icon {\n  inset-inline-start: theme(\"spacing.3\");\n}\n\n:host([scale=\"l\"]) .icon {\n  inset-inline-start: theme(\"spacing.4\");\n}\n\n// position placeholder/value text in relation to icons\n\n:host([icon][scale=\"s\"]) input {\n  padding-inline-start: theme(\"padding.8\");\n}\n\n:host([icon][scale=\"m\"]) input {\n  padding-inline-start: theme(\"padding.10\");\n}\n\n:host([icon][scale=\"l\"]) input {\n  padding-inline-start: theme(\"padding.14\");\n}\n\n// positioning wrapper for icon and loader\n\n.element-wrapper {\n  @apply relative\n    order-3\n    inline-flex\n    flex-1\n    items-center;\n}\n\n.icon {\n  @apply transition-default\n    pointer-events-none\n    absolute\n    block\n\n    z-default; // needed for firefox to display the icon properly\n}\n\n// hide browser default clear\n\ninput[type=\"text\"]::-ms-clear,\ninput[type=\"text\"]::-ms-reveal {\n  @apply hidden\n    h-0\n    w-0;\n}\n\n.clear-button {\n  pointer-events: initial;\n  @apply focus-base\n    border-color-input\n    bg-foreground-1\n    order-4\n    m-0\n    box-border\n    flex\n    min-h-full\n    cursor-pointer\n    items-center\n    justify-center\n    self-stretch\n    border\n    border-solid;\n\n  border-inline-start-width: theme(\"borderWidth.0\");\n\n  &:hover {\n    @apply bg-foreground-2 transition-default;\n    calcite-icon {\n      @apply text-color-1 transition-default;\n    }\n  }\n  &:active {\n    @apply bg-foreground-3;\n    calcite-icon {\n      @apply text-color-1;\n    }\n  }\n  &:focus {\n    @apply focus-inset;\n  }\n  &:disabled {\n    @apply opacity-disabled;\n  }\n}\n\n// loading\n.loader {\n  inset-block-start: 1px;\n  inset-inline: 1px;\n  @apply pointer-events-none\n    absolute\n    block;\n}\n\n// slotted action\n.action-wrapper {\n  @apply order-7 flex;\n}\n\n// prefix and suffix\n.prefix,\n.suffix {\n  @apply border-color-input\n    bg-background\n    text-color-2\n    box-border\n    flex\n    h-auto\n    min-h-full\n    select-none\n    content-center\n    items-center\n    break-words\n    border\n    border-solid\n    font-medium\n    leading-none;\n}\n\n.prefix {\n  @apply order-2;\n  border-inline-end-width: theme(\"borderWidth.0\");\n  inline-size: var(--calcite-input-prefix-size, auto);\n}\n.suffix {\n  @apply order-5;\n  border-inline-start-width: theme(\"borderWidth.0\");\n  inline-size: var(--calcite-input-suffix-size, auto);\n}\n\n// alignment type\n:host([alignment=\"start\"]) {\n  & input {\n    text-align: start;\n  }\n}\n\n:host([alignment=\"end\"]) {\n  & input {\n    text-align: end;\n  }\n}\n\n.wrapper {\n  @apply relative\n    flex\n    flex-row\n    items-center;\n}\n\n:host(.no-bottom-border) input {\n  @apply border-b-0;\n}\n\n:host(.border-top-color-one) input {\n  @apply border-t-color-1;\n}\n\n// input needed for higher specificity of these overrides\ninput {\n  &.inline-child {\n    @apply transition-default bg-transparent;\n    .editing-enabled {\n      background-color: inherit;\n    }\n  }\n\n  &.inline-child:not(.editing-enabled) {\n    @apply border-color-transparent\n    flex\n    cursor-pointer text-ellipsis;\n    padding-inline-start: 0;\n  }\n}\n\n@include form-validation-message();\n@include hidden-form-input();\n@include base-component();\n","export type InputComponent = NumericInputComponent | TextualInputComponent | DateTimeInputComponent;\n\nexport interface DateTimeInputComponent {\n  min: string;\n  max: string;\n}\n\nexport interface NumericInputComponent {\n  min: number;\n  max: number;\n  step: number | \"any\";\n}\n\nexport interface TextualInputComponent {\n  pattern?: string;\n  minLength: number;\n  maxLength: number;\n}\n\n/**\n * Exported for testing purposes only\n */\nexport const minMaxStepTypes = [\"date\", \"datetime-local\", \"month\", \"number\", \"range\", \"time\", \"week\"];\n\n/**\n * Exported for testing purposes only\n */\nexport const patternTypes = [\"email\", \"password\", \"search\", \"tel\", \"text\", \"url\"];\n\n/**\n * Exported for testing purposes only\n */\nexport const minMaxLengthTypes = [\"email\", \"password\", \"search\", \"tel\", \"text\", \"textarea\", \"url\"];\n\nfunction updateConstraintValidation(\n  inputComponent: InputComponent,\n  input: HTMLInputElement,\n  propName: string,\n  matchesType: boolean,\n): void {\n  const attributeName = propName.toLowerCase();\n  const value = inputComponent[propName];\n\n  if (matchesType && value != null) {\n    input.setAttribute(attributeName, `${value}`);\n  } else {\n    // we remove the attribute to ensure validation-constraints are properly reset\n    input.removeAttribute(attributeName);\n  }\n}\n\n/**\n * Synchronizes the hidden form input with the validation-related input properties.\n *\n * Note: loss of precision is expected due to the hidden input's value and validation-constraint props being strings.\n *\n * @param type - The input type.\n * @param inputComponent\n * @param hiddenFormInput\n */\nexport function syncHiddenFormInput(\n  type: HTMLInputElement[\"type\"] | \"textarea\",\n  inputComponent: InputComponent,\n  hiddenFormInput: HTMLInputElement,\n): void {\n  hiddenFormInput.type = type === \"textarea\" ? \"text\" : type;\n\n  const isMinMaxStepType = minMaxStepTypes.includes(type);\n  const numericInputComponent = inputComponent as NumericInputComponent;\n\n  updateConstraintValidation(numericInputComponent, hiddenFormInput, \"min\", isMinMaxStepType);\n  updateConstraintValidation(numericInputComponent, hiddenFormInput, \"max\", isMinMaxStepType);\n  updateConstraintValidation(numericInputComponent, hiddenFormInput, \"step\", isMinMaxStepType);\n\n  const isMinMaxLengthType = minMaxLengthTypes.includes(type);\n\n  const textualInputComponent = inputComponent as TextualInputComponent;\n\n  updateConstraintValidation(textualInputComponent, hiddenFormInput, \"minLength\", isMinMaxLengthType);\n  updateConstraintValidation(textualInputComponent, hiddenFormInput, \"maxLength\", isMinMaxLengthType);\n\n  const isPatternType = patternTypes.includes(type);\n\n  updateConstraintValidation(textualInputComponent, hiddenFormInput, \"pattern\", isPatternType);\n}\n","/**\n* CSS Custom Properties\n*\n* These properties can be overridden using the component's tag as selector.\n*\n* @prop --calcite-progress-background-color: Specifies the component's background color.\n* @prop --calcite-progress-fill-color: Specifies the component's fill color.\n* @prop --calcite-progress-text-color: Specifies the component's text color.\n*/\n\n@import \"../../assets/styles/animation\";\n\n:host {\n  @apply relative block w-full;\n}\n\n.track,\n.bar {\n  @apply absolute top-0;\n  block-size: 2px;\n}\n\n.track {\n  @apply z-default w-full overflow-hidden;\n  background-color: var(--calcite-progress-background-color, var(--calcite-color-border-3));\n}\n\n.bar {\n  @apply z-default;\n\n  background-color: var(--calcite-progress-fill-color, var(--calcite-color-brand));\n}\n\n@media (forced-colors: active) {\n  .track {\n    background-color: highlightText;\n  }\n  .bar {\n    background-color: linkText;\n  }\n}\n\n.indeterminate {\n  @apply w-1/5;\n  animation: looping-progress-bar-ani scale-duration(--calcite-internal-animation-timing-medium, 11) linear infinite;\n  &.calcite--rtl {\n    animation-name: looping-progress-bar-ani-rtl;\n  }\n}\n\n.reversed {\n  animation-direction: reverse;\n}\n\n.text {\n  @apply text-n2h px-0 pt-4 pb-0 text-center font-medium;\n  color: var(--calcite-progress-text-color, var(--calcite-color-text-2));\n}\n\n@keyframes looping-progress-bar-ani {\n  0% {\n    transform: translate3d(-100%, 0, 0);\n  }\n  50% {\n    inline-size: 40%;\n  }\n  100% {\n    transform: translate3d(600%, 0, 0);\n  }\n}\n\n@keyframes looping-progress-bar-ani-rtl {\n  0% {\n    transform: translate3d(100%, 0, 0);\n  }\n  50% {\n    inline-size: 40%;\n  }\n  100% {\n    transform: translate3d(-600%, 0, 0);\n  }\n}\n\n@include base-component();\n","import { Component, Element, h, Prop, VNode } from \"@stencil/core\";\nimport { getElementDir } from \"../../utils/dom\";\nimport { CSS_UTILITY } from \"../../utils/resources\";\n@Component({\n  tag: \"calcite-progress\",\n  styleUrl: \"progress.scss\",\n  shadow: true,\n})\nexport class Progress {\n  @Element() el: HTMLCalciteProgressElement;\n\n  /**\n   * Specifies the component type.\n   *\n   * Use `\"indeterminate\"` if finding actual progress value is impossible.\n   *\n   */\n  @Prop({ reflect: true }) type: \"indeterminate\" | \"determinate\" = \"determinate\";\n\n  /** When `type` is `\"determinate\"`, the component's progress value with a range of 0.0 - 1.0. */\n  @Prop() value = 0;\n\n  /** Accessible name for the component. */\n  @Prop() label: string;\n\n  /** Text that displays under the component's indicator. */\n  @Prop() text: string;\n\n  /** When `true` and for `\"indeterminate\"` progress bars, reverses the animation direction. */\n  @Prop({ reflect: true }) reversed = false;\n\n  render(): VNode {\n    const isDeterminate = this.type === \"determinate\";\n    const barStyles = isDeterminate ? { width: `${this.value * 100}%` } : {};\n    const dir = getElementDir(this.el);\n    return (\n      <div\n        aria-label={this.label || this.text}\n        aria-valuemax={1}\n        aria-valuemin={0}\n        aria-valuenow={this.value}\n        role=\"progressbar\"\n      >\n        <div class=\"track\">\n          <div\n            class={{\n              bar: true,\n              indeterminate: this.type === \"indeterminate\",\n              [CSS_UTILITY.rtl]: dir === \"rtl\",\n              reversed: this.reversed,\n            }}\n            style={barStyles}\n          />\n        </div>\n        {this.text ? <div class=\"text\">{this.text}</div> : null}\n      </div>\n    );\n  }\n}\n"],"names":["CSS","Validation","_ref","scale","status","id","icon","message","h","class","StatusIconDefaults","valid","invalid","idle","InputMessage","proxyCustomElement","HTMLElement","handleIconEl","this","requestedIcon","setRequestedIcon","connectedCallback","render","hidden","el","Host","key","renderIcon","iconName","flipRtl","iconFlipRtl","IDS","SLOTS","InputText","previousValueOrigin","mutationObserver","createObserver","setDisabledAction","userChangedValue","keyDownHandler","event","readOnly","disabled","defaultPrevented","isClearable","clearInputTextValue","preventDefault","submitForm","nativeEvent","setValue","committing","origin","value","emitChangeIfUserModified","previousEmittedValue","calciteInputTextChange","emit","setPreviousEmittedValue","inputTextBlurHandler","calciteInternalInputTextBlur","element","childEl","clickHandler","composedPath","includes","inputWrapperEl","actionWrapperEl","setFocus","inputTextFocusHandler","calciteInternalInputTextFocus","inputTextInputHandler","target","inputTextKeyDownHandler","onHiddenFormInputInput","name","stopPropagation","setChildElRef","setInputValue","newInputValue","setPreviousValue","previousValue","calciteInputTextInput","badInput","customError","patternMismatch","rangeOverflow","rangeUnderflow","stepMismatch","tooLong","tooShort","typeMismatch","valueMissing","handleGlobalAttributesChanged","forceUpdate","disabledWatcher","onMessagesChange","valueWatcher","newValue","updateRequestedIcon","clearable","length","effectiveLocaleChange","updateMessages","effectiveLocale","connectLocalized","connectMessages","inlineEditableEl","closest","editingEnabled","connectLabel","connectForm","observe","childList","addEventListener","internalHiddenInputInputEvent","disconnectedCallback","disconnectLabel","disconnectForm","disconnectLocalized","disconnectMessages","disconnect","removeEventListener","componentWillLoad","setUpLoadableComponent","setUpMessages","componentDidLoad","setComponentLoaded","componentDidRender","updateHostInteraction","componentFocusable","focus","selectText","select","onLabelClick","syncHiddenFormInput","input","slottedActionEl","getSlotted","getAttribute","slottedActionElDisabledInternally","setAttribute","removeAttribute","dir","getElementDir","loader","label","messages","loading","type","inputClearButton","clear","onClick","tabIndex","getIconScale","iconEl","prefixText","suffixText","toAriaBoolean","getLabelText","autocomplete","autofocus","defaultValue","enterKeyHint","inputMode","maxLength","minLength","onBlur","onFocus","onInput","onKeyDown","pattern","placeholder","ref","required","InteractiveContainer","CSS_UTILITY","rtl","HiddenFormInputSlot","component","validationMessage","validationIcon","minMaxStepTypes","patternTypes","minMaxLengthTypes","updateConstraintValidation","inputComponent","propName","matchesType","attributeName","toLowerCase","hiddenFormInput","isMinMaxStepType","numericInputComponent","isMinMaxLengthType","textualInputComponent","Progress","barStyles","width","text","role","bar","indeterminate","reversed","style"],"sourceRoot":""}