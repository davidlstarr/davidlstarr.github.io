import{J as s,K as o,fx as _,M as m,aL as c,s as d,fc as g,B as f,aN as l}from"./index-CN4ACLGJ.js";import{n as v,r as S}from"./FeatureLayerView2D-BC_3uSaD.js";import"./featureConversionUtils-6C_rWoY8.js";import"./timeSupport-Z8BAgt-S.js";import"./highlightReasons-CbqG0WV4.js";import"./LayerView-gty9mKdc.js";import"./Container-CfcOBiSO.js";import"./definitions-Y_v3njP4.js";import"./enums-BlUEVwJR.js";import"./Texture-Bfi7Qxg7.js";import"./TechniqueInstance-DqViwwXf.js";import"./UpdateTracking2D-DF2R2zoI.js";import"./BindType-BmZEZMMh.js";import"./Util-BwG3tAg0.js";import"./Program-D9LJIvzC.js";import"./LabelMetric-D5-8oTAH.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./BoundingBox-B77QRulE.js";import"./TileContainer-nMI-RLzi.js";import"./WGLContainer-1K6UH7eS.js";import"./ProgramTemplate-DUFwCkd2.js";import"./vec3f32-nZdmKIgz.js";import"./StyleDefinition-Bp5qg9S_.js";import"./config-MDUrh2eL.js";import"./earcut-ATLbUfOW.js";import"./CircularArray-CujHzHWW.js";import"./tileUtils-B7X19rIS.js";import"./CIMSymbolHelper-ejsLkTHI.js";import"./BidiEngine-BwB1Df7c.js";import"./fontUtils-CMNdT_NB.js";import"./GeometryUtils-DNrMVs5Q.js";import"./Rect-CUzevAry.js";import"./SDFHelper-BAjOH2xj.js";import"./floatRGBA-C49__rhk.js";import"./FeatureCommandQueue-C4ZPd1Hm.js";import"./constants-D5zmR9t2.js";import"./HighlightCounter-BnnmbgyO.js";import"./popupUtils-OSfq1O7C.js";import"./RefreshableLayerView-YNa43-Hm.js";const C=e=>{let t=class extends e{resume(){this._isUserPaused=!1,this.suspended||this._doResume()}pause(){this._isUserPaused=!0,this.suspended||this._doPause()}disconnect(){this._doDisconnect()}connect(){this._doConnect()}clear(){this._doClear()}constructor(...r){super(...r),this._isUserPaused=!1,this.filter=null}get connectionStatus(){return(this._isUserPaused||this.suspended)&&this._streamConnectionStatus==="connected"?"paused":this._streamConnectionStatus}_onSuspendedChange(r){r?this._doPause():this._isUserPaused||this._doResume()}};return s([o()],t.prototype,"_isUserPaused",void 0),s([o({readOnly:!0})],t.prototype,"connectionStatus",null),s([o({type:_})],t.prototype,"filter",void 0),t=s([m("esri.views.layers.StreamLayerView")],t),t};let n=class extends C(S){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([c(()=>this.layer.customParameters,async e=>{(await this.getWorker()).streamMessenger.updateCustomParameters(e)}),this.layer.on("send-message-to-socket",async e=>{(await this.getWorker()).streamMessenger.sendMessageToSocket(e)}),this.layer.on("send-message-to-client",async e=>{(await this.getWorker()).streamMessenger.sendMessageToClient(e),this._isUserPaused&&"type"in e&&e.type==="clear"&&this.incrementSourceRefreshVersion()}),c(()=>this.layer.purgeOptions,()=>this._update()),c(()=>this.suspended,this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new d("stream-controller",this.pipelineErrorString):null}on(e,t){if(Array.isArray(e))return g(e.map(i=>this.on(i,t)));const r=["data-received","message-received"].includes(e);r&&this.getWorker().then(i=>i.streamMessenger.enableEvent(e,!0));const p=super.on(e,t),a=this;return f(()=>{p.remove(),r&&(a._workerProxy.closed||a.hasEventListener(e)||a.getWorker().then(i=>i.streamMessenger.enableEvent(e,!1)))})}async queryLatestObservations(e,t){var p,a,i;if(!((p=this.layer.timeInfo)!=null&&p.endField||(a=this.layer.timeInfo)!=null&&a.startField||(i=this.layer.timeInfo)!=null&&i.trackIdField))throw new d("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");const r=await this.getWorker();return v(r.features.executeQueryForLatestObservations(this._cleanUpQuery(e),t).then(y=>{const h=l.fromJSON(y);return h.features.forEach(u=>{u.layer=this.layer,u.sourceLayer=this.layer}),h}),new l({features:[]}))}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){this._refreshInterval!=null&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval=setInterval(()=>this.incrementSourceRefreshVersion(),this.layer.updateInterval)}_doDisconnect(){this.getWorker().then(e=>e.streamMessenger.disconnect()),this._doPause()}_doConnect(){this.getWorker().then(e=>e.streamMessenger.connect()),this.resume()}_doClear(){this.getWorker().then(e=>e.streamMessenger.clear()),this._refreshInterval==null&&this.incrementSourceRefreshVersion()}_createClientOptions(){const e=super._createClientOptions(),t=this;return{...e,get container(){return t.featureContainer},setProperty:r=>{this.set(r.propertyName,r.value)}}}};s([o()],n.prototype,"pipelineConnectionStatus",void 0),s([o()],n.prototype,"pipelineErrorString",void 0),s([o({readOnly:!0})],n.prototype,"connectionError",null),s([o({readOnly:!0})],n.prototype,"_streamConnectionStatus",null),n=s([m("esri.views.2d.layers.StreamLayerView2D")],n);const ae=n;export{ae as default};
