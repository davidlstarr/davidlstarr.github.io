import{at as p,s,b5 as i}from"./index-CN4ACLGJ.js";import{l as n}from"./MeshVertexAttributes-Bm47eKZI.js";import{M as a}from"./vertexSpaceConversion-Xs8Wp8Bp.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-m81BWRKb.js";import"./computeTranslationToOriginAndRotation-BHX3BSCU.js";import"./meshVertexSpaceUtils-D7LLjQq-.js";import"./MeshLocalVertexSpace-D4og9axY.js";import"./vec3-BxdF4rWT.js";import"./projection-B0wB-UWX.js";import"./DoubleArray-Bq9Bb0l5.js";import"./BufferView-BF16IC7d.js";import"./vec4-BYv3bz8L.js";async function S(t,r,m){await Promise.resolve(),p(m);const o=a(t,r);if(!o)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const e=t.cloneAndModifyVertexAttributes(new n({...o,uv:i(t.vertexAttributes.uv),color:i(t.vertexAttributes.color)}),r);return e.transform=null,e}export{S as convertMeshVertexSpace};
